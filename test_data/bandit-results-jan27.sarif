{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Bandit",
          "organization": "PyCQA",
          "rules": [
            {
              "id": "B324",
              "name": "hashlib",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b324_hashlib.html"
            },
            {
              "id": "B608",
              "name": "hardcoded_sql_expressions",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-89"
                ],
                "precision": "low"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b608_hardcoded_sql_expressions.html"
            },
            {
              "id": "B101",
              "name": "assert_used",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-703"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b101_assert_used.html"
            },
            {
              "id": "B104",
              "name": "hardcoded_bind_all_interfaces",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-605"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b104_hardcoded_bind_all_interfaces.html"
            },
            {
              "id": "B305",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b304-b305-ciphers-and-modes"
            },
            {
              "id": "B413",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b413-import-pycrypto"
            },
            {
              "id": "B304",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b304-b305-ciphers-and-modes"
            },
            {
              "id": "B303",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b303-md5"
            },
            {
              "id": "B403",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-502"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b403-import-pickle"
            },
            {
              "id": "B301",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-502"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b301-pickle"
            },
            {
              "id": "B610",
              "name": "django_extra_used",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-89"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b610_django_extra_used.html"
            },
            {
              "id": "B611",
              "name": "django_rawsql_used",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-89"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b611_django_rawsql_used.html"
            },
            {
              "id": "B307",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b307-eval"
            },
            {
              "id": "B102",
              "name": "exec_used",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b102_exec_used.html"
            },
            {
              "id": "B201",
              "name": "flask_debug_true",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-94"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b201_flask_debug_true.html"
            },
            {
              "id": "B402",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b402-import-ftplib"
            },
            {
              "id": "B321",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b321-ftplib"
            },
            {
              "id": "B105",
              "name": "hardcoded_password_string",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-259"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b105_hardcoded_password_string.html"
            },
            {
              "id": "B107",
              "name": "hardcoded_password_default",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-259"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b107_hardcoded_password_default.html"
            },
            {
              "id": "B106",
              "name": "hardcoded_password_funcarg",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-259"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b106_hardcoded_password_funcarg.html"
            },
            {
              "id": "B108",
              "name": "hardcoded_tmp_directory",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-377"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b108_hardcoded_tmp_directory.html"
            },
            {
              "id": "B412",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-284"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b412-import-httpoxy"
            },
            {
              "id": "B404",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b404-import-subprocess"
            },
            {
              "id": "B602",
              "name": "subprocess_popen_with_shell_equals_true",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b602_subprocess_popen_with_shell_equals_true.html"
            },
            {
              "id": "B701",
              "name": "jinja2_autoescape_false",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-94"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b701_jinja2_autoescape_false.html"
            },
            {
              "id": "B612",
              "name": "logging_config_insecure_listen",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-94"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b612_logging_config_insecure_listen.html"
            },
            {
              "id": "B702",
              "name": "use_of_mako_templates",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-80"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b702_use_of_mako_templates.html"
            },
            {
              "id": "B308",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-79"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b308-mark-safe"
            },
            {
              "id": "B703",
              "name": "django_mark_safe",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-80"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b703_django_mark_safe.html"
            },
            {
              "id": "B302",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-502"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b302-marshal"
            },
            {
              "id": "B306",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-377"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b306-mktemp-q"
            },
            {
              "id": "B506",
              "name": "yaml_load",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b506_yaml_load.html"
            },
            {
              "id": "B317",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-sax"
            },
            {
              "id": "B507",
              "name": "ssh_no_host_key_verification",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-295"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b507_ssh_no_host_key_verification.html"
            },
            {
              "id": "B607",
              "name": "start_process_with_partial_path",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b607_start_process_with_partial_path.html"
            },
            {
              "id": "B103",
              "name": "set_bad_file_permissions",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-732"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b103_set_bad_file_permissions.html"
            },
            {
              "id": "B606",
              "name": "start_process_with_no_shell",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b606_start_process_with_no_shell.html"
            },
            {
              "id": "B605",
              "name": "start_process_with_a_shell",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b605_start_process_with_a_shell.html"
            },
            {
              "id": "B601",
              "name": "paramiko_calls",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b601_paramiko_calls.html"
            },
            {
              "id": "B603",
              "name": "subprocess_without_shell_equals_true",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b603_subprocess_without_shell_equals_true.html"
            },
            {
              "id": "B415",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b415-import-pyghmi"
            },
            {
              "id": "B614",
              "name": "pytorch_load_save",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-502"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b614_pytorch_load_save.html"
            },
            {
              "id": "B311",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-330"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b311-random"
            },
            {
              "id": "B113",
              "name": "request_without_timeout",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-400"
                ],
                "precision": "low"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b113_request_without_timeout.html"
            },
            {
              "id": "B501",
              "name": "request_with_no_cert_validation",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-295"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b501_request_with_no_cert_validation.html"
            },
            {
              "id": "B508",
              "name": "snmp_insecure_version_check",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b508_snmp_insecure_version_check.html"
            },
            {
              "id": "B509",
              "name": "snmp_crypto_check",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b509_snmp_crypto_check.html"
            },
            {
              "id": "B502",
              "name": "ssl_with_bad_version",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b502_ssl_with_bad_version.html"
            },
            {
              "id": "B504",
              "name": "ssl_with_no_version",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b504_ssl_with_no_version.html"
            },
            {
              "id": "B503",
              "name": "ssl_with_bad_defaults",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b503_ssl_with_bad_defaults.html"
            },
            {
              "id": "B604",
              "name": "any_other_function_with_shell_equals_true",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-78"
                ],
                "precision": "low"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b604_any_other_function_with_shell_equals_true.html"
            },
            {
              "id": "B202",
              "name": "tarfile_unsafe_members",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-22"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b202_tarfile_unsafe_members.html"
            },
            {
              "id": "B401",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b401-import-telnetlib"
            },
            {
              "id": "B312",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-319"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b312-telnetlib"
            },
            {
              "id": "B112",
              "name": "try_except_continue",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-703"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b112_try_except_continue.html"
            },
            {
              "id": "B110",
              "name": "try_except_pass",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-703"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b110_try_except_pass.html"
            },
            {
              "id": "B323",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-295"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b323-unverified-context"
            },
            {
              "id": "B310",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-22"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b310-urllib-urlopen"
            },
            {
              "id": "B505",
              "name": "weak_cryptographic_key",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-326"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b505_weak_cryptographic_key.html"
            },
            {
              "id": "B609",
              "name": "linux_commands_wildcard_injection",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-155"
                ],
                "precision": "medium"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/plugins/b609_linux_commands_wildcard_injection.html"
            },
            {
              "id": "B405",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b405-import-xml-etree"
            },
            {
              "id": "B313",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-celementtree"
            },
            {
              "id": "B314",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree"
            },
            {
              "id": "B407",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b407-import-xml-expat"
            },
            {
              "id": "B316",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-expatbuilder"
            },
            {
              "id": "B406",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b406-import-xml-sax"
            },
            {
              "id": "B315",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-expatreader"
            },
            {
              "id": "B408",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b408-import-xml-minidom"
            },
            {
              "id": "B318",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-minidom"
            },
            {
              "id": "B409",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b409-import-xml-pulldom"
            },
            {
              "id": "B319",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_calls.html#b313-b320-xml-bad-pulldom"
            },
            {
              "id": "B411",
              "name": "blacklist",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-20"
                ],
                "precision": "high"
              },
              "helpUri": "https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b411-import-xmlrpclib"
            }
          ],
          "version": "1.8.2",
          "semanticVersion": "1.8.2"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "endTimeUtc": "2025-01-27T18:18:40Z",
          "toolConfigurationNotifications": [
            {
              "message": {
                "text": "syntax error while parsing AST from file"
              },
              "level": "error",
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "examples/new_candidates-none.py"
                    }
                  }
                }
              ]
            },
            {
              "message": {
                "text": "syntax error while parsing AST from file"
              },
              "level": "error",
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "examples/nonsense.py"
                    }
                  }
                }
              ]
            },
            {
              "message": {
                "text": "syntax error while parsing AST from file"
              },
              "level": "error",
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "examples/nonsense2.py"
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "properties": {
        "metrics": {
          "_totals": {
            "loc": 8861,
            "nosec": 32,
            "skipped_tests": 18,
            "SEVERITY.UNDEFINED": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "SEVERITY.LOW": 155,
            "CONFIDENCE.LOW": 51,
            "SEVERITY.MEDIUM": 280,
            "CONFIDENCE.MEDIUM": 112,
            "SEVERITY.HIGH": 134,
            "CONFIDENCE.HIGH": 406
          },
          "./app.py": {
            "loc": 113,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 1,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/__init__.py": {
            "loc": 0,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/assert.py": {
            "loc": 1,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/binding.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 1,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/cipher-modes.py": {
            "loc": 5,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/ciphers.py": {
            "loc": 77,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 24,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 25
          },
          "./examples/crypto-md5.py": {
            "loc": 39,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 16,
            "SEVERITY.HIGH": 9,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 25
          },
          "./examples/dill.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/django_sql_injection_extra.py": {
            "loc": 25,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 11,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 11,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/django_sql_injection_raw.py": {
            "loc": 12,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 6,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 6,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/eval.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/exec.py": {
            "loc": 1,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/flask_debug.py": {
            "loc": 11,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 1,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/ftplib.py": {
            "loc": 15,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 3,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/hardcoded-passwords.py": {
            "loc": 28,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 14,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 14,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/hardcoded-tmp.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 3,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/hashlib_new_insecure_functions.py": {
            "loc": 13,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 9,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/httpoxy_cgihandler.py": {
            "loc": 8,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/httpoxy_twisted_directory.py": {
            "loc": 6,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/httpoxy_twisted_script.py": {
            "loc": 6,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/imports-aliases.py": {
            "loc": 13,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 4,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 4,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/imports-from.py": {
            "loc": 6,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 3,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/imports-function.py": {
            "loc": 7,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/imports-with-importlib.py": {
            "loc": 11,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 4,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/imports.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/jinja2_templating.py": {
            "loc": 22,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 5,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 2,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/jsonpickle.py": {
            "loc": 5,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/logging_config_insecure_listen.py": {
            "loc": 2,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/long_set.py": {
            "loc": 7278,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/mako_templating.py": {
            "loc": 6,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/mark_safe.py": {
            "loc": 3,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/mark_safe_insecure.py": {
            "loc": 115,
            "nosec": 3,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 54,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 54
          },
          "./examples/mark_safe_secure.py": {
            "loc": 58,
            "nosec": 6,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 17,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 17
          },
          "./examples/marshal_deserialize.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/mktemp.py": {
            "loc": 8,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 4,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/multiline_statement.py": {
            "loc": 11,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 3,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/new_candidates-all.py": {
            "loc": 12,
            "nosec": 3,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/new_candidates-none.py": {
            "loc": 3,
            "nosec": 0,
            "skipped_tests": 0
          },
          "./examples/new_candidates-nosec.py": {
            "loc": 9,
            "nosec": 3,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/new_candidates-some.py": {
            "loc": 10,
            "nosec": 3,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/no_host_key_verification.py": {
            "loc": 12,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 8,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 8,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/nonsense.py": {
            "loc": 1,
            "nosec": 0,
            "skipped_tests": 0
          },
          "./examples/nonsense2.py": {
            "loc": 1,
            "nosec": 0,
            "skipped_tests": 0
          },
          "./examples/nosec.py": {
            "loc": 18,
            "nosec": 5,
            "skipped_tests": 10,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 5,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 5
          },
          "./examples/okay.py": {
            "loc": 1,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/os-chmod.py": {
            "loc": 17,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 4,
            "SEVERITY.HIGH": 8,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 1,
            "CONFIDENCE.HIGH": 11
          },
          "./examples/os-exec.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 8,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 8,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/os-popen.py": {
            "loc": 13,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 8,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/os-spawn.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 8,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 8,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/os-startfile.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 3,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 3,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/os_system.py": {
            "loc": 2,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/pandas_read_pickle.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/paramiko_injection.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 1,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/partial_path_process.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 11,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 11
          },
          "./examples/pickle_deserialize.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/popen_wrappers.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 7,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 7
          },
          "./examples/pycrypto.py": {
            "loc": 8,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 2,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/pycryptodome.py": {
            "loc": 8,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/pyghmi.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 1,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/pytorch_load_save.py": {
            "loc": 10,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 4,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/random_module.py": {
            "loc": 16,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 9,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/requests-missing-timeout.py": {
            "loc": 64,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 25,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 25,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/requests-ssl-verify-disabled.py": {
            "loc": 38,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 18,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 18
          },
          "./examples/shelve_open.py": {
            "loc": 9,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/skip.py": {
            "loc": 7,
            "nosec": 2,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 5,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 5
          },
          "./examples/snmp.py": {
            "loc": 5,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 3,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/sql_multiline_statements.py": {
            "loc": 151,
            "nosec": 7,
            "skipped_tests": 8,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 26,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 13,
            "CONFIDENCE.MEDIUM": 13,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/sql_statements.py": {
            "loc": 32,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 20,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 10,
            "CONFIDENCE.MEDIUM": 10,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/ssl-insecure-version.py": {
            "loc": 31,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 13,
            "SEVERITY.HIGH": 9,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 14,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/subprocess_shell.py": {
            "loc": 44,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 24,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 11,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 1,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 35
          },
          "./examples/tarfile_extractall.py": {
            "loc": 45,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 2,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 1,
            "CONFIDENCE.MEDIUM": 2,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/telnetlib.py": {
            "loc": 14,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 2,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/trojansource_latin1.py": {
            "loc": 3,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 0
          },
          "./examples/try_except_continue.py": {
            "loc": 22,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/try_except_pass.py": {
            "loc": 23,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/unverified_context.py": {
            "loc": 3,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/urlopen.py": {
            "loc": 25,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 8,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 8
          },
          "./examples/weak_cryptographic_key_sizes.py": {
            "loc": 59,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 8,
            "SEVERITY.HIGH": 8,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 16
          },
          "./examples/wildcard-injection.py": {
            "loc": 12,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 10,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 4,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 5,
            "CONFIDENCE.HIGH": 9
          },
          "./examples/xml_etree_celementtree.py": {
            "loc": 13,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 4,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 5
          },
          "./examples/xml_etree_elementtree.py": {
            "loc": 13,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 4,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 5
          },
          "./examples/xml_expatbuilder.py": {
            "loc": 7,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 3
          },
          "./examples/xml_expatreader.py": {
            "loc": 4,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 1,
            "SEVERITY.MEDIUM": 1,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          },
          "./examples/xml_minidom.py": {
            "loc": 12,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/xml_pulldom.py": {
            "loc": 12,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 4
          },
          "./examples/xml_sax.py": {
            "loc": 25,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 2,
            "SEVERITY.MEDIUM": 6,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 8
          },
          "./examples/xml_xmlrpc.py": {
            "loc": 8,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 0,
            "SEVERITY.HIGH": 1,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 1
          },
          "./examples/yaml_load.py": {
            "loc": 19,
            "nosec": 0,
            "skipped_tests": 0,
            "SEVERITY.UNDEFINED": 0,
            "SEVERITY.LOW": 0,
            "SEVERITY.MEDIUM": 2,
            "SEVERITY.HIGH": 0,
            "CONFIDENCE.UNDEFINED": 0,
            "CONFIDENCE.LOW": 0,
            "CONFIDENCE.MEDIUM": 0,
            "CONFIDENCE.HIGH": 2
          }
        }
      },
      "results": [
        {
          "message": {
            "text": "Use of weak SHA1 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    m = hashlib.sha1()\n"
                  },
                  "endColumn": 23,
                  "endLine": 61,
                  "startColumn": 9,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def _hash(value: str) -> str:\n    m = hashlib.sha1()\n    m.update(value.encode('utf-8'))\n"
                  },
                  "endLine": 62,
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    vulnerable_raw_sql =\"SELECT user_id, username, pw_hash FROM user WHERE username = '\" + username + \"' AND pw_hash = '\" + pw_hash + \"';\"\n"
                  },
                  "endColumn": 89,
                  "endLine": 97,
                  "startColumn": 25,
                  "startLine": 97
                },
                "artifactLocation": {
                  "uri": "app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def _bad_get_authenticated_user(con, username: str, pw_hash: str):\n    vulnerable_raw_sql =\"SELECT user_id, username, pw_hash FROM user WHERE username = '\" + username + \"' AND pw_hash = '\" + pw_hash + \"';\"\n    print(f\"Executing vulnerable raw SQL:\\n{vulnerable_raw_sql}\")\n"
                  },
                  "endLine": 98,
                  "startLine": 96
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "assert True\n"
                  },
                  "endColumn": 12,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/assert.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "assert True\n"
                  },
                  "endLine": 1,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B101",
          "ruleIndex": 2
        },
        {
          "message": {
            "text": "Possible binding to all interfaces."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "s.bind(('0.0.0.0', 31137))\n"
                  },
                  "endColumn": 18,
                  "endLine": 4,
                  "startColumn": 9,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/binding.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('0.0.0.0', 31137))\ns.bind(('192.168.0.1', 8080))\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B104",
          "ruleIndex": 3
        },
        {
          "message": {
            "text": "Use of insecure cipher mode cryptography.hazmat.primitives.ciphers.modes.ECB."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "mode = ECB(iv)\n"
                  },
                  "endColumn": 15,
                  "endLine": 6,
                  "startColumn": 8,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/cipher-modes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Insecure mode\nmode = ECB(iv)\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B305",
          "ruleIndex": 4
        },
        {
          "message": {
            "text": "The pyCrypto library and its module ARC2 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import ARC2 as pycrypto_arc2\n"
                  },
                  "endColumn": 48,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import ARC2 as pycrypto_arc2\nfrom Crypto.Cipher import ARC4 as pycrypto_arc4\nfrom Crypto.Cipher import Blowfish as pycrypto_blowfish\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module ARC4 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import ARC4 as pycrypto_arc4\n"
                  },
                  "endColumn": 48,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import ARC2 as pycrypto_arc2\nfrom Crypto.Cipher import ARC4 as pycrypto_arc4\nfrom Crypto.Cipher import Blowfish as pycrypto_blowfish\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module Blowfish are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import Blowfish as pycrypto_blowfish\n"
                  },
                  "endColumn": 56,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import ARC4 as pycrypto_arc4\nfrom Crypto.Cipher import Blowfish as pycrypto_blowfish\nfrom Crypto.Cipher import DES as pycrypto_des\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module DES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import DES as pycrypto_des\n"
                  },
                  "endColumn": 46,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import Blowfish as pycrypto_blowfish\nfrom Crypto.Cipher import DES as pycrypto_des\nfrom Crypto.Cipher import XOR as pycrypto_xor\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module XOR are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import XOR as pycrypto_xor\n"
                  },
                  "endColumn": 46,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import DES as pycrypto_des\nfrom Crypto.Cipher import XOR as pycrypto_xor\nfrom Cryptodome.Cipher import ARC2 as pycryptodomex_arc2\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module SHA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Hash import SHA\n"
                  },
                  "endColumn": 28,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Cryptodome.Cipher import XOR as pycryptodomex_xor\nfrom Crypto.Hash import SHA\nfrom Crypto import Random\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module Random are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto import Random\n"
                  },
                  "endColumn": 26,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Hash import SHA\nfrom Crypto import Random\nfrom Crypto.Util import Counter\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module Counter are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Util import Counter\n"
                  },
                  "endColumn": 32,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto import Random\nfrom Crypto.Util import Counter\nfrom cryptography.hazmat.primitives.ciphers import Cipher\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "Use of insecure cipher Crypto.Cipher.ARC2.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycrypto_arc2.new(key, pycrypto_arc2.MODE_CFB, iv)\n"
                  },
                  "endColumn": 60,
                  "endLine": 22,
                  "startColumn": 10,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "iv = Random.new().read(pycrypto_arc2.block_size)\ncipher = pycrypto_arc2.new(key, pycrypto_arc2.MODE_CFB, iv)\nmsg = iv + cipher.encrypt(b'Attack at dawn')\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Cryptodome.Cipher.ARC2.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycryptodomex_arc2.new(key, pycryptodomex_arc2.MODE_CFB, iv)\n"
                  },
                  "endColumn": 70,
                  "endLine": 24,
                  "startColumn": 10,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "msg = iv + cipher.encrypt(b'Attack at dawn')\ncipher = pycryptodomex_arc2.new(key, pycryptodomex_arc2.MODE_CFB, iv)\nmsg = iv + cipher.encrypt(b'Attack at dawn')\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tempkey = SHA.new(key+nonce).digest()\n"
                  },
                  "endColumn": 29,
                  "endLine": 29,
                  "startColumn": 11,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "nonce = Random.new().read(16)\ntempkey = SHA.new(key+nonce).digest()\ncipher = pycrypto_arc4.new(tempkey)\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure cipher Crypto.Cipher.ARC4.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycrypto_arc4.new(tempkey)\n"
                  },
                  "endColumn": 36,
                  "endLine": 30,
                  "startColumn": 10,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "tempkey = SHA.new(key+nonce).digest()\ncipher = pycrypto_arc4.new(tempkey)\nmsg = nonce + cipher.encrypt(b'Open the pod bay doors, HAL')\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Cryptodome.Cipher.ARC4.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycryptodomex_arc4.new(tempkey)\n"
                  },
                  "endColumn": 41,
                  "endLine": 32,
                  "startColumn": 10,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "msg = nonce + cipher.encrypt(b'Open the pod bay doors, HAL')\ncipher = pycryptodomex_arc4.new(tempkey)\nmsg = nonce + cipher.encrypt(b'Open the pod bay doors, HAL')\n"
                  },
                  "endLine": 33,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Crypto.Cipher.Blowfish.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycrypto_blowfish.new(key, pycrypto_blowfish.MODE_CBC, iv)\n"
                  },
                  "endColumn": 68,
                  "endLine": 42,
                  "startColumn": 10,
                  "startLine": 42
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bs = pycrypto_blowfish.block_size\ncipher = pycrypto_blowfish.new(key, pycrypto_blowfish.MODE_CBC, iv)\nmsg = iv + cipher.encrypt(plaintext + padding)\n"
                  },
                  "endLine": 43,
                  "startLine": 41
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Cryptodome.Cipher.Blowfish.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycryptodomex_blowfish.new(key, pycryptodomex_blowfish.MODE_CBC, iv)\n"
                  },
                  "endColumn": 78,
                  "endLine": 45,
                  "startColumn": 10,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bs = pycryptodomex_blowfish.block_size\ncipher = pycryptodomex_blowfish.new(key, pycryptodomex_blowfish.MODE_CBC, iv)\nmsg = iv + cipher.encrypt(plaintext + padding)\n"
                  },
                  "endLine": 46,
                  "startLine": 44
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Crypto.Cipher.DES.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycrypto_des.new(key, pycrypto_des.MODE_CTR, counter=ctr)\n"
                  },
                  "endColumn": 67,
                  "endLine": 52,
                  "startColumn": 10,
                  "startLine": 52
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ctr = Counter.new(pycrypto_des.block_size*8/2, prefix=nonce)\ncipher = pycrypto_des.new(key, pycrypto_des.MODE_CTR, counter=ctr)\nmsg = nonce + cipher.encrypt(plaintext)\n"
                  },
                  "endLine": 53,
                  "startLine": 51
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Cryptodome.Cipher.DES.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycryptodomex_des.new(key, pycryptodomex_des.MODE_CTR, counter=ctr)\n"
                  },
                  "endColumn": 77,
                  "endLine": 56,
                  "startColumn": 10,
                  "startLine": 56
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ctr = Counter.new(pycryptodomex_des.block_size*8/2, prefix=nonce)\ncipher = pycryptodomex_des.new(key, pycryptodomex_des.MODE_CTR, counter=ctr)\nmsg = nonce + cipher.encrypt(plaintext)\n"
                  },
                  "endLine": 57,
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Crypto.Cipher.XOR.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycrypto_xor.new(key)\n"
                  },
                  "endColumn": 31,
                  "endLine": 61,
                  "startColumn": 10,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "plaintext = b'Encrypt me'\ncipher = pycrypto_xor.new(key)\nmsg = cipher.encrypt(plaintext)\n"
                  },
                  "endLine": 62,
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher Cryptodome.Cipher.XOR.new. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = pycryptodomex_xor.new(key)\n"
                  },
                  "endColumn": 36,
                  "endLine": 63,
                  "startColumn": 10,
                  "startLine": 63
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "msg = cipher.encrypt(plaintext)\ncipher = pycryptodomex_xor.new(key)\nmsg = cipher.encrypt(plaintext)\n"
                  },
                  "endLine": 64,
                  "startLine": 62
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.ARC4. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 37,
                  "endLine": 66,
                  "startColumn": 17,
                  "startLine": 66
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 67,
                  "startLine": 65
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.Blowfish. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 41,
                  "endLine": 70,
                  "startColumn": 17,
                  "startLine": 70
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 71,
                  "startLine": 69
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.CAST5. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.CAST5(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 38,
                  "endLine": 74,
                  "startColumn": 17,
                  "startLine": 74
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.CAST5(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 75,
                  "startLine": 73
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.IDEA. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.IDEA(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 37,
                  "endLine": 78,
                  "startColumn": 17,
                  "startLine": 78
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.IDEA(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 79,
                  "startLine": 77
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.SEED. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.SEED(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 37,
                  "endLine": 82,
                  "startColumn": 17,
                  "startLine": 82
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.SEED(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 83,
                  "startLine": 81
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "Use of insecure cipher cryptography.hazmat.primitives.ciphers.algorithms.TripleDES. Replace with a known secure cipher such as AES."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())\n"
                  },
                  "endColumn": 42,
                  "endLine": 86,
                  "startColumn": 17,
                  "startLine": 86
                },
                "artifactLocation": {
                  "uri": "examples/ciphers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncipher = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend())\nencryptor = cipher.encryptor()\n"
                  },
                  "endLine": 87,
                  "startLine": 85
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B304",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "The pyCrypto library and its module MD2 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD2 as pycrypto_md2\n"
                  },
                  "endColumn": 44,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from cryptography.hazmat.primitives import hashes\nfrom Crypto.Hash import MD2 as pycrypto_md2\nfrom Crypto.Hash import MD4 as pycrypto_md4\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module MD4 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD4 as pycrypto_md4\n"
                  },
                  "endColumn": 44,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD2 as pycrypto_md2\nfrom Crypto.Hash import MD4 as pycrypto_md4\nfrom Crypto.Hash import MD5 as pycrypto_md5\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module MD5 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD5 as pycrypto_md5\n"
                  },
                  "endColumn": 44,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD4 as pycrypto_md4\nfrom Crypto.Hash import MD5 as pycrypto_md5\nfrom Crypto.Hash import SHA as pycrypto_sha\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module SHA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Hash import SHA as pycrypto_sha\n"
                  },
                  "endColumn": 44,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Hash import MD5 as pycrypto_md5\nfrom Crypto.Hash import SHA as pycrypto_sha\nfrom Cryptodome.Hash import MD2 as pycryptodomex_md2\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.md5(1)\n"
                  },
                  "endColumn": 15,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.md5(1)\nhashlib.md5(1).hexdigest()\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.md5(1).hexdigest()\n"
                  },
                  "endColumn": 15,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "hashlib.md5(1)\nhashlib.md5(1).hexdigest()\n\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "abc = str.replace(hashlib.md5(\"1\"), \"###\")\n"
                  },
                  "endColumn": 35,
                  "endLine": 16,
                  "startColumn": 19,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nabc = str.replace(hashlib.md5(\"1\"), \"###\")\n\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(hashlib.md5(\"1\"))\n"
                  },
                  "endColumn": 23,
                  "endLine": 18,
                  "startColumn": 7,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(hashlib.md5(\"1\"))\n\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA1 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.sha1(1)\n"
                  },
                  "endColumn": 16,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.sha1(1)\n\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_md2.new()\n"
                  },
                  "endColumn": 19,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npycrypto_md2.new()\npycrypto_md4.new()\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_md4.new()\n"
                  },
                  "endColumn": 19,
                  "endLine": 25,
                  "startColumn": 1,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_md2.new()\npycrypto_md4.new()\npycrypto_md5.new()\n"
                  },
                  "endLine": 26,
                  "startLine": 24
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_md5.new()\n"
                  },
                  "endColumn": 19,
                  "endLine": 26,
                  "startColumn": 1,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_md4.new()\npycrypto_md5.new()\npycrypto_sha.new()\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_sha.new()\n"
                  },
                  "endColumn": 19,
                  "endLine": 27,
                  "startColumn": 1,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_md5.new()\npycrypto_sha.new()\n\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_md2.new()\n"
                  },
                  "endColumn": 24,
                  "endLine": 29,
                  "startColumn": 1,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npycryptodomex_md2.new()\npycryptodomex_md4.new()\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_md4.new()\n"
                  },
                  "endColumn": 24,
                  "endLine": 30,
                  "startColumn": 1,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycryptodomex_md2.new()\npycryptodomex_md4.new()\npycryptodomex_md5.new()\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_md5.new()\n"
                  },
                  "endColumn": 24,
                  "endLine": 31,
                  "startColumn": 1,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycryptodomex_md4.new()\npycryptodomex_md5.new()\npycryptodomex_sha.new()\n"
                  },
                  "endLine": 32,
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_sha.new()\n"
                  },
                  "endColumn": 24,
                  "endLine": 32,
                  "startColumn": 1,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycryptodomex_md5.new()\npycryptodomex_sha.new()\n\n"
                  },
                  "endLine": 33,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashes.MD5()\n"
                  },
                  "endColumn": 13,
                  "endLine": 34,
                  "startColumn": 1,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashes.MD5()\nhashes.SHA1()\n"
                  },
                  "endLine": 35,
                  "startLine": 33
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashes.SHA1()\n"
                  },
                  "endColumn": 14,
                  "endLine": 35,
                  "startColumn": 1,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "hashes.MD5()\nhashes.SHA1()\n\n"
                  },
                  "endLine": 36,
                  "startLine": 34
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B303",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_CRYPT hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_CRYPT)\n"
                  },
                  "endColumn": 57,
                  "endLine": 37,
                  "startColumn": 1,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncrypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_CRYPT)\ncrypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_MD5)\n"
                  },
                  "endLine": 38,
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_MD5 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_MD5)\n"
                  },
                  "endColumn": 55,
                  "endLine": 38,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "crypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_CRYPT)\ncrypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_MD5)\ncrypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_BLOWFISH)\n"
                  },
                  "endLine": 39,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_BLOWFISH hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_BLOWFISH)\n"
                  },
                  "endColumn": 60,
                  "endLine": 39,
                  "startColumn": 1,
                  "startLine": 39
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "crypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_MD5)\ncrypt.crypt(\"asdfasdfasdfasdf\", salt=crypt.METHOD_BLOWFISH)\ncrypt.crypt(\"asdfasdfasdfasdf\")\n"
                  },
                  "endLine": 40,
                  "startLine": 38
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_CRYPT hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.mksalt(crypt.METHOD_CRYPT)\n"
                  },
                  "endColumn": 33,
                  "endLine": 44,
                  "startColumn": 1,
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncrypt.mksalt(crypt.METHOD_CRYPT)\ncrypt.mksalt(crypt.METHOD_MD5)\n"
                  },
                  "endLine": 45,
                  "startLine": 43
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_MD5 hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.mksalt(crypt.METHOD_MD5)\n"
                  },
                  "endColumn": 31,
                  "endLine": 45,
                  "startColumn": 1,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "crypt.mksalt(crypt.METHOD_CRYPT)\ncrypt.mksalt(crypt.METHOD_MD5)\ncrypt.mksalt(crypt.METHOD_BLOWFISH)\n"
                  },
                  "endLine": 46,
                  "startLine": 44
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of insecure crypt.METHOD_BLOWFISH hash function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypt.mksalt(crypt.METHOD_BLOWFISH)\n"
                  },
                  "endColumn": 36,
                  "endLine": 46,
                  "startColumn": 1,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "crypt.mksalt(crypt.METHOD_MD5)\ncrypt.mksalt(crypt.METHOD_BLOWFISH)\ncrypt.mksalt()\n"
                  },
                  "endLine": 47,
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Consider possible security implications associated with dill module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import dill\n"
                  },
                  "endColumn": 12,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/dill.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import dill\nimport io\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(dill.loads(pick))\n"
                  },
                  "endColumn": 23,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/dill.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pick = dill.dumps({'a': 'b', 'c': 'd'})\nprint(dill.loads(pick))\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(dill.load(file_obj))\n"
                  },
                  "endColumn": 26,
                  "endLine": 11,
                  "startColumn": 7,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/dill.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "file_obj.seek(0)\nprint(dill.load(file_obj))\n\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(dill.Unpickler(file_obj).load())\n"
                  },
                  "endColumn": 31,
                  "endLine": 14,
                  "startColumn": 7,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/dill.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "file_obj.seek(0)\nprint(dill.Unpickler(file_obj).load())\n"
                  },
                  "endLine": 14,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(dict(could_be='insecure'))\n"
                  },
                  "endColumn": 71,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nUser.objects.filter(username='admin').extra(dict(could_be='insecure'))\nUser.objects.filter(username='admin').extra(select=dict(could_be='insecure'))\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select=dict(could_be='insecure'))\n"
                  },
                  "endColumn": 78,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(dict(could_be='insecure'))\nUser.objects.filter(username='admin').extra(select=dict(could_be='insecure'))\nquery = '\"username\") AS \"username\", * FROM \"auth_user\" WHERE 1=1 OR \"username\"=? --'\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select={'test': query})\n"
                  },
                  "endColumn": 68,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = '\"username\") AS \"username\", * FROM \"auth_user\" WHERE 1=1 OR \"username\"=? --'\nUser.objects.filter(username='admin').extra(select={'test': query})\nUser.objects.filter(username='admin').extra(select={'test': '%secure' % 'nos'})\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select={'test': '%secure' % 'nos'})\n"
                  },
                  "endColumn": 80,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select={'test': query})\nUser.objects.filter(username='admin').extra(select={'test': '%secure' % 'nos'})\nUser.objects.filter(username='admin').extra(select={'test': '{}secure'.format('nos')})\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select={'test': '{}secure'.format('nos')})\n"
                  },
                  "endColumn": 87,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(select={'test': '%secure' % 'nos'})\nUser.objects.filter(username='admin').extra(select={'test': '{}secure'.format('nos')})\n\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=where_var)\n"
                  },
                  "endColumn": 61,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "where_var = ['1=1) OR 1=1 AND (1=1']\nUser.objects.filter(username='admin').extra(where=where_var)\nwhere_str = '1=1) OR 1=1 AND (1=1'\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=[where_str])\n"
                  },
                  "endColumn": 63,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "where_str = '1=1) OR 1=1 AND (1=1'\nUser.objects.filter(username='admin').extra(where=[where_str])\nUser.objects.filter(username='admin').extra(where=['%secure' % 'nos'])\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=['%secure' % 'nos'])\n"
                  },
                  "endColumn": 71,
                  "endLine": 23,
                  "startColumn": 1,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=[where_str])\nUser.objects.filter(username='admin').extra(where=['%secure' % 'nos'])\nUser.objects.filter(username='admin').extra(where=['{}secure'.format('no')])\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=['{}secure'.format('no')])\n"
                  },
                  "endColumn": 77,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.filter(username='admin').extra(where=['%secure' % 'nos'])\nUser.objects.filter(username='admin').extra(where=['{}secure'.format('no')])\n\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.all().extra(tables=tables_var).distinct()\n"
                  },
                  "endColumn": 44,
                  "endLine": 27,
                  "startColumn": 1,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "tables_var = ['django_content_type\" WHERE \"auth_user\".\"username\"=\"admin']\nUser.objects.all().extra(tables=tables_var).distinct()\ntables_str = 'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin'\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of extra potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.all().extra(tables=[tables_str]).distinct()\n"
                  },
                  "endColumn": 46,
                  "endLine": 29,
                  "startColumn": 1,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_extra.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "tables_str = 'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin'\nUser.objects.all().extra(tables=[tables_str]).distinct()\n"
                  },
                  "endLine": 29,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B610",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL('%secure' % 'nos', []))\n"
                  },
                  "endColumn": 56,
                  "endLine": 5,
                  "startColumn": 27,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL('secure', []))\nUser.objects.annotate(val=RawSQL('%secure' % 'nos', []))\nUser.objects.annotate(val=RawSQL('{}secure'.format('no'), []))\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL('{}secure'.format('no'), []))\n"
                  },
                  "endColumn": 62,
                  "endLine": 6,
                  "startColumn": 27,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL('%secure' % 'nos', []))\nUser.objects.annotate(val=RawSQL('{}secure'.format('no'), []))\nraw = '\"username\") AS \"val\" FROM \"auth_user\" WHERE \"username\"=\"admin\" --'\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(raw, []))\n"
                  },
                  "endColumn": 42,
                  "endLine": 8,
                  "startColumn": 27,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "raw = '\"username\") AS \"val\" FROM \"auth_user\" WHERE \"username\"=\"admin\" --'\nUser.objects.annotate(val=RawSQL(raw, []))\nraw = '\"username\") AS \"val\" FROM \"auth_user\"' \\\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(raw, [0]))\n"
                  },
                  "endColumn": 43,
                  "endLine": 11,
                  "startColumn": 27,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "      ' WHERE \"username\"=\"admin\" OR 1=%s --'\nUser.objects.annotate(val=RawSQL(raw, [0]))\nUser.objects.annotate(val=RawSQL(sql='{}secure'.format('no'), params=[]))\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(sql='{}secure'.format('no'), params=[]))\n"
                  },
                  "endColumn": 73,
                  "endLine": 12,
                  "startColumn": 27,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(raw, [0]))\nUser.objects.annotate(val=RawSQL(sql='{}secure'.format('no'), params=[]))\nUser.objects.annotate(val=RawSQL(params=[], sql='{}secure'.format('no')))\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of RawSQL potential SQL attack vector."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(params=[], sql='{}secure'.format('no')))\n"
                  },
                  "endColumn": 73,
                  "endLine": 13,
                  "startColumn": 27,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/django_sql_injection_raw.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "User.objects.annotate(val=RawSQL(sql='{}secure'.format('no'), params=[]))\nUser.objects.annotate(val=RawSQL(params=[], sql='{}secure'.format('no')))\n"
                  },
                  "endLine": 13,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B611",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Use of possibly insecure function - consider using safer ast.literal_eval."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(eval(\"1+1\"))\n"
                  },
                  "endColumn": 18,
                  "endLine": 3,
                  "startColumn": 7,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/eval.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(eval(\"1+1\"))\nprint(eval(\"os.getcwd()\"))\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B307",
          "ruleIndex": 12
        },
        {
          "message": {
            "text": "Use of possibly insecure function - consider using safer ast.literal_eval."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(eval(\"os.getcwd()\"))\n"
                  },
                  "endColumn": 26,
                  "endLine": 4,
                  "startColumn": 7,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/eval.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(eval(\"1+1\"))\nprint(eval(\"os.getcwd()\"))\nprint(eval(\"os.chmod('%s', 0777)\" % 'test.txt'))\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B307",
          "ruleIndex": 12
        },
        {
          "message": {
            "text": "Use of possibly insecure function - consider using safer ast.literal_eval."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(eval(\"os.chmod('%s', 0777)\" % 'test.txt'))\n"
                  },
                  "endColumn": 48,
                  "endLine": 5,
                  "startColumn": 7,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/eval.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(eval(\"os.getcwd()\"))\nprint(eval(\"os.chmod('%s', 0777)\" % 'test.txt'))\n\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B307",
          "ruleIndex": 12
        },
        {
          "message": {
            "text": "Use of exec detected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "exec(\"do evil\")\n"
                  },
                  "endColumn": 16,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "exec(\"do evil\")\n"
                  },
                  "endLine": 1,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B102",
          "ruleIndex": 13
        },
        {
          "message": {
            "text": "A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.run(debug=True)\n"
                  },
                  "endColumn": 20,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/flask_debug.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "#bad\napp.run(debug=True)\n\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B201",
          "ruleIndex": 14
        },
        {
          "message": {
            "text": "A FTP-related module is being imported.  FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from ftplib import FTP\n"
                  },
                  "endColumn": 23,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from ftplib import FTP\nfrom ftplib import FTP_TLS\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B402",
          "ruleIndex": 15
        },
        {
          "message": {
            "text": "A FTP-related module is being imported.  FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from ftplib import FTP_TLS\n"
                  },
                  "endColumn": 27,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from ftplib import FTP\nfrom ftplib import FTP_TLS\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B402",
          "ruleIndex": 15
        },
        {
          "message": {
            "text": "FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ftp = FTP('ftp.debian.org')\n"
                  },
                  "endColumn": 28,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad\nftp = FTP('ftp.debian.org')\nftp.login()\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B321",
          "ruleIndex": 16
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'class_password'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    password = \"class_password\"\n"
                  },
                  "endColumn": 32,
                  "endLine": 4,
                  "startColumn": 16,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "class SomeClass:\n    password = \"class_password\"\n\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'Admin'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def someFunction(user, password=\"Admin\"):\n"
                  },
                  "endColumn": 24,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\ndef someFunction(user, password=\"Admin\"):\n    print(\"Hi \" + user)\n\n"
                  },
                  "endLine": 10,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B107",
          "ruleIndex": 18
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'root'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    if password == \"root\":\n"
                  },
                  "endColumn": 26,
                  "endLine": 14,
                  "startColumn": 20,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Severity: Low   Confidence: Medium\n    if password == \"root\":\n        print(\"OK, logged in\")\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: ''"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    if password == '':\n"
                  },
                  "endColumn": 22,
                  "endLine": 20,
                  "startColumn": 20,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Severity: Low   Confidence: Medium\n    if password == '':\n        print(\"No password!\")\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'ajklawejrkl42348swfgkg'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    if password == \"ajklawejrkl42348swfgkg\":\n"
                  },
                  "endColumn": 44,
                  "endLine": 26,
                  "startColumn": 20,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Severity: Low   Confidence: Medium\n    if password == \"ajklawejrkl42348swfgkg\":\n        print(\"Nice password!\")\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'this cool password'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    if obj.password == \"this cool password\":\n"
                  },
                  "endColumn": 44,
                  "endLine": 33,
                  "startColumn": 24,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Severity: Low   Confidence: Medium\n    if obj.password == \"this cool password\":\n        print(obj.password)\n"
                  },
                  "endLine": 34,
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'blerg'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def doLogin(password=\"blerg\"):\n"
                  },
                  "endColumn": 9,
                  "endLine": 39,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\ndef doLogin(password=\"blerg\"):\n    pass\n\n"
                  },
                  "endLine": 40,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B107",
          "ruleIndex": 18
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'blerg'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "doLogin(password=\"blerg\")\n"
                  },
                  "endColumn": 26,
                  "endLine": 46,
                  "startColumn": 1,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\ndoLogin(password=\"blerg\")\n\n"
                  },
                  "endLine": 47,
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B106",
          "ruleIndex": 19
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'blerg'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "password = \"blerg\"\n"
                  },
                  "endColumn": 19,
                  "endLine": 50,
                  "startColumn": 12,
                  "startLine": 50
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\npassword = \"blerg\"\n\n"
                  },
                  "endLine": 51,
                  "startLine": 49
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'blerg'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "d[\"password\"] = \"blerg\"\n"
                  },
                  "endColumn": 13,
                  "endLine": 54,
                  "startColumn": 3,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\nd[\"password\"] = \"blerg\"\n\n"
                  },
                  "endLine": 55,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'secret'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "EMAIL_PASSWORD = \"secret\"\n"
                  },
                  "endColumn": 26,
                  "endLine": 58,
                  "startColumn": 18,
                  "startLine": 58
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\nEMAIL_PASSWORD = \"secret\"\n\n"
                  },
                  "endLine": 59,
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'emails_secret'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "email_pwd = 'emails_secret'\n"
                  },
                  "endColumn": 28,
                  "endLine": 62,
                  "startColumn": 13,
                  "startLine": 62
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\nemail_pwd = 'emails_secret'\n\n"
                  },
                  "endLine": 63,
                  "startLine": 61
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'd6s$f9g!j8mg7hw?n&2'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "my_secret_password_for_email = 'd6s$f9g!j8mg7hw?n&2'\n"
                  },
                  "endColumn": 53,
                  "endLine": 66,
                  "startColumn": 32,
                  "startLine": 66
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\nmy_secret_password_for_email = 'd6s$f9g!j8mg7hw?n&2'\n\n"
                  },
                  "endLine": 67,
                  "startLine": 65
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Possible hardcoded password: '1234'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "passphrase='1234'\n"
                  },
                  "endColumn": 18,
                  "endLine": 70,
                  "startColumn": 12,
                  "startLine": 70
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Severity: Low   Confidence: Medium\npassphrase='1234'\n"
                  },
                  "endLine": 70,
                  "startLine": 69
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B105",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "Probable insecure usage of temp file/directory."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "with open('/tmp/abc', 'w') as f:\n"
                  },
                  "endColumn": 21,
                  "endLine": 1,
                  "startColumn": 11,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-tmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "with open('/tmp/abc', 'w') as f:\n    f.write('def')\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B108",
          "ruleIndex": 20
        },
        {
          "message": {
            "text": "Probable insecure usage of temp file/directory."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "with open('/var/tmp/123', 'w') as f:\n"
                  },
                  "endColumn": 25,
                  "endLine": 8,
                  "startColumn": 11,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-tmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nwith open('/var/tmp/123', 'w') as f:\n    f.write('def')\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B108",
          "ruleIndex": 20
        },
        {
          "message": {
            "text": "Probable insecure usage of temp file/directory."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "with open('/dev/shm/unit/test', 'w') as f:\n"
                  },
                  "endColumn": 31,
                  "endLine": 11,
                  "startColumn": 11,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/hardcoded-tmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nwith open('/dev/shm/unit/test', 'w') as f:\n    f.write('def')\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B108",
          "ruleIndex": 20
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('md5')\n"
                  },
                  "endColumn": 19,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('md5')\n\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD4 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('md4', b'test')\n"
                  },
                  "endColumn": 28,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('md4', b'test')\n\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new(name='md5', data=b'test')\n"
                  },
                  "endColumn": 38,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new(name='md5', data=b'test')\n\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD4 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('MD4', data=b'test')\n"
                  },
                  "endColumn": 33,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('MD4', data=b'test')\n\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA1 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('sha1')\n"
                  },
                  "endColumn": 20,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('sha1')\n\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA1 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('sha1', data=b'test')\n"
                  },
                  "endColumn": 34,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('sha1', data=b'test')\n\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('sha', data=b'test')\n"
                  },
                  "endColumn": 33,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new('sha', data=b'test')\n\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new(name='SHA', data=b'test')\n"
                  },
                  "endColumn": 38,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nhashlib.new(name='SHA', data=b'test')\n\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak SHA1 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hashlib.new('sha1', usedforsecurity=True)\n"
                  },
                  "endColumn": 42,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# usedforsecurity arg only availabe in Python 3.9+\nhashlib.new('sha1', usedforsecurity=True)\n\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Consider possible security implications associated with wsgiref.handlers.CGIHandler module."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    wsgiref.handlers.CGIHandler().run(application)\n"
                  },
                  "endColumn": 34,
                  "endLine": 10,
                  "startColumn": 5,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/httpoxy_cgihandler.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "if __name__ == '__main__':\n    wsgiref.handlers.CGIHandler().run(application)\n"
                  },
                  "endLine": 10,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B412",
          "ruleIndex": 21
        },
        {
          "message": {
            "text": "Consider possible security implications associated with twisted.web.twcgi.CGIDirectory module."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "root.putChild(\"cgi-bin\", twcgi.CGIDirectory(\"/var/www/cgi-bin\"))\n"
                  },
                  "endColumn": 64,
                  "endLine": 5,
                  "startColumn": 26,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/httpoxy_twisted_directory.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "root = static.File(\"/root\")\nroot.putChild(\"cgi-bin\", twcgi.CGIDirectory(\"/var/www/cgi-bin\"))\nreactor.listenTCP(80, server.Site(root))\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B412",
          "ruleIndex": 21
        },
        {
          "message": {
            "text": "Consider possible security implications associated with twisted.web.twcgi.CGIScript module."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "root.putChild(\"login.cgi\", twcgi.CGIScript(\"/var/www/cgi-bin/login.py\"))\n"
                  },
                  "endColumn": 72,
                  "endLine": 5,
                  "startColumn": 28,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/httpoxy_twisted_script.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "root = static.File(\"/root\")\nroot.putChild(\"login.cgi\", twcgi.CGIScript(\"/var/www/cgi-bin/login.py\"))\nreactor.listenTCP(80, server.Site(root))\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B412",
          "ruleIndex": 21
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from subprocess import Popen as pop\n"
                  },
                  "endColumn": 36,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from subprocess import Popen as pop\nimport hashlib as h\nimport hashlib as hh\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with loads module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from pickle import loads as lp\n"
                  },
                  "endColumn": 31,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import hashlib as hhhh\nfrom pickle import loads as lp\nimport pickle as p\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import pickle as p\n"
                  },
                  "endColumn": 19,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from pickle import loads as lp\nimport pickle as p\n\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('/bin/gcc --version', shell=True)\n"
                  },
                  "endColumn": 38,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('/bin/gcc --version', shell=True)\n\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "h.md5('1')\n"
                  },
                  "endColumn": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nh.md5('1')\nhh.md5('2')\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hh.md5('2')\n"
                  },
                  "endColumn": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "h.md5('1')\nhh.md5('2')\nhhh.md5('3').hexdigest()\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hhh.md5('3').hexdigest()\n"
                  },
                  "endColumn": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "hh.md5('2')\nhhh.md5('3').hexdigest()\nhhhh.md5('4')\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Use of weak MD5 hash for security. Consider usedforsecurity=False"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "hhhh.md5('4')\n"
                  },
                  "endColumn": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "hhh.md5('3').hexdigest()\nhhhh.md5('4')\nlp({'key': 'value'})\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B324",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "lp({'key': 'value'})\n"
                  },
                  "endColumn": 21,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "hhhh.md5('4')\nlp({'key': 'value'})\n"
                  },
                  "endLine": 15,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from subprocess import Popen\n"
                  },
                  "endColumn": 29,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/imports-from.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from subprocess import Popen\n\nfrom ..foo import sys\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from .. import subprocess\n"
                  },
                  "endColumn": 26,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/imports-from.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from .. import sys\nfrom .. import subprocess\nfrom ..subprocess import Popen\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from ..subprocess import Popen\n"
                  },
                  "endColumn": 31,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/imports-from.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from .. import subprocess\nfrom ..subprocess import Popen\n"
                  },
                  "endLine": 7,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pickle = __import__(\"pickle\")\n"
                  },
                  "endColumn": 30,
                  "endLine": 2,
                  "startColumn": 10,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/imports-function.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os = __import__(\"os\")\npickle = __import__(\"pickle\")\nsys = __import__(\"sys\")\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess = __import__(\"subprocess\")\n"
                  },
                  "endColumn": 38,
                  "endLine": 4,
                  "startColumn": 14,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/imports-function.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "sys = __import__(\"sys\")\nsubprocess = __import__(\"subprocess\")\n\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "b = importlib.import_module('pickle')\n"
                  },
                  "endColumn": 38,
                  "endLine": 3,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/imports-with-importlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "a = importlib.import_module('os')\nb = importlib.import_module('pickle')\nc = importlib.__import__('sys')\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "d = importlib.__import__('subprocess')\n"
                  },
                  "endColumn": 39,
                  "endLine": 5,
                  "startColumn": 5,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/imports-with-importlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "c = importlib.__import__('sys')\nd = importlib.__import__('subprocess')\n\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "h = importlib.__import__(name='subprocess')\n"
                  },
                  "endColumn": 44,
                  "endLine": 13,
                  "startColumn": 5,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/imports-with-importlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "g = importlib.import_module(name='sys')\nh = importlib.__import__(name='subprocess')\ni = importlib.import_module(name='subprocess', package='bar.baz')\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "i = importlib.import_module(name='subprocess', package='bar.baz')\n"
                  },
                  "endColumn": 66,
                  "endLine": 14,
                  "startColumn": 5,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/imports-with-importlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "h = importlib.__import__(name='subprocess')\ni = importlib.import_module(name='subprocess', package='bar.baz')\nj = importlib.__import__(name='sys', package='bar.baz')\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import pickle\n"
                  },
                  "endColumn": 14,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/imports.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import os\nimport pickle\nimport sys\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import subprocess\n"
                  },
                  "endColumn": 18,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/imports.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import sys\nimport subprocess\n"
                  },
                  "endLine": 4,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Using jinja2 templates with autoescape=False is dangerous and can lead to XSS. Ensure autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Environment(loader=templateLoader, load=templateLoader, autoescape=something)\n"
                  },
                  "endColumn": 78,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        loader=templateLoader )\nEnvironment(loader=templateLoader, load=templateLoader, autoescape=something)\ntemplateEnv = jinja2.Environment(autoescape=False, loader=templateLoader )\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B701",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "Using jinja2 templates with autoescape=False is dangerous and can lead to XSS. Use autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "templateEnv = jinja2.Environment(autoescape=False, loader=templateLoader )\n"
                  },
                  "endColumn": 75,
                  "endLine": 10,
                  "startColumn": 15,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "Environment(loader=templateLoader, load=templateLoader, autoescape=something)\ntemplateEnv = jinja2.Environment(autoescape=False, loader=templateLoader )\nEnvironment(loader=templateLoader,\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B701",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "Using jinja2 templates with autoescape=False is dangerous and can lead to XSS. Use autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Environment(loader=templateLoader,\n"
                  },
                  "endColumn": 30,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "templateEnv = jinja2.Environment(autoescape=False, loader=templateLoader )\nEnvironment(loader=templateLoader,\n            load=templateLoader,\n            autoescape=False)\n\n"
                  },
                  "endLine": 14,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B701",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "By default, jinja2 sets autoescape to False. Consider using autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Environment(loader=templateLoader,\n"
                  },
                  "endColumn": 33,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nEnvironment(loader=templateLoader,\n            load=templateLoader)\n\n"
                  },
                  "endLine": 17,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B701",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "Using jinja2 templates with autoescape=False is dangerous and can lead to XSS. Ensure autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Environment(loader=templateLoader, autoescape=fake_func())\n"
                  },
                  "endColumn": 59,
                  "endLine": 29,
                  "startColumn": 1,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    return 'foobar'\nEnvironment(loader=templateLoader, autoescape=fake_func())\n"
                  },
                  "endLine": 29,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B701",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(jsonpickle.decode(pick))\n"
                  },
                  "endColumn": 30,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/jsonpickle.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(jsonpickle.decode(pick))\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(jsonpickle.unpickler.decode(pick))\n"
                  },
                  "endColumn": 40,
                  "endLine": 8,
                  "startColumn": 7,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/jsonpickle.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(jsonpickle.unpickler.decode(pick))\n\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(jsonpickle.unpickler.Unpickler().restore(pick))\n"
                  },
                  "endColumn": 39,
                  "endLine": 10,
                  "startColumn": 7,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/jsonpickle.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(jsonpickle.unpickler.Unpickler().restore(pick))\n"
                  },
                  "endLine": 10,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Use of insecure logging.config.listen detected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "t = logging.config.listen(9999)\n"
                  },
                  "endColumn": 32,
                  "endLine": 3,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/logging_config_insecure_listen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nt = logging.config.listen(9999)\n"
                  },
                  "endLine": 3,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B612",
          "ruleIndex": 25
        },
        {
          "message": {
            "text": "Mako templates allow HTML/JS rendering by default and are inherently open to XSS attacks. Ensure variables in all templates are properly sanitized via the 'n', 'h' or 'x' flags (depending on context). For example, to HTML escape the variable 'data' do ${ data |h }."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Template(\"hello\")\n"
                  },
                  "endColumn": 18,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/mako_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nTemplate(\"hello\")\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B702",
          "ruleIndex": 26
        },
        {
          "message": {
            "text": "Mako templates allow HTML/JS rendering by default and are inherently open to XSS attacks. Ensure variables in all templates are properly sanitized via the 'n', 'h' or 'x' flags (depending on context). For example, to HTML escape the variable 'data' do ${ data |h }."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "mako.template.Template(\"hern\")\n"
                  },
                  "endColumn": 31,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/mako_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# in for now so that if it gets fixed inadvertitently we know.\nmako.template.Template(\"hern\")\ntemplate.Template(\"hern\")\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B702",
          "ruleIndex": 26
        },
        {
          "message": {
            "text": "Mako templates allow HTML/JS rendering by default and are inherently open to XSS attacks. Ensure variables in all templates are properly sanitized via the 'n', 'h' or 'x' flags (depending on context). For example, to HTML escape the variable 'data' do ${ data |h }."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "template.Template(\"hern\")\n"
                  },
                  "endColumn": 26,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/mako_templating.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "mako.template.Template(\"hern\")\ntemplate.Template(\"hern\")\n"
                  },
                  "endLine": 11,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B702",
          "ruleIndex": 26
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "mystr = safestring.mark_safe(mystr)\n"
                  },
                  "endColumn": 36,
                  "endLine": 4,
                  "startColumn": 9,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "mystr = '<b>Hello World</b>'\nmystr = safestring.mark_safe(mystr)\n"
                  },
                  "endLine": 4,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 38,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "my_insecure_str = insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\nsafestring.mark_safe(my_insecure_str)\nsafestring.SafeText(my_insecure_str)\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 38,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "my_insecure_str = insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\nsafestring.mark_safe(my_insecure_str)\nsafestring.SafeText(my_insecure_str)\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.SafeText(my_insecure_str)\n"
                  },
                  "endColumn": 37,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "safestring.mark_safe(my_insecure_str)\nsafestring.SafeText(my_insecure_str)\nsafestring.SafeUnicode(my_insecure_str)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.SafeUnicode(my_insecure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "safestring.SafeText(my_insecure_str)\nsafestring.SafeUnicode(my_insecure_str)\nsafestring.SafeString(my_insecure_str)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.SafeString(my_insecure_str)\n"
                  },
                  "endColumn": 39,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "safestring.SafeUnicode(my_insecure_str)\nsafestring.SafeString(my_insecure_str)\nsafestring.SafeBytes(my_insecure_str)\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.SafeBytes(my_insecure_str)\n"
                  },
                  "endColumn": 38,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "safestring.SafeString(my_insecure_str)\nsafestring.SafeBytes(my_insecure_str)\n\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = 'Secure'\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = 'Secure'\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 30,
                  "startColumn": 5,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 30,
                  "startColumn": 5,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 41,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 42,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 41,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 42,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 54,
                  "startColumn": 5,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 55,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_insecure_str)\n"
                  },
                  "endColumn": 42,
                  "endLine": 54,
                  "startColumn": 5,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe(my_insecure_str)\n\n"
                  },
                  "endLine": 55,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{} {}</b>'.format(my_insecure_str, 'STR'))\n"
                  },
                  "endColumn": 72,
                  "endLine": 59,
                  "startColumn": 5,
                  "startLine": 59
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{} {}</b>'.format(my_insecure_str, 'STR'))\n\n"
                  },
                  "endLine": 60,
                  "startLine": 58
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{} {}</b>'.format(my_insecure_str, 'STR'))\n"
                  },
                  "endColumn": 72,
                  "endLine": 59,
                  "startColumn": 5,
                  "startLine": 59
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{} {}</b>'.format(my_insecure_str, 'STR'))\n\n"
                  },
                  "endLine": 60,
                  "startLine": 58
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{}</b>'.format(*[my_insecure_str]))\n"
                  },
                  "endColumn": 65,
                  "endLine": 64,
                  "startColumn": 5,
                  "startLine": 64
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{}</b>'.format(*[my_insecure_str]))\n\n"
                  },
                  "endLine": 65,
                  "startLine": 63
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{}</b>'.format(*[my_insecure_str]))\n"
                  },
                  "endColumn": 65,
                  "endLine": 64,
                  "startColumn": 5,
                  "startLine": 64
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{}</b>'.format(*[my_insecure_str]))\n\n"
                  },
                  "endLine": 65,
                  "startLine": 63
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{b}</b>'.format(b=my_insecure_str))\n"
                  },
                  "endColumn": 65,
                  "endLine": 69,
                  "startColumn": 5,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{b}</b>'.format(b=my_insecure_str))\n\n"
                  },
                  "endLine": 70,
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{b}</b>'.format(b=my_insecure_str))\n"
                  },
                  "endColumn": 65,
                  "endLine": 69,
                  "startColumn": 5,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{b}</b>'.format(b=my_insecure_str))\n\n"
                  },
                  "endLine": 70,
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{b}</b>'.format(**{'b': my_insecure_str}))\n"
                  },
                  "endColumn": 72,
                  "endLine": 74,
                  "startColumn": 5,
                  "startLine": 74
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{b}</b>'.format(**{'b': my_insecure_str}))\n\n"
                  },
                  "endLine": 75,
                  "startLine": 73
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{b}</b>'.format(**{'b': my_insecure_str}))\n"
                  },
                  "endColumn": 72,
                  "endLine": 74,
                  "startColumn": 5,
                  "startLine": 74
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>{b}</b>'.format(**{'b': my_insecure_str}))\n\n"
                  },
                  "endLine": 75,
                  "startLine": 73
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s</b>' % my_insecure_str)\n"
                  },
                  "endColumn": 56,
                  "endLine": 79,
                  "startColumn": 5,
                  "startLine": 79
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%s</b>' % my_insecure_str)\n\n"
                  },
                  "endLine": 80,
                  "startLine": 78
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s</b>' % my_insecure_str)\n"
                  },
                  "endColumn": 56,
                  "endLine": 79,
                  "startColumn": 5,
                  "startLine": 79
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%s</b>' % my_insecure_str)\n\n"
                  },
                  "endLine": 80,
                  "startLine": 78
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s %s</b>' % (my_insecure_str, 'b'))\n"
                  },
                  "endColumn": 66,
                  "endLine": 84,
                  "startColumn": 5,
                  "startLine": 84
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%s %s</b>' % (my_insecure_str, 'b'))\n\n"
                  },
                  "endLine": 85,
                  "startLine": 83
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s %s</b>' % (my_insecure_str, 'b'))\n"
                  },
                  "endColumn": 66,
                  "endLine": 84,
                  "startColumn": 5,
                  "startLine": 84
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%s %s</b>' % (my_insecure_str, 'b'))\n\n"
                  },
                  "endLine": 85,
                  "startLine": 83
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%(b)s</b>' % {'b': my_insecure_str})\n"
                  },
                  "endColumn": 66,
                  "endLine": 89,
                  "startColumn": 5,
                  "startLine": 89
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%(b)s</b>' % {'b': my_insecure_str})\n\n"
                  },
                  "endLine": 90,
                  "startLine": 88
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%(b)s</b>' % {'b': my_insecure_str})\n"
                  },
                  "endColumn": 66,
                  "endLine": 89,
                  "startColumn": 5,
                  "startLine": 89
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_insecure_str = insecure_function('insecure', cls=cls)\n    safestring.mark_safe('<b>%(b)s</b>' % {'b': my_insecure_str})\n\n"
                  },
                  "endLine": 90,
                  "startLine": 88
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(sre_constants.ANY)\n"
                  },
                  "endColumn": 44,
                  "endLine": 94,
                  "startColumn": 5,
                  "startLine": 94
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    import sre_constants\n    safestring.mark_safe(sre_constants.ANY)\n\n"
                  },
                  "endLine": 95,
                  "startLine": 93
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(sre_constants.ANY)\n"
                  },
                  "endColumn": 44,
                  "endLine": 94,
                  "startColumn": 5,
                  "startLine": 94
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    import sre_constants\n    safestring.mark_safe(sre_constants.ANY)\n\n"
                  },
                  "endLine": 95,
                  "startLine": 93
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(any_str)\n"
                  },
                  "endColumn": 34,
                  "endLine": 99,
                  "startColumn": 5,
                  "startLine": 99
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    import sre_constants.ANY as any_str\n    safestring.mark_safe(any_str)\n\n"
                  },
                  "endLine": 100,
                  "startLine": 98
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(any_str)\n"
                  },
                  "endColumn": 34,
                  "endLine": 99,
                  "startColumn": 5,
                  "startLine": 99
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    import sre_constants.ANY as any_str\n    safestring.mark_safe(any_str)\n\n"
                  },
                  "endLine": 100,
                  "startLine": 98
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(ANY)\n"
                  },
                  "endColumn": 30,
                  "endLine": 104,
                  "startColumn": 5,
                  "startLine": 104
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    from sre_constants import ANY\n    safestring.mark_safe(ANY)\n\n"
                  },
                  "endLine": 105,
                  "startLine": 103
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(ANY)\n"
                  },
                  "endColumn": 30,
                  "endLine": 104,
                  "startColumn": 5,
                  "startLine": 104
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    from sre_constants import ANY\n    safestring.mark_safe(ANY)\n\n"
                  },
                  "endLine": 105,
                  "startLine": 103
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(any_str)\n"
                  },
                  "endColumn": 34,
                  "endLine": 109,
                  "startColumn": 5,
                  "startLine": 109
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    from sre_constants import ANY as any_str\n    safestring.mark_safe(any_str)\n\n"
                  },
                  "endLine": 110,
                  "startLine": 108
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(any_str)\n"
                  },
                  "endColumn": 34,
                  "endLine": 109,
                  "startColumn": 5,
                  "startLine": 109
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    from sre_constants import ANY as any_str\n    safestring.mark_safe(any_str)\n\n"
                  },
                  "endLine": 110,
                  "startLine": 108
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        safestring.mark_safe(f.read())\n"
                  },
                  "endColumn": 39,
                  "endLine": 114,
                  "startColumn": 9,
                  "startLine": 114
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    with open(path) as f:\n        safestring.mark_safe(f.read())\n\n"
                  },
                  "endLine": 115,
                  "startLine": 113
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        safestring.mark_safe(f.read())\n"
                  },
                  "endColumn": 39,
                  "endLine": 114,
                  "startColumn": 9,
                  "startLine": 114
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    with open(path) as f:\n        safestring.mark_safe(f.read())\n\n"
                  },
                  "endLine": 115,
                  "startLine": 113
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        safestring.mark_safe(f)\n"
                  },
                  "endColumn": 32,
                  "endLine": 119,
                  "startColumn": 9,
                  "startLine": 119
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    with open(path) as f:\n        safestring.mark_safe(f)\n\n"
                  },
                  "endLine": 120,
                  "startLine": 118
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        safestring.mark_safe(f)\n"
                  },
                  "endColumn": 32,
                  "endLine": 119,
                  "startColumn": 9,
                  "startLine": 119
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    with open(path) as f:\n        safestring.mark_safe(f)\n\n"
                  },
                  "endLine": 120,
                  "startLine": 118
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 126,
                  "startColumn": 5,
                  "startLine": 126
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 127,
                  "startLine": 125
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 126,
                  "startColumn": 5,
                  "startLine": 126
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 127,
                  "startLine": 125
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 133,
                  "startColumn": 5,
                  "startLine": 133
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 134,
                  "startLine": 132
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 133,
                  "startColumn": 5,
                  "startLine": 133
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += insecure_function('insecure', cls='\" onload=\"alert(\\'xss\\')')\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 134,
                  "startLine": 132
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 143,
                  "startColumn": 5,
                  "startLine": 143
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str = 'Secure'\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 144,
                  "startLine": 142
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 143,
                  "startColumn": 5,
                  "startLine": 143
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str = 'Secure'\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 144,
                  "startLine": 142
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(mystr)\n"
                  },
                  "endColumn": 32,
                  "endLine": 149,
                  "startColumn": 5,
                  "startLine": 149
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def test_insecure_shadow():  # var assigned out of scope\n    safestring.mark_safe(mystr)\n\n"
                  },
                  "endLine": 150,
                  "startLine": 148
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(mystr)\n"
                  },
                  "endColumn": 32,
                  "endLine": 149,
                  "startColumn": 5,
                  "startLine": 149
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def test_insecure_shadow():  # var assigned out of scope\n    safestring.mark_safe(mystr)\n\n"
                  },
                  "endLine": 150,
                  "startLine": 148
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(str_arg)\n"
                  },
                  "endColumn": 34,
                  "endLine": 153,
                  "startColumn": 5,
                  "startLine": 153
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def test_insecure(str_arg):\n    safestring.mark_safe(str_arg)\n\n"
                  },
                  "endLine": 154,
                  "startLine": 152
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(str_arg)\n"
                  },
                  "endColumn": 34,
                  "endLine": 153,
                  "startColumn": 5,
                  "startLine": 153
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def test_insecure(str_arg):\n    safestring.mark_safe(str_arg)\n\n"
                  },
                  "endLine": 154,
                  "startLine": 152
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(str_arg)\n"
                  },
                  "endColumn": 34,
                  "endLine": 159,
                  "startColumn": 5,
                  "startLine": 159
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        str_arg = 'could be insecure'\n    safestring.mark_safe(str_arg)\n\n"
                  },
                  "endLine": 160,
                  "startLine": 158
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(str_arg)\n"
                  },
                  "endColumn": 34,
                  "endLine": 159,
                  "startColumn": 5,
                  "startLine": 159
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        str_arg = 'could be insecure'\n    safestring.mark_safe(str_arg)\n\n"
                  },
                  "endLine": 160,
                  "startLine": 158
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Potential XSS on mark_safe function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<a href=\"{0}\">{1}</a>'.format(url, text))\n"
                  },
                  "endColumn": 68,
                  "endLine": 167,
                  "startColumn": 5,
                  "startLine": 167
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    text, url = choice(HTML_CHOICES)\n    safestring.mark_safe('<a href=\"{0}\">{1}</a>'.format(url, text))\n"
                  },
                  "endLine": 167,
                  "startLine": 166
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B703",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<a href=\"{0}\">{1}</a>'.format(url, text))\n"
                  },
                  "endColumn": 68,
                  "endLine": 167,
                  "startColumn": 5,
                  "startLine": 167
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_insecure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    text, url = choice(HTML_CHOICES)\n    safestring.mark_safe('<a href=\"{0}\">{1}</a>'.format(url, text))\n"
                  },
                  "endLine": 167,
                  "startLine": 166
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe('<b>secure</b>')\n"
                  },
                  "endColumn": 38,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsafestring.mark_safe('<b>secure</b>')\nsafestring.SafeText('<b>secure</b>')\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 36,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "my_secure_str = '<b>Hello World</b>'\nsafestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 36,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "my_secure_str, _ = ('<b>Hello World</b>', '')\nsafestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "safestring.mark_safe(also_secure_str)\n"
                  },
                  "endColumn": 38,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "also_secure_str = my_secure_str\nsafestring.mark_safe(also_secure_str)\n\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 29,
                  "startColumn": 5,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str = 'Secure'\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{}</b>'.format('secure'))\n"
                  },
                  "endColumn": 55,
                  "endLine": 33,
                  "startColumn": 5,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def format_secure():\n    safestring.mark_safe('<b>{}</b>'.format('secure'))\n    my_secure_str = 'secure'\n"
                  },
                  "endLine": 34,
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{}</b>'.format(my_secure_str))\n"
                  },
                  "endColumn": 60,
                  "endLine": 35,
                  "startColumn": 5,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_secure_str = 'secure'\n    safestring.mark_safe('<b>{}</b>'.format(my_secure_str))\n    safestring.mark_safe('<b>{} {}</b>'.format(my_secure_str, 'a'))\n"
                  },
                  "endLine": 36,
                  "startLine": 34
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{} {}</b>'.format(my_secure_str, 'a'))\n"
                  },
                  "endColumn": 68,
                  "endLine": 36,
                  "startColumn": 5,
                  "startLine": 36
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{}</b>'.format(my_secure_str))\n    safestring.mark_safe('<b>{} {}</b>'.format(my_secure_str, 'a'))\n    safestring.mark_safe('<b>{} {}</b>'.format(*[my_secure_str, 'a']))\n"
                  },
                  "endLine": 37,
                  "startLine": 35
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{} {}</b>'.format(*[my_secure_str, 'a']))\n"
                  },
                  "endColumn": 71,
                  "endLine": 37,
                  "startColumn": 5,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>{} {}</b>'.format(my_secure_str, 'a'))\n    safestring.mark_safe('<b>{} {}</b>'.format(*[my_secure_str, 'a']))\n    safestring.mark_safe('<b>{b}</b>'.format(b=my_secure_str))  # nosec TODO\n"
                  },
                  "endLine": 38,
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 41,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_secure_str = '<b>{}</b>'.format(my_secure_str)\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 42,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s</b>' % 'secure')\n"
                  },
                  "endColumn": 49,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "def percent_secure():\n    safestring.mark_safe('<b>%s</b>' % 'secure')\n    my_secure_str = 'secure'\n"
                  },
                  "endLine": 46,
                  "startLine": 44
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s</b>' % my_secure_str)\n"
                  },
                  "endColumn": 54,
                  "endLine": 47,
                  "startColumn": 5,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    my_secure_str = 'secure'\n    safestring.mark_safe('<b>%s</b>' % my_secure_str)\n    safestring.mark_safe('<b>%s %s</b>' % (my_secure_str, 'a'))\n"
                  },
                  "endLine": 48,
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s %s</b>' % (my_secure_str, 'a'))\n"
                  },
                  "endColumn": 64,
                  "endLine": 48,
                  "startColumn": 5,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    safestring.mark_safe('<b>%s</b>' % my_secure_str)\n    safestring.mark_safe('<b>%s %s</b>' % (my_secure_str, 'a'))\n    safestring.mark_safe('<b>%(b)s</b>' % {'b': my_secure_str})  # nosec TODO\n"
                  },
                  "endLine": 49,
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        safestring.mark_safe('Secure')\n"
                  },
                  "endColumn": 39,
                  "endLine": 54,
                  "startColumn": 9,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    with open(path) as f:\n        safestring.mark_safe('Secure')\n\n"
                  },
                  "endLine": 55,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 62,
                  "startColumn": 5,
                  "startLine": 62
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += ' Secure'\n    safestring.mark_safe(my_secure_str)\n    while ord(os.urandom(1)) % 2 == 0:\n"
                  },
                  "endLine": 63,
                  "startLine": 61
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 65,
                  "startColumn": 5,
                  "startLine": 65
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str += ' Secure'\n    safestring.mark_safe(my_secure_str)\n\n"
                  },
                  "endLine": 66,
                  "startLine": 64
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endColumn": 40,
                  "endLine": 75,
                  "startColumn": 5,
                  "startLine": 75
                },
                "artifactLocation": {
                  "uri": "examples/mark_safe_secure.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        my_secure_str = 'Secure'\n    safestring.mark_safe(my_secure_str)\n"
                  },
                  "endLine": 75,
                  "startLine": 74
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B308",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Deserialization with the marshal module is possibly dangerous."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(marshal.loads(serialized))\n"
                  },
                  "endColumn": 32,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/marshal_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "serialized = marshal.dumps({'a': 1})\nprint(marshal.loads(serialized))\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B302",
          "ruleIndex": 29
        },
        {
          "message": {
            "text": "Deserialization with the marshal module is possibly dangerous."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(marshal.load(file_obj))\n"
                  },
                  "endColumn": 29,
                  "endLine": 11,
                  "startColumn": 7,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/marshal_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "file_obj.seek(0)\nprint(marshal.load(file_obj))\nfile_obj.close()\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B302",
          "ruleIndex": 29
        },
        {
          "message": {
            "text": "Use of insecure and deprecated function (mktemp)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "mktemp(foo)\n"
                  },
                  "endColumn": 12,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nmktemp(foo)\ntempfile.mktemp('foo')\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B306",
          "ruleIndex": 30
        },
        {
          "message": {
            "text": "Use of insecure and deprecated function (mktemp)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tempfile.mktemp('foo')\n"
                  },
                  "endColumn": 23,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "mktemp(foo)\ntempfile.mktemp('foo')\nmt(foo)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B306",
          "ruleIndex": 30
        },
        {
          "message": {
            "text": "Use of insecure and deprecated function (mktemp)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "mt(foo)\n"
                  },
                  "endColumn": 8,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "tempfile.mktemp('foo')\nmt(foo)\ntmp.mktemp(foo)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B306",
          "ruleIndex": 30
        },
        {
          "message": {
            "text": "Use of insecure and deprecated function (mktemp)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tmp.mktemp(foo)\n"
                  },
                  "endColumn": 16,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "mt(foo)\ntmp.mktemp(foo)\n"
                  },
                  "endLine": 10,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B306",
          "ruleIndex": 30
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import subprocess\n"
                  },
                  "endColumn": 18,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/multiline_statement.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import subprocess\n\nsubprocess.check_output(\"/some_command\",\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    \"/some_command\",\n"
                  },
                  "endColumn": 49,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/multiline_statement.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                        \"args\",\n                        shell=True,\n                        universal_newlines=True)\n\nsubprocess.check_output(\n    \"/some_command\",\n"
                  },
                  "endLine": 9,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    universal_newlines=True\n"
                  },
                  "endColumn": 2,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/multiline_statement.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    \"args\",\n    shell=True,\n    universal_newlines=True\n)\n"
                  },
                  "endLine": 13,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    subprocess.Popen('/bin/ls *', shell=True)\n"
                  },
                  "endColumn": 46,
                  "endLine": 7,
                  "startColumn": 5,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/new_candidates-all.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # candidate #1\n    subprocess.Popen('/bin/ls *', shell=True)\n    # candidate #2\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load()."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    y = yaml.load(temp_str)\n"
                  },
                  "endColumn": 28,
                  "endLine": 15,
                  "startColumn": 9,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/new_candidates-all.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # candidate #3\n    y = yaml.load(temp_str)\n    # candidate #4\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B506",
          "ruleIndex": 31
        },
        {
          "message": {
            "text": "Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    xml.sax.make_parser()\n"
                  },
                  "endColumn": 26,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/new_candidates-all.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # candidate #5\n    xml.sax.make_parser()\n    # candidate #6\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    subprocess.Popen('/bin/ls *', shell=True)\n"
                  },
                  "endColumn": 46,
                  "endLine": 7,
                  "startColumn": 5,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/new_candidates-some.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # candidate #1\n    subprocess.Popen('/bin/ls *', shell=True)\n    # candidate #2\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.AutoAddPolicy)\n"
                  },
                  "endColumn": 61,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client = client.SSHClient()\nssh_client.set_missing_host_key_policy(client.AutoAddPolicy)\nssh_client.set_missing_host_key_policy(client.WarningPolicy)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.WarningPolicy)\n"
                  },
                  "endColumn": 61,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.AutoAddPolicy)\nssh_client.set_missing_host_key_policy(client.WarningPolicy)\nssh_client.set_missing_host_key_policy(client.AutoAddPolicy())\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.AutoAddPolicy())\n"
                  },
                  "endColumn": 63,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.WarningPolicy)\nssh_client.set_missing_host_key_policy(client.AutoAddPolicy())\nssh_client.set_missing_host_key_policy(client.WarningPolicy())\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.WarningPolicy())\n"
                  },
                  "endColumn": 63,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(client.AutoAddPolicy())\nssh_client.set_missing_host_key_policy(client.WarningPolicy())\n\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(AutoAddPolicy)\n"
                  },
                  "endColumn": 54,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nssh_client.set_missing_host_key_policy(AutoAddPolicy)\nssh_client.set_missing_host_key_policy(WarningPolicy)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(WarningPolicy)\n"
                  },
                  "endColumn": 54,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(AutoAddPolicy)\nssh_client.set_missing_host_key_policy(WarningPolicy)\nssh_client.set_missing_host_key_policy(AutoAddPolicy())\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(AutoAddPolicy())\n"
                  },
                  "endColumn": 56,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(WarningPolicy)\nssh_client.set_missing_host_key_policy(AutoAddPolicy())\nssh_client.set_missing_host_key_policy(WarningPolicy())\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Paramiko call with policy set to automatically trust the unknown host key."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(WarningPolicy())\n"
                  },
                  "endColumn": 56,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssh_client.set_missing_host_key_policy(AutoAddPolicy())\nssh_client.set_missing_host_key_policy(WarningPolicy())\n"
                  },
                  "endLine": 14,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B507",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Starting a process with a partial executable path"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('#nosec', shell=True)\n"
                  },
                  "endColumn": 39,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/nosec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                 shell=True)  #nosec (on the specific kwarg line)\nsubprocess.Popen('#nosec', shell=True)\nsubprocess.Popen('/bin/ls *', shell=True) # type: ... # nosec # noqa: E501 ; pylint: disable=line-too-long\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B607",
          "ruleIndex": 34
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('#nosec', shell=True)\n"
                  },
                  "endColumn": 39,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/nosec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                 shell=True)  #nosec (on the specific kwarg line)\nsubprocess.Popen('#nosec', shell=True)\nsubprocess.Popen('/bin/ls *', shell=True) # type: ... # nosec # noqa: E501 ; pylint: disable=line-too-long\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls *', shell=True) # type: ... # nosec B607 # noqa: E501 ; pylint: disable=line-too-long\n"
                  },
                  "endColumn": 42,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/nosec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls *', shell=True) # type: ... # nosec # noqa: E501 ; pylint: disable=line-too-long\nsubprocess.Popen('/bin/ls *', shell=True) # type: ... # nosec B607 # noqa: E501 ; pylint: disable=line-too-long\nsubprocess.Popen('/bin/ls *', shell=True)  #nosec subprocess_popen_with_shell_equals_true (on the line)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('#nosec', shell=True) # nosec B607, B101\n"
                  },
                  "endColumn": 39,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/nosec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls *', shell=True) # type: ... # noqa: E501 ; pylint: disable=line-too-long # nosec\nsubprocess.Popen('#nosec', shell=True) # nosec B607, B101\nsubprocess.Popen('#nosec', shell=True) # nosec B602, subprocess_popen_with_shell_equals_true\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "Starting a process with a partial executable path"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('#nosec', shell=True) # nosec B602, subprocess_popen_with_shell_equals_true\n"
                  },
                  "endColumn": 39,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/nosec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('#nosec', shell=True) # nosec B607, B101\nsubprocess.Popen('#nosec', shell=True) # nosec B602, subprocess_popen_with_shell_equals_true\n"
                  },
                  "endLine": 18,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B607",
          "ruleIndex": 34
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o227 on file (/etc/passwd)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o227)\n"
                  },
                  "endColumn": 31,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.chmod('/etc/passwd', 0o227)\nos.chmod('/etc/passwd', 0o7)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o7 on file (/etc/passwd)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o7)\n"
                  },
                  "endColumn": 29,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o227)\nos.chmod('/etc/passwd', 0o7)\nos.chmod('/etc/passwd', 0o664)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o664 on file (/etc/passwd)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o664)\n"
                  },
                  "endColumn": 31,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o7)\nos.chmod('/etc/passwd', 0o664)\nos.chmod('/etc/passwd', 0o777)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o777 on file (/etc/passwd)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o777)\n"
                  },
                  "endColumn": 31,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o664)\nos.chmod('/etc/passwd', 0o777)\nos.chmod('/etc/passwd', 0o770)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o770 on file (/etc/passwd)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o770)\n"
                  },
                  "endColumn": 31,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o777)\nos.chmod('/etc/passwd', 0o770)\nos.chmod('/etc/passwd', 0o776)\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o776 on file (/etc/passwd)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o776)\n"
                  },
                  "endColumn": 31,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o770)\nos.chmod('/etc/passwd', 0o776)\nos.chmod('/etc/passwd', 0o760)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o760 on file (/etc/passwd)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o760)\n"
                  },
                  "endColumn": 31,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o776)\nos.chmod('/etc/passwd', 0o760)\nos.chmod('~/.bashrc', 511)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o777 on file (~/.bashrc)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('~/.bashrc', 511)\n"
                  },
                  "endColumn": 27,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', 0o760)\nos.chmod('~/.bashrc', 511)\nos.chmod('/etc/hosts', 0o777)\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o777 on file (/etc/hosts)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/etc/hosts', 0o777)\n"
                  },
                  "endColumn": 30,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('~/.bashrc', 511)\nos.chmod('/etc/hosts', 0o777)\nos.chmod('/tmp/oh_hai', 0x1ff)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o777 on file (/tmp/oh_hai)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/tmp/oh_hai', 0x1ff)\n"
                  },
                  "endColumn": 31,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/hosts', 0o777)\nos.chmod('/tmp/oh_hai', 0x1ff)\nos.chmod('/etc/passwd', stat.S_IRWXU)\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Probable insecure usage of temp file/directory."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod('/tmp/oh_hai', 0x1ff)\n"
                  },
                  "endColumn": 23,
                  "endLine": 15,
                  "startColumn": 10,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/hosts', 0o777)\nos.chmod('/tmp/oh_hai', 0x1ff)\nos.chmod('/etc/passwd', stat.S_IRWXU)\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B108",
          "ruleIndex": 20
        },
        {
          "message": {
            "text": "Chmod setting a permissive mask 0o777 on file (keyfile)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.chmod(keyfile, 0o777)\n"
                  },
                  "endColumn": 25,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/os-chmod.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.chmod('/etc/passwd', stat.S_IRWXU)\nos.chmod(keyfile, 0o777)\nos.chmod('~/hidden_exec', stat.S_IXGRP)\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B103",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execl(path, arg0, arg1)\n"
                  },
                  "endColumn": 27,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.execl(path, arg0, arg1)\nos.execle(path, arg0, arg1, env)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execle(path, arg0, arg1, env)\n"
                  },
                  "endColumn": 33,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execl(path, arg0, arg1)\nos.execle(path, arg0, arg1, env)\nos.execlp(file, arg0, arg1)\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execlp(file, arg0, arg1)\n"
                  },
                  "endColumn": 28,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execle(path, arg0, arg1, env)\nos.execlp(file, arg0, arg1)\nos.execlpe(file, arg0, arg1, env)\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execlpe(file, arg0, arg1, env)\n"
                  },
                  "endColumn": 34,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execlp(file, arg0, arg1)\nos.execlpe(file, arg0, arg1, env)\nos.execv(path, args)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execv(path, args)\n"
                  },
                  "endColumn": 21,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execlpe(file, arg0, arg1, env)\nos.execv(path, args)\nos.execve(path, args, env)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execve(path, args, env)\n"
                  },
                  "endColumn": 27,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execv(path, args)\nos.execve(path, args, env)\nos.execvp(file, args)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execvp(file, args)\n"
                  },
                  "endColumn": 22,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execve(path, args, env)\nos.execvp(file, args)\nos.execvpe(file, args, env)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.execvpe(file, args, env)\n"
                  },
                  "endColumn": 28,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/os-exec.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.execvp(file, args)\nos.execvpe(file, args, env)\n\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen('/bin/uname -av')\n"
                  },
                  "endColumn": 27,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.popen('/bin/uname -av')\npopen('/bin/uname -av')\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "popen('/bin/uname -av')\n"
                  },
                  "endColumn": 24,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.popen('/bin/uname -av')\npopen('/bin/uname -av')\no.popen('/bin/uname -av')\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.popen('/bin/uname -av')\n"
                  },
                  "endColumn": 26,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "popen('/bin/uname -av')\no.popen('/bin/uname -av')\npos('/bin/uname -av')\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pos('/bin/uname -av')\n"
                  },
                  "endColumn": 22,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.popen('/bin/uname -av')\npos('/bin/uname -av')\nos.popen2('/bin/uname -av')\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen2('/bin/uname -av')\n"
                  },
                  "endColumn": 28,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pos('/bin/uname -av')\nos.popen2('/bin/uname -av')\nos.popen3('/bin/uname -av')\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen3('/bin/uname -av')\n"
                  },
                  "endColumn": 28,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.popen2('/bin/uname -av')\nos.popen3('/bin/uname -av')\nos.popen4('/bin/uname -av')\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen4('/bin/uname -av')\n"
                  },
                  "endColumn": 28,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.popen3('/bin/uname -av')\nos.popen4('/bin/uname -av')\n\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen4('/bin/uname -av; rm -rf /')\n"
                  },
                  "endColumn": 38,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.popen4('/bin/uname -av; rm -rf /')\nos.popen4(some_var)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell, possible injection detected, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.popen4(some_var)\n"
                  },
                  "endColumn": 20,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/os-popen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.popen4('/bin/uname -av; rm -rf /')\nos.popen4(some_var)\n"
                  },
                  "endLine": 15,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnl(mode, path)\n"
                  },
                  "endColumn": 22,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.spawnl(mode, path)\nos.spawnle(mode, path, env)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnle(mode, path, env)\n"
                  },
                  "endColumn": 28,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnl(mode, path)\nos.spawnle(mode, path, env)\nos.spawnlp(mode, file)\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnlp(mode, file)\n"
                  },
                  "endColumn": 23,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnle(mode, path, env)\nos.spawnlp(mode, file)\nos.spawnlpe(mode, file, env)\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnlpe(mode, file, env)\n"
                  },
                  "endColumn": 29,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnlp(mode, file)\nos.spawnlpe(mode, file, env)\nos.spawnv(mode, path, args)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnv(mode, path, args)\n"
                  },
                  "endColumn": 28,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnlpe(mode, file, env)\nos.spawnv(mode, path, args)\nos.spawnve(mode, path, args, env)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnve(mode, path, args, env)\n"
                  },
                  "endColumn": 34,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnv(mode, path, args)\nos.spawnve(mode, path, args, env)\nos.spawnvp(mode, file, args)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnvp(mode, file, args)\n"
                  },
                  "endColumn": 29,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnve(mode, path, args, env)\nos.spawnvp(mode, file, args)\nos.spawnvpe(mode, file, args, env)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.spawnvpe(mode, file, args, env)\n"
                  },
                  "endColumn": 35,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/os-spawn.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.spawnvp(mode, file, args)\nos.spawnvpe(mode, file, args, env)\n"
                  },
                  "endLine": 10,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.startfile('/bin/foo.docx')\n"
                  },
                  "endColumn": 30,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/os-startfile.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.startfile('/bin/foo.docx')\nos.startfile('/bin/bad.exe')\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.startfile('/bin/bad.exe')\n"
                  },
                  "endColumn": 29,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/os-startfile.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.startfile('/bin/foo.docx')\nos.startfile('/bin/bad.exe')\nos.startfile('/bin/text.txt')\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.startfile('/bin/text.txt')\n"
                  },
                  "endColumn": 30,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/os-startfile.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "os.startfile('/bin/bad.exe')\nos.startfile('/bin/text.txt')\n"
                  },
                  "endLine": 5,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "os.system('/bin/echo hi')\n"
                  },
                  "endColumn": 26,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/os_system.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nos.system('/bin/echo hi')\n"
                  },
                  "endLine": 3,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import pickle\n"
                  },
                  "endColumn": 14,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/pandas_read_pickle.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import pickle\nimport pandas as pd\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(pd.read_pickle(pick))\n"
                  },
                  "endColumn": 27,
                  "endLine": 12,
                  "startColumn": 7,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/pandas_read_pickle.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(pd.read_pickle(pick))\n"
                  },
                  "endLine": 12,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Possible shell injection via Paramiko call, check inputs are properly sanitized."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "client.exec_command('something; really; unsafe')\n"
                  },
                  "endColumn": 49,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/paramiko_injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# this is not safe\nclient.exec_command('something; really; unsafe')\n\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B601",
          "ruleIndex": 38
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from subprocess import Popen as pop\n"
                  },
                  "endColumn": 36,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from subprocess import Popen as pop\n\npop('gcc --version', shell=False)\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Starting a process with a partial executable path"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('gcc --version', shell=False)\n"
                  },
                  "endColumn": 34,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('gcc --version', shell=False)\npop('/bin/gcc --version', shell=False)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B607",
          "ruleIndex": 34
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('gcc --version', shell=False)\n"
                  },
                  "endColumn": 34,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('gcc --version', shell=False)\npop('/bin/gcc --version', shell=False)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('/bin/gcc --version', shell=False)\n"
                  },
                  "endColumn": 39,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pop('gcc --version', shell=False)\npop('/bin/gcc --version', shell=False)\npop(var, shell=False)\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop(var, shell=False)\n"
                  },
                  "endColumn": 22,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pop('/bin/gcc --version', shell=False)\npop(var, shell=False)\n\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "Starting a process with a partial executable path"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop(['ls', '-l'], shell=False)\n"
                  },
                  "endColumn": 31,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop(['ls', '-l'], shell=False)\npop(['/bin/ls', '-l'], shell=False)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B607",
          "ruleIndex": 34
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop(['ls', '-l'], shell=False)\n"
                  },
                  "endColumn": 31,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop(['ls', '-l'], shell=False)\npop(['/bin/ls', '-l'], shell=False)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop(['/bin/ls', '-l'], shell=False)\n"
                  },
                  "endColumn": 36,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pop(['ls', '-l'], shell=False)\npop(['/bin/ls', '-l'], shell=False)\n\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('../ls -l', shell=False)\n"
                  },
                  "endColumn": 29,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('../ls -l', shell=False)\n\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('c:\\\\hello\\\\something', shell=False)\n"
                  },
                  "endColumn": 41,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('c:\\\\hello\\\\something', shell=False)\npop('c:/hello/something_else', shell=False)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('c:/hello/something_else', shell=False)\n"
                  },
                  "endColumn": 44,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/partial_path_process.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pop('c:\\\\hello\\\\something', shell=False)\npop('c:/hello/something_else', shell=False)\n"
                  },
                  "endLine": 13,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "Consider possible security implications associated with pickle module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import pickle\n"
                  },
                  "endColumn": 14,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/pickle_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import io\nimport pickle\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(pickle.loads(pick))\n"
                  },
                  "endColumn": 25,
                  "endLine": 7,
                  "startColumn": 7,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/pickle_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pick = pickle.dumps({'a': 'b', 'c': 'd'})\nprint(pickle.loads(pick))\n\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(pickle.load(file_obj))\n"
                  },
                  "endColumn": 28,
                  "endLine": 12,
                  "startColumn": 7,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/pickle_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "file_obj.seek(0)\nprint(pickle.load(file_obj))\n\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(pickle.Unpickler(file_obj).load())\n"
                  },
                  "endColumn": 33,
                  "endLine": 15,
                  "startColumn": 7,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/pickle_deserialize.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "file_obj.seek(0)\nprint(pickle.Unpickler(file_obj).load())\n"
                  },
                  "endLine": 15,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(commands.getstatusoutput('/bin/echo / | xargs ls'))\n"
                  },
                  "endColumn": 57,
                  "endLine": 5,
                  "startColumn": 7,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(commands.getstatusoutput('/bin/echo / | xargs ls'))\nprint(commands.getoutput('/bin/echo / | xargs ls'))\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(commands.getoutput('/bin/echo / | xargs ls'))\n"
                  },
                  "endColumn": 51,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(commands.getstatusoutput('/bin/echo / | xargs ls'))\nprint(commands.getoutput('/bin/echo / | xargs ls'))\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(popen2.popen2('/bin/echo / | xargs ls')[0].read())\n"
                  },
                  "endColumn": 46,
                  "endLine": 11,
                  "startColumn": 7,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nprint(popen2.popen2('/bin/echo / | xargs ls')[0].read())\nprint(popen2.popen3('/bin/echo / | xargs ls')[0].read())\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(popen2.popen3('/bin/echo / | xargs ls')[0].read())\n"
                  },
                  "endColumn": 46,
                  "endLine": 12,
                  "startColumn": 7,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(popen2.popen2('/bin/echo / | xargs ls')[0].read())\nprint(popen2.popen3('/bin/echo / | xargs ls')[0].read())\nprint(popen2.popen4('/bin/echo / | xargs ls')[0].read())\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(popen2.popen4('/bin/echo / | xargs ls')[0].read())\n"
                  },
                  "endColumn": 46,
                  "endLine": 13,
                  "startColumn": 7,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(popen2.popen3('/bin/echo / | xargs ls')[0].read())\nprint(popen2.popen4('/bin/echo / | xargs ls')[0].read())\nprint(popen2.Popen3('/bin/echo / | xargs ls').fromchild.read())\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(popen2.Popen3('/bin/echo / | xargs ls').fromchild.read())\n"
                  },
                  "endColumn": 46,
                  "endLine": 14,
                  "startColumn": 7,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(popen2.popen4('/bin/echo / | xargs ls')[0].read())\nprint(popen2.Popen3('/bin/echo / | xargs ls').fromchild.read())\nprint(popen2.Popen4('/bin/echo / | xargs ls').fromchild.read())\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "print(popen2.Popen4('/bin/echo / | xargs ls').fromchild.read())\n"
                  },
                  "endColumn": 46,
                  "endLine": 15,
                  "startColumn": 7,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/popen_wrappers.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(popen2.Popen3('/bin/echo / | xargs ls').fromchild.read())\nprint(popen2.Popen4('/bin/echo / | xargs ls').fromchild.read())\n"
                  },
                  "endLine": 15,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.Cipher import AES\n"
                  },
                  "endColumn": 30,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/pycrypto.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import AES\nfrom Crypto import Random\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module Random are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto import Random\n"
                  },
                  "endColumn": 26,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/pycrypto.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.Cipher import AES\nfrom Crypto import Random\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "An IPMI-related module is being imported. IPMI is considered insecure. Use an encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from pyghmi.ipmi import command\n"
                  },
                  "endColumn": 32,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/pyghmi.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from pyghmi.ipmi import command\n\ncmd = command.Command(bmc=\"bmc\",\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B415",
          "ruleIndex": 40
        },
        {
          "message": {
            "text": "Possible hardcoded password: 'ZjE4ZjI0NTE4YmI2NGJjZDliOGY3ZmJiY2UyN2IzODQK'"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cmd = command.Command(bmc=\"bmc\",\n"
                  },
                  "endColumn": 79,
                  "endLine": 4,
                  "startColumn": 7,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/pyghmi.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncmd = command.Command(bmc=\"bmc\",\n                      userid=\"userid\",\n                      password=\"ZjE4ZjI0NTE4YmI2NGJjZDliOGY3ZmJiY2UyN2IzODQK\")\n"
                  },
                  "endLine": 5,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B106",
          "ruleIndex": 19
        },
        {
          "message": {
            "text": "Use of unsafe PyTorch load or save"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "torch.save(model.state_dict(), 'model_weights.pth')\n"
                  },
                  "endColumn": 52,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/pytorch_load_save.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "model = models.resnet18(pretrained=True)\ntorch.save(model.state_dict(), 'model_weights.pth')\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B614",
          "ruleIndex": 41
        },
        {
          "message": {
            "text": "Use of unsafe PyTorch load or save"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "loaded_model.load_state_dict(torch.load('model_weights.pth'))\n"
                  },
                  "endColumn": 61,
                  "endLine": 10,
                  "startColumn": 30,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/pytorch_load_save.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "loaded_model = models.resnet18()\nloaded_model.load_state_dict(torch.load('model_weights.pth'))\n\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B614",
          "ruleIndex": 41
        },
        {
          "message": {
            "text": "Use of unsafe PyTorch load or save"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "torch.save(loaded_model.state_dict(), 'model_weights.pth')\n"
                  },
                  "endColumn": 59,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/pytorch_load_save.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Save the model\ntorch.save(loaded_model.state_dict(), 'model_weights.pth')\n\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B614",
          "ruleIndex": 41
        },
        {
          "message": {
            "text": "Use of unsafe PyTorch load or save"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "torch.save(another_model.state_dict(), 'model_weights.pth')\n"
                  },
                  "endColumn": 60,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/pytorch_load_save.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Save the model\ntorch.save(another_model.state_dict(), 'model_weights.pth')\n\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B614",
          "ruleIndex": 41
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.Random()\n"
                  },
                  "endColumn": 22,
                  "endLine": 5,
                  "startColumn": 7,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nbad = random.Random()\nbad = random.random()\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.random()\n"
                  },
                  "endColumn": 22,
                  "endLine": 6,
                  "startColumn": 7,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.Random()\nbad = random.random()\nbad = random.randrange()\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.randrange()\n"
                  },
                  "endColumn": 25,
                  "endLine": 7,
                  "startColumn": 7,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.random()\nbad = random.randrange()\nbad = random.randint()\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.randint()\n"
                  },
                  "endColumn": 23,
                  "endLine": 8,
                  "startColumn": 7,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.randrange()\nbad = random.randint()\nbad = random.choice()\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.choice()\n"
                  },
                  "endColumn": 22,
                  "endLine": 9,
                  "startColumn": 7,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.randint()\nbad = random.choice()\nbad = random.choices()\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.choices()\n"
                  },
                  "endColumn": 23,
                  "endLine": 10,
                  "startColumn": 7,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.choice()\nbad = random.choices()\nbad = random.uniform()\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.uniform()\n"
                  },
                  "endColumn": 23,
                  "endLine": 11,
                  "startColumn": 7,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.choices()\nbad = random.uniform()\nbad = random.triangular()\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.triangular()\n"
                  },
                  "endColumn": 26,
                  "endLine": 12,
                  "startColumn": 7,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.uniform()\nbad = random.triangular()\nbad = random.randbytes()\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad = random.randbytes()\n"
                  },
                  "endColumn": 25,
                  "endLine": 13,
                  "startColumn": 7,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "bad = random.triangular()\nbad = random.randbytes()\n\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B311",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com')\n"
                  },
                  "endColumn": 34,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Errors\nrequests.get('https://gmail.com')\nrequests.get('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 48,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com')\nrequests.get('https://gmail.com', timeout=None)\nrequests.post('https://gmail.com')\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com')\n"
                  },
                  "endColumn": 35,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com', timeout=None)\nrequests.post('https://gmail.com')\nrequests.post('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 49,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com')\nrequests.post('https://gmail.com', timeout=None)\nrequests.put('https://gmail.com')\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com')\n"
                  },
                  "endColumn": 34,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com', timeout=None)\nrequests.put('https://gmail.com')\nrequests.put('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 48,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com')\nrequests.put('https://gmail.com', timeout=None)\nrequests.delete('https://gmail.com')\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com')\n"
                  },
                  "endColumn": 37,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com', timeout=None)\nrequests.delete('https://gmail.com')\nrequests.delete('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 51,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com')\nrequests.delete('https://gmail.com', timeout=None)\nrequests.patch('https://gmail.com')\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com')\n"
                  },
                  "endColumn": 36,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com', timeout=None)\nrequests.patch('https://gmail.com')\nrequests.patch('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 50,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com')\nrequests.patch('https://gmail.com', timeout=None)\nrequests.options('https://gmail.com')\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com')\n"
                  },
                  "endColumn": 38,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com', timeout=None)\nrequests.options('https://gmail.com')\nrequests.options('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 52,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com')\nrequests.options('https://gmail.com', timeout=None)\nrequests.head('https://gmail.com')\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests without timeout"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.head('https://gmail.com')\n"
                  },
                  "endColumn": 35,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com', timeout=None)\nrequests.head('https://gmail.com')\nrequests.head('https://gmail.com', timeout=None)\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.head('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 49,
                  "endLine": 19,
                  "startColumn": 1,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.head('https://gmail.com')\nrequests.head('https://gmail.com', timeout=None)\nhttpx.get('https://gmail.com')\n"
                  },
                  "endLine": 20,
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.get('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 45,
                  "endLine": 21,
                  "startColumn": 1,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.get('https://gmail.com')\nhttpx.get('https://gmail.com', timeout=None)\nhttpx.post('https://gmail.com')\n"
                  },
                  "endLine": 22,
                  "startLine": 20
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.post('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 46,
                  "endLine": 23,
                  "startColumn": 1,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.post('https://gmail.com')\nhttpx.post('https://gmail.com', timeout=None)\nhttpx.put('https://gmail.com')\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.put('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 45,
                  "endLine": 25,
                  "startColumn": 1,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.put('https://gmail.com')\nhttpx.put('https://gmail.com', timeout=None)\nhttpx.delete('https://gmail.com')\n"
                  },
                  "endLine": 26,
                  "startLine": 24
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.delete('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 48,
                  "endLine": 27,
                  "startColumn": 1,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.delete('https://gmail.com')\nhttpx.delete('https://gmail.com', timeout=None)\nhttpx.patch('https://gmail.com')\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.patch('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 47,
                  "endLine": 29,
                  "startColumn": 1,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.patch('https://gmail.com')\nhttpx.patch('https://gmail.com', timeout=None)\nhttpx.options('https://gmail.com')\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.options('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 49,
                  "endLine": 31,
                  "startColumn": 1,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.options('https://gmail.com')\nhttpx.options('https://gmail.com', timeout=None)\nhttpx.head('https://gmail.com')\n"
                  },
                  "endLine": 32,
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.head('https://gmail.com', timeout=None)\n"
                  },
                  "endColumn": 46,
                  "endLine": 33,
                  "startColumn": 1,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.head('https://gmail.com')\nhttpx.head('https://gmail.com', timeout=None)\nhttpx.Client()\n"
                  },
                  "endLine": 34,
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.Client(timeout=None)\n"
                  },
                  "endColumn": 27,
                  "endLine": 35,
                  "startColumn": 1,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.Client()\nhttpx.Client(timeout=None)\nhttpx.AsyncClient()\n"
                  },
                  "endLine": 36,
                  "startLine": 34
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.AsyncClient(timeout=None)\n"
                  },
                  "endColumn": 32,
                  "endLine": 37,
                  "startColumn": 1,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.AsyncClient()\nhttpx.AsyncClient(timeout=None)\nwith httpx.Client() as client:\n"
                  },
                  "endLine": 38,
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "with httpx.Client(timeout=None) as client:\n"
                  },
                  "endColumn": 32,
                  "endLine": 40,
                  "startColumn": 6,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    client.get('https://gmail.com')\nwith httpx.Client(timeout=None) as client:\n    client.get('https://gmail.com')\n"
                  },
                  "endLine": 41,
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to httpx with timeout set to None"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "async with httpx.AsyncClient(timeout=None) as client:\n"
                  },
                  "endColumn": 43,
                  "endLine": 44,
                  "startColumn": 12,
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "examples/requests-missing-timeout.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    await client.get('https://gmail.com')\nasync with httpx.AsyncClient(timeout=None) as client:\n    await client.get('https://gmail.com')\n"
                  },
                  "endLine": 45,
                  "startLine": 43
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B113",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 60,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.get('https://gmail.com', timeout=30, verify=True)\nrequests.get('https://gmail.com', timeout=30, verify=False)\nrequests.post('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 61,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.post('https://gmail.com', timeout=30, verify=True)\nrequests.post('https://gmail.com', timeout=30, verify=False)\nrequests.put('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 60,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.put('https://gmail.com', timeout=30, verify=True)\nrequests.put('https://gmail.com', timeout=30, verify=False)\nrequests.delete('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 63,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.delete('https://gmail.com', timeout=30, verify=True)\nrequests.delete('https://gmail.com', timeout=30, verify=False)\nrequests.patch('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 62,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.patch('https://gmail.com', timeout=30, verify=True)\nrequests.patch('https://gmail.com', timeout=30, verify=False)\nrequests.options('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 64,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.options('https://gmail.com', timeout=30, verify=True)\nrequests.options('https://gmail.com', timeout=30, verify=False)\nrequests.head('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to requests with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "requests.head('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 61,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "requests.head('https://gmail.com', timeout=30, verify=True)\nrequests.head('https://gmail.com', timeout=30, verify=False)\n\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.request('GET', 'https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 68,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.request('GET', 'https://gmail.com', timeout=30, verify=True)\nhttpx.request('GET', 'https://gmail.com', timeout=30, verify=False)\nhttpx.get('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.get('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 57,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.get('https://gmail.com', timeout=30, verify=True)\nhttpx.get('https://gmail.com', timeout=30, verify=False)\nhttpx.options('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.options('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 61,
                  "endLine": 26,
                  "startColumn": 1,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.options('https://gmail.com', timeout=30, verify=True)\nhttpx.options('https://gmail.com', timeout=30, verify=False)\nhttpx.head('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.head('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 58,
                  "endLine": 28,
                  "startColumn": 1,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.head('https://gmail.com', timeout=30, verify=True)\nhttpx.head('https://gmail.com', timeout=30, verify=False)\nhttpx.post('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 29,
                  "startLine": 27
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.post('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 58,
                  "endLine": 30,
                  "startColumn": 1,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.post('https://gmail.com', timeout=30, verify=True)\nhttpx.post('https://gmail.com', timeout=30, verify=False)\nhttpx.put('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.put('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 57,
                  "endLine": 32,
                  "startColumn": 1,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.put('https://gmail.com', timeout=30, verify=True)\nhttpx.put('https://gmail.com', timeout=30, verify=False)\nhttpx.patch('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 33,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.patch('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 59,
                  "endLine": 34,
                  "startColumn": 1,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.patch('https://gmail.com', timeout=30, verify=True)\nhttpx.patch('https://gmail.com', timeout=30, verify=False)\nhttpx.delete('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 35,
                  "startLine": 33
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.delete('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 60,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 36
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.delete('https://gmail.com', timeout=30, verify=True)\nhttpx.delete('https://gmail.com', timeout=30, verify=False)\nhttpx.stream('https://gmail.com', timeout=30, verify=True)\n"
                  },
                  "endLine": 37,
                  "startLine": 35
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.stream('https://gmail.com', timeout=30, verify=False)\n"
                  },
                  "endColumn": 60,
                  "endLine": 38,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.stream('https://gmail.com', timeout=30, verify=True)\nhttpx.stream('https://gmail.com', timeout=30, verify=False)\nhttpx.Client(timeout=30)\n"
                  },
                  "endLine": 39,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.Client(timeout=30, verify=False)\n"
                  },
                  "endColumn": 39,
                  "endLine": 40,
                  "startColumn": 1,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.Client(timeout=30)\nhttpx.Client(timeout=30, verify=False)\nhttpx.AsyncClient(timeout=30)\n"
                  },
                  "endLine": 41,
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Call to httpx with verify=False disabling SSL certificate checks, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "httpx.AsyncClient(timeout=30, verify=False)\n"
                  },
                  "endColumn": 44,
                  "endLine": 42,
                  "startColumn": 1,
                  "startLine": 42
                },
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "httpx.AsyncClient(timeout=30)\nhttpx.AsyncClient(timeout=30, verify=False)\n"
                  },
                  "endLine": 42,
                  "startLine": 41
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B501",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Consider possible security implications associated with shelve module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import shelve\n"
                  },
                  "endColumn": 14,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/shelve_open.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import os\nimport shelve\nimport tempfile\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B403",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    with shelve.open(filename) as db:\n"
                  },
                  "endColumn": 31,
                  "endLine": 8,
                  "startColumn": 10,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/shelve_open.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n    with shelve.open(filename) as db:\n        db['spam'] = {'eggs': 'ham'}\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    with shelve.open(filename) as db:\n"
                  },
                  "endColumn": 31,
                  "endLine": 11,
                  "startColumn": 10,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/shelve_open.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n    with shelve.open(filename) as db:\n        print(db['spam'])\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B301",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"])\n"
                  },
                  "endColumn": 35,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/skip.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"])\nsubprocess.call([\"/bin/ls\", \"-l\"]) #noqa\nsubprocess.call([\"/bin/ls\", \"-l\"]) # noqa\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"]) #noqa\n"
                  },
                  "endColumn": 35,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/skip.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"])\nsubprocess.call([\"/bin/ls\", \"-l\"]) #noqa\nsubprocess.call([\"/bin/ls\", \"-l\"]) # noqa\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"]) # noqa\n"
                  },
                  "endColumn": 35,
                  "endLine": 3,
                  "startColumn": 1,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/skip.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"]) #noqa\nsubprocess.call([\"/bin/ls\", \"-l\"]) # noqa\nsubprocess.call([\"/bin/ls\", \"-l\"]) # nosec\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"])\n"
                  },
                  "endColumn": 35,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/skip.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"]) # nosec\nsubprocess.call([\"/bin/ls\", \"-l\"])\nsubprocess.call([\"/bin/ls\", \"-l\"]) #nosec\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"])\n"
                  },
                  "endColumn": 35,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/skip.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\", \"-l\"]) #nosec\nsubprocess.call([\"/bin/ls\", \"-l\"])\n"
                  },
                  "endLine": 7,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "The use of SNMPv1 and SNMPv2 is insecure. You should use SNMPv3 if able."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = CommunityData('public', mpModel=0)\n"
                  },
                  "endColumn": 39,
                  "endLine": 4,
                  "startColumn": 5,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/snmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# SHOULD FAIL\na = CommunityData('public', mpModel=0)\n# SHOULD FAIL\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B508",
          "ruleIndex": 45
        },
        {
          "message": {
            "text": "You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv is insecure"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "insecure = UsmUserData(\"securityName\")\n"
                  },
                  "endColumn": 39,
                  "endLine": 6,
                  "startColumn": 12,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/snmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# SHOULD FAIL\ninsecure = UsmUserData(\"securityName\")\n# SHOULD FAIL\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B509",
          "ruleIndex": 46
        },
        {
          "message": {
            "text": "You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv is insecure"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "auth_no_priv = UsmUserData(\"securityName\",\"authName\")\n"
                  },
                  "endColumn": 54,
                  "endLine": 8,
                  "startColumn": 16,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/snmp.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# SHOULD FAIL\nauth_no_priv = UsmUserData(\"securityName\",\"authName\")\n# SHOULD PASS\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B509",
          "ruleIndex": 46
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"SELECT *\n"
                  },
                  "endColumn": 28,
                  "endLine": 5,
                  "startColumn": 9,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad\nquery = \"\"\"SELECT *\nFROM foo WHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"INSERT INTO foo\n"
                  },
                  "endLine": 6,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"INSERT INTO foo\n"
                  },
                  "endColumn": 27,
                  "endLine": 7,
                  "startColumn": 9,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "FROM foo WHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"INSERT INTO foo\nVALUES ('a', 'b', '%s')\"\"\" % value\nquery = \"\"\"DELETE FROM foo\n"
                  },
                  "endLine": 8,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"DELETE FROM foo\n"
                  },
                  "endColumn": 19,
                  "endLine": 9,
                  "startColumn": 9,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "VALUES ('a', 'b', '%s')\"\"\" % value\nquery = \"\"\"DELETE FROM foo\nWHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"UPDATE foo\n"
                  },
                  "endLine": 10,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"UPDATE foo\n"
                  },
                  "endColumn": 19,
                  "endLine": 11,
                  "startColumn": 9,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"UPDATE foo\nSET value = 'b'\nWHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"WITH cte AS (SELECT x FROM foo)\n"
                  },
                  "endLine": 13,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"WITH cte AS (SELECT x FROM foo)\n"
                  },
                  "endColumn": 36,
                  "endLine": 14,
                  "startColumn": 9,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '%s'\"\"\" % identifier\nquery = \"\"\"WITH cte AS (SELECT x FROM foo)\nSELECT x FROM cte WHERE x = '%s'\"\"\" % identifier\n# bad alternate forms\n"
                  },
                  "endLine": 15,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"SELECT *\n"
                  },
                  "endColumn": 16,
                  "endLine": 17,
                  "startColumn": 9,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad alternate forms\nquery = \"\"\"SELECT *\nFROM foo\nWHERE id = '\"\"\" + identifier + \"'\"\nquery = \"\"\"SELECT *\n"
                  },
                  "endLine": 19,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"SELECT *\n"
                  },
                  "endColumn": 19,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '\"\"\" + identifier + \"'\"\nquery = \"\"\"SELECT *\nFROM foo\nWHERE id = '{}'\"\"\".format(identifier)\n\n"
                  },
                  "endLine": 22,
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = f\"\"\"\n"
                  },
                  "endColumn": 12,
                  "endLine": 24,
                  "startColumn": 13,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nquery = f\"\"\"\nSELECT *\nFROM foo\nWHERE id = {identifier}\n\"\"\"\n\n"
                  },
                  "endLine": 28,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"SELECT *\n"
                  },
                  "endColumn": 19,
                  "endLine": 31,
                  "startColumn": 13,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad\ncur.execute(\"\"\"SELECT *\nFROM foo\nWHERE id = '%s'\"\"\" % identifier)\ncur.execute(\"\"\"INSERT INTO foo\n"
                  },
                  "endLine": 33,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"INSERT INTO foo\n"
                  },
                  "endColumn": 27,
                  "endLine": 34,
                  "startColumn": 13,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '%s'\"\"\" % identifier)\ncur.execute(\"\"\"INSERT INTO foo\nVALUES ('a', 'b', '%s')\"\"\" % value)\ncur.execute(\"\"\"DELETE FROM foo\n"
                  },
                  "endLine": 35,
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"DELETE FROM foo\n"
                  },
                  "endColumn": 19,
                  "endLine": 36,
                  "startColumn": 13,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "VALUES ('a', 'b', '%s')\"\"\" % value)\ncur.execute(\"\"\"DELETE FROM foo\nWHERE id = '%s'\"\"\" % identifier)\ncur.execute(\"\"\"UPDATE foo\n"
                  },
                  "endLine": 37,
                  "startLine": 34
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"UPDATE foo\n"
                  },
                  "endColumn": 19,
                  "endLine": 38,
                  "startColumn": 13,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '%s'\"\"\" % identifier)\ncur.execute(\"\"\"UPDATE foo\nSET value = 'b'\nWHERE id = '%s'\"\"\" % identifier)\n# bad alternate forms\n"
                  },
                  "endLine": 40,
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"SELECT *\n"
                  },
                  "endColumn": 16,
                  "endLine": 42,
                  "startColumn": 13,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad alternate forms\ncur.execute(\"\"\"SELECT *\nFROM foo\nWHERE id = '\"\"\" + identifier + \"'\")\ncur.execute(\"\"\"SELECT *\n"
                  },
                  "endLine": 44,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"\"\"SELECT *\n"
                  },
                  "endColumn": 19,
                  "endLine": 45,
                  "startColumn": 13,
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = '\"\"\" + identifier + \"'\")\ncur.execute(\"\"\"SELECT *\nFROM foo\nWHERE id = '{}'\"\"\".format(identifier))\n\n"
                  },
                  "endLine": 47,
                  "startLine": 43
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = f\"\"\"\n"
                  },
                  "endColumn": 12,
                  "endLine": 50,
                  "startColumn": 13,
                  "startLine": 49
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad with f-string\nquery = f\"\"\"\nSELECT *\nFROM foo\nWHERE id = {identifier}\n\"\"\"\nquery = f\"\"\"\n"
                  },
                  "endLine": 54,
                  "startLine": 48
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = f\"\"\"\n"
                  },
                  "endColumn": 12,
                  "endLine": 55,
                  "startColumn": 13,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\"\"\"\nquery = f\"\"\"\nSELECT *\nFROM foo\nWHERE id = {identifier}\n\"\"\"\n\n"
                  },
                  "endLine": 59,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = f\"\"\"\n"
                  },
                  "endColumn": 12,
                  "endLine": 61,
                  "startColumn": 13,
                  "startLine": 60
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nquery = f\"\"\"\nSELECT *\nFROM foo\nWHERE id = {identifier}\"\"\"\nquery = f\"\"\"\n"
                  },
                  "endLine": 64,
                  "startLine": 59
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = f\"\"\"\n"
                  },
                  "endColumn": 12,
                  "endLine": 65,
                  "startColumn": 13,
                  "startLine": 64
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "WHERE id = {identifier}\"\"\"\nquery = f\"\"\"\nSELECT *\nFROM foo\nWHERE id = {identifier}\"\"\"\n\n"
                  },
                  "endLine": 68,
                  "startLine": 63
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"\"\"\n"
                  },
                  "endColumn": 5,
                  "endLine": 70,
                  "startColumn": 17,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncur.execute(f\"\"\"\nSELECT\n    {column_name}\nFROM foo\nWHERE id = 1\"\"\")\n\n"
                  },
                  "endLine": 74,
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"\"\"\n"
                  },
                  "endColumn": 5,
                  "endLine": 76,
                  "startColumn": 17,
                  "startLine": 75
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncur.execute(f\"\"\"\nSELECT\n    {a + b}\nFROM foo\nWHERE id = 1\"\"\")\n\n"
                  },
                  "endLine": 80,
                  "startLine": 74
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"\"\"\n"
                  },
                  "endColumn": 5,
                  "endLine": 82,
                  "startColumn": 17,
                  "startLine": 81
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ncur.execute(f\"\"\"\nINSERT INTO\n    {table_name}\nVALUES (1)\"\"\")\ncur.execute(f\"\"\"\n"
                  },
                  "endLine": 85,
                  "startLine": 80
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"\"\"\n"
                  },
                  "endColumn": 8,
                  "endLine": 86,
                  "startColumn": 17,
                  "startLine": 85
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "VALUES (1)\"\"\")\ncur.execute(f\"\"\"\nUPDATE {table_name}\nSET id = 1\"\"\")\n\n"
                  },
                  "endLine": 88,
                  "startLine": 84
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT \"\n"
                  },
                  "endColumn": 22,
                  "endLine": 91,
                  "startColumn": 13,
                  "startLine": 90
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# implicit concatenation mixed with f-strings\ncur.execute(\"SELECT \"\n            f\"{column_name} \"\n            \"FROM foo \"\n            \"WHERE id = 1\"\n            )\n"
                  },
                  "endLine": 94,
                  "startLine": 89
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"INSERT INTO \"\n"
                  },
                  "endColumn": 27,
                  "endLine": 96,
                  "startColumn": 13,
                  "startLine": 95
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "            )\ncur.execute(\"INSERT INTO \"\n            f\"{table_name} \"\n            \"VALUES (1)\")\ncur.execute(f\"UPDATE {table_name} \"\n"
                  },
                  "endLine": 98,
                  "startLine": 94
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"UPDATE {table_name} \"\n"
                  },
                  "endColumn": 22,
                  "endLine": 99,
                  "startColumn": 15,
                  "startLine": 98
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "            \"VALUES (1)\")\ncur.execute(f\"UPDATE {table_name} \"\n            \"SET id = 1\")\n\n"
                  },
                  "endLine": 100,
                  "startLine": 97
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a()(\"\"\"SELECT %s\n"
                  },
                  "endColumn": 12,
                  "endLine": 123,
                  "startColumn": 5,
                  "startLine": 122
                },
                "artifactLocation": {
                  "uri": "examples/sql_multiline_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\na()(\"\"\"SELECT %s\nFROM foo\"\"\" % val)\n\n"
                  },
                  "endLine": 124,
                  "startLine": 121
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '%s'\" % identifier\n"
                  },
                  "endColumn": 44,
                  "endLine": 4,
                  "startColumn": 9,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad\nquery = \"SELECT * FROM foo WHERE id = '%s'\" % identifier\nquery = \"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value\n"
                  },
                  "endColumn": 50,
                  "endLine": 5,
                  "startColumn": 9,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '%s'\" % identifier\nquery = \"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value\nquery = \"DELETE FROM foo WHERE id = '%s'\" % identifier\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"DELETE FROM foo WHERE id = '%s'\" % identifier\n"
                  },
                  "endColumn": 42,
                  "endLine": 6,
                  "startColumn": 9,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value\nquery = \"DELETE FROM foo WHERE id = '%s'\" % identifier\nquery = \"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier\n"
                  },
                  "endColumn": 53,
                  "endLine": 7,
                  "startColumn": 9,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"DELETE FROM foo WHERE id = '%s'\" % identifier\nquery = \"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier\nquery = \"\"\"WITH cte AS (SELECT x FROM foo)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"\"\"WITH cte AS (SELECT x FROM foo)\n"
                  },
                  "endColumn": 36,
                  "endLine": 9,
                  "startColumn": 9,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier\nquery = \"\"\"WITH cte AS (SELECT x FROM foo)\nSELECT x FROM cte WHERE x = '%s'\"\"\" % identifier\n# bad alternate forms\n"
                  },
                  "endLine": 10,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '\" + identifier + \"'\"\n"
                  },
                  "endColumn": 41,
                  "endLine": 11,
                  "startColumn": 9,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad alternate forms\nquery = \"SELECT * FROM foo WHERE id = '\" + identifier + \"'\"\nquery = \"SELECT * FROM foo WHERE id = '{}'\".format(identifier)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '{}'\".format(identifier)\n"
                  },
                  "endColumn": 44,
                  "endLine": 12,
                  "startColumn": 9,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '\" + identifier + \"'\"\nquery = \"SELECT * FROM foo WHERE id = '{}'\".format(identifier)\nquery = \"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier)\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier)\n"
                  },
                  "endColumn": 49,
                  "endLine": 13,
                  "startColumn": 9,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "query = \"SELECT * FROM foo WHERE id = '{}'\".format(identifier)\nquery = \"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier)\n\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '%s'\" % identifier)\n"
                  },
                  "endColumn": 48,
                  "endLine": 16,
                  "startColumn": 13,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad\ncur.execute(\"SELECT * FROM foo WHERE id = '%s'\" % identifier)\ncur.execute(\"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value)\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value)\n"
                  },
                  "endColumn": 54,
                  "endLine": 17,
                  "startColumn": 13,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '%s'\" % identifier)\ncur.execute(\"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value)\ncur.execute(\"DELETE FROM foo WHERE id = '%s'\" % identifier)\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"DELETE FROM foo WHERE id = '%s'\" % identifier)\n"
                  },
                  "endColumn": 46,
                  "endLine": 18,
                  "startColumn": 13,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(\"INSERT INTO foo VALUES ('a', 'b', '%s')\" % value)\ncur.execute(\"DELETE FROM foo WHERE id = '%s'\" % identifier)\ncur.execute(\"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier)\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier)\n"
                  },
                  "endColumn": 57,
                  "endLine": 19,
                  "startColumn": 13,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(\"DELETE FROM foo WHERE id = '%s'\" % identifier)\ncur.execute(\"UPDATE foo SET value = 'b' WHERE id = '%s'\" % identifier)\n# bad alternate forms\n"
                  },
                  "endLine": 20,
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '\" + identifier + \"'\")\n"
                  },
                  "endColumn": 45,
                  "endLine": 21,
                  "startColumn": 13,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad alternate forms\ncur.execute(\"SELECT * FROM foo WHERE id = '\" + identifier + \"'\")\ncur.execute(\"SELECT * FROM foo WHERE id = '{}'\".format(identifier))\n"
                  },
                  "endLine": 22,
                  "startLine": 20
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '{}'\".format(identifier))\n"
                  },
                  "endColumn": 48,
                  "endLine": 22,
                  "startColumn": 13,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '\" + identifier + \"'\")\ncur.execute(\"SELECT * FROM foo WHERE id = '{}'\".format(identifier))\ncur.execute(\"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier))\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier))\n"
                  },
                  "endColumn": 53,
                  "endLine": 23,
                  "startColumn": 13,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(\"SELECT * FROM foo WHERE id = '{}'\".format(identifier))\ncur.execute(\"SELECT * FROM foo WHERE id = '[VALUE]'\".replace(\"[VALUE]\", identifier))\n\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"SELECT {column_name} FROM foo WHERE id = 1\")\n"
                  },
                  "endColumn": 22,
                  "endLine": 26,
                  "startColumn": 15,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# bad f-strings\ncur.execute(f\"SELECT {column_name} FROM foo WHERE id = 1\")\ncur.execute(f\"SELECT {a + b} FROM foo WHERE id = 1\")\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"SELECT {a + b} FROM foo WHERE id = 1\")\n"
                  },
                  "endColumn": 22,
                  "endLine": 27,
                  "startColumn": 15,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(f\"SELECT {column_name} FROM foo WHERE id = 1\")\ncur.execute(f\"SELECT {a + b} FROM foo WHERE id = 1\")\ncur.execute(f\"INSERT INTO {table_name} VALUES (1)\")\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"INSERT INTO {table_name} VALUES (1)\")\n"
                  },
                  "endColumn": 27,
                  "endLine": 28,
                  "startColumn": 15,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(f\"SELECT {a + b} FROM foo WHERE id = 1\")\ncur.execute(f\"INSERT INTO {table_name} VALUES (1)\")\ncur.execute(f\"UPDATE {table_name} SET id = 1\")\n"
                  },
                  "endLine": 29,
                  "startLine": 27
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cur.execute(f\"UPDATE {table_name} SET id = 1\")\n"
                  },
                  "endColumn": 22,
                  "endLine": 29,
                  "startColumn": 15,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "cur.execute(f\"INSERT INTO {table_name} VALUES (1)\")\ncur.execute(f\"UPDATE {table_name} SET id = 1\")\n\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "Possible SQL injection vector through string-based query construction."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a()(\"SELECT %s FROM foo\" % val)\n"
                  },
                  "endColumn": 25,
                  "endLine": 43,
                  "startColumn": 5,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "examples/sql_statements.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\na()(\"SELECT %s FROM foo\" % val)\n\n"
                  },
                  "endLine": 44,
                  "startLine": 42
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B608",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "ssl.wrap_socket call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv2)\n"
                  },
                  "endColumn": 48,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv2)\nSSL.Context(method=SSL.SSLv2_METHOD)\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "SSL.Context call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.SSLv2_METHOD)\n"
                  },
                  "endColumn": 37,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv2)\nSSL.Context(method=SSL.SSLv2_METHOD)\nSSL.Context(method=SSL.SSLv23_METHOD)\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "SSL.Context call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.SSLv23_METHOD)\n"
                  },
                  "endColumn": 38,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.SSLv2_METHOD)\nSSL.Context(method=SSL.SSLv23_METHOD)\n\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_SSLv2)\n"
                  },
                  "endColumn": 42,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nherp_derp(ssl_version=ssl.PROTOCOL_SSLv2)\nherp_derp(method=SSL.SSLv2_METHOD)\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.SSLv2_METHOD)\n"
                  },
                  "endColumn": 35,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_SSLv2)\nherp_derp(method=SSL.SSLv2_METHOD)\nherp_derp(method=SSL.SSLv23_METHOD)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.SSLv23_METHOD)\n"
                  },
                  "endColumn": 36,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.SSLv2_METHOD)\nherp_derp(method=SSL.SSLv23_METHOD)\n\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "ssl.wrap_socket call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv3)\n"
                  },
                  "endColumn": 48,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# strict tests\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv3)\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "ssl.wrap_socket call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\n"
                  },
                  "endColumn": 48,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv3)\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\nSSL.Context(method=SSL.SSLv3_METHOD)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "SSL.Context call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.SSLv3_METHOD)\n"
                  },
                  "endColumn": 37,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\nSSL.Context(method=SSL.SSLv3_METHOD)\nSSL.Context(method=SSL.TLSv1_METHOD)\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "SSL.Context call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.TLSv1_METHOD)\n"
                  },
                  "endColumn": 37,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.SSLv3_METHOD)\nSSL.Context(method=SSL.TLSv1_METHOD)\n\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_SSLv3)\n"
                  },
                  "endColumn": 42,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nherp_derp(ssl_version=ssl.PROTOCOL_SSLv3)\nherp_derp(ssl_version=ssl.PROTOCOL_TLSv1)\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_TLSv1)\n"
                  },
                  "endColumn": 42,
                  "endLine": 19,
                  "startColumn": 1,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_SSLv3)\nherp_derp(ssl_version=ssl.PROTOCOL_TLSv1)\nherp_derp(method=SSL.SSLv3_METHOD)\n"
                  },
                  "endLine": 20,
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.SSLv3_METHOD)\n"
                  },
                  "endColumn": 35,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_TLSv1)\nherp_derp(method=SSL.SSLv3_METHOD)\nherp_derp(method=SSL.TLSv1_METHOD)\n"
                  },
                  "endLine": 21,
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.TLSv1_METHOD)\n"
                  },
                  "endColumn": 35,
                  "endLine": 21,
                  "startColumn": 1,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.SSLv3_METHOD)\nherp_derp(method=SSL.TLSv1_METHOD)\n\n"
                  },
                  "endLine": 22,
                  "startLine": 20
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "ssl.wrap_socket call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_1)\n"
                  },
                  "endColumn": 50,
                  "endLine": 23,
                  "startColumn": 1,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_1)\nSSL.Context(method=SSL.TLSv1_1_METHOD)\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "SSL.Context call with insecure SSL/TLS protocol version identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "SSL.Context(method=SSL.TLSv1_1_METHOD)\n"
                  },
                  "endColumn": 39,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_1)\nSSL.Context(method=SSL.TLSv1_1_METHOD)\n\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_TLSv1_1)\n"
                  },
                  "endColumn": 44,
                  "endLine": 26,
                  "startColumn": 1,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nherp_derp(ssl_version=ssl.PROTOCOL_TLSv1_1)\nherp_derp(method=SSL.TLSv1_1_METHOD)\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Function call with insecure SSL/TLS protocol identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "herp_derp(method=SSL.TLSv1_1_METHOD)\n"
                  },
                  "endColumn": 37,
                  "endLine": 27,
                  "startColumn": 1,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "herp_derp(ssl_version=ssl.PROTOCOL_TLSv1_1)\nherp_derp(method=SSL.TLSv1_1_METHOD)\n\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B502",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "ssl.wrap_socket call with no SSL/TLS protocol version specified, the default SSLv23 could be insecure, possible security issue."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ssl.wrap_socket()\n"
                  },
                  "endColumn": 18,
                  "endLine": 30,
                  "startColumn": 1,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nssl.wrap_socket()\n\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B504",
          "ruleIndex": 48
        },
        {
          "message": {
            "text": "Function definition identified with insecure SSL/TLS protocol version by default, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def open_ssl_socket(version=ssl.PROTOCOL_SSLv2):\n"
                  },
                  "endColumn": 9,
                  "endLine": 33,
                  "startColumn": 1,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ndef open_ssl_socket(version=ssl.PROTOCOL_SSLv2):\n    pass\n\n"
                  },
                  "endLine": 34,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B503",
          "ruleIndex": 49
        },
        {
          "message": {
            "text": "Function definition identified with insecure SSL/TLS protocol version by default, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def open_ssl_socket(version=SSL.SSLv2_METHOD):\n"
                  },
                  "endColumn": 9,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ndef open_ssl_socket(version=SSL.SSLv2_METHOD):\n    pass\n\n"
                  },
                  "endLine": 37,
                  "startLine": 34
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B503",
          "ruleIndex": 49
        },
        {
          "message": {
            "text": "Function definition identified with insecure SSL/TLS protocol version by default, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def open_ssl_socket(version=SSL.SSLv23_METHOD):\n"
                  },
                  "endColumn": 9,
                  "endLine": 39,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ndef open_ssl_socket(version=SSL.SSLv23_METHOD):\n    pass\n\n"
                  },
                  "endLine": 40,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B503",
          "ruleIndex": 49
        },
        {
          "message": {
            "text": "Function definition identified with insecure SSL/TLS protocol version by default, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def open_ssl_socket(version=SSL.TLSv1_1_METHOD):\n"
                  },
                  "endColumn": 9,
                  "endLine": 42,
                  "startColumn": 1,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\ndef open_ssl_socket(version=SSL.TLSv1_1_METHOD):\n    pass\n\n"
                  },
                  "endLine": 43,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B503",
          "ruleIndex": 49
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import subprocess\n"
                  },
                  "endColumn": 18,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import subprocess\nfrom subprocess import Popen as pop\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from subprocess import Popen as pop\n"
                  },
                  "endColumn": 36,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import subprocess\nfrom subprocess import Popen as pop\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pop('/bin/gcc --version', shell=True)\n"
                  },
                  "endColumn": 38,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\npop('/bin/gcc --version', shell=True)\nPopen('/bin/gcc --version', shell=True)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "Function call with shell=True parameter identified, possible security issue."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Popen('/bin/gcc --version', shell=True)\n"
                  },
                  "endColumn": 40,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pop('/bin/gcc --version', shell=True)\nPopen('/bin/gcc --version', shell=True)\n\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B604",
          "ruleIndex": 50
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/gcc --version', shell=True)\n"
                  },
                  "endColumn": 51,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.Popen('/bin/gcc --version', shell=True)\nsubprocess.Popen(['/bin/gcc', '--version'], shell=False)\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen(['/bin/gcc', '--version'], shell=False)\n"
                  },
                  "endColumn": 57,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/gcc --version', shell=True)\nsubprocess.Popen(['/bin/gcc', '--version'], shell=False)\nsubprocess.Popen(['/bin/gcc', '--version'])\n"
                  },
                  "endLine": 16,
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen(['/bin/gcc', '--version'])\n"
                  },
                  "endColumn": 44,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen(['/bin/gcc', '--version'], shell=False)\nsubprocess.Popen(['/bin/gcc', '--version'])\n\n"
                  },
                  "endLine": 17,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call([\"/bin/ls\",\n"
                  },
                  "endColumn": 20,
                  "endLine": 19,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.call([\"/bin/ls\",\n                 \"-l\"\n                 ])\nsubprocess.call('/bin/ls -l', shell=True)\n"
                  },
                  "endLine": 21,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call('/bin/ls -l', shell=True)\n"
                  },
                  "endColumn": 42,
                  "endLine": 21,
                  "startColumn": 1,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                 ])\nsubprocess.call('/bin/ls -l', shell=True)\n\n"
                  },
                  "endLine": 22,
                  "startLine": 20
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.check_call(['/bin/ls', '-l'], shell=False)\n"
                  },
                  "endColumn": 54,
                  "endLine": 23,
                  "startColumn": 1,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.check_call(['/bin/ls', '-l'], shell=False)\nsubprocess.check_call('/bin/ls -l', shell=True)\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.check_call('/bin/ls -l', shell=True)\n"
                  },
                  "endColumn": 48,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.check_call(['/bin/ls', '-l'], shell=False)\nsubprocess.check_call('/bin/ls -l', shell=True)\n\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.check_output(['/bin/ls', '-l'])\n"
                  },
                  "endColumn": 43,
                  "endLine": 26,
                  "startColumn": 1,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.check_output(['/bin/ls', '-l'])\nsubprocess.check_output('/bin/ls -l', shell=True)\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.check_output('/bin/ls -l', shell=True)\n"
                  },
                  "endColumn": 50,
                  "endLine": 27,
                  "startColumn": 1,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.check_output(['/bin/ls', '-l'])\nsubprocess.check_output('/bin/ls -l', shell=True)\nsubprocess.check_output([], stdout=None)\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.check_output([], stdout=None)\n"
                  },
                  "endColumn": 41,
                  "endLine": 28,
                  "startColumn": 1,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.check_output('/bin/ls -l', shell=True)\nsubprocess.check_output([], stdout=None)\n\n"
                  },
                  "endLine": 29,
                  "startLine": 27
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.getoutput('/bin/ls -l')\n"
                  },
                  "endColumn": 35,
                  "endLine": 30,
                  "startColumn": 1,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.getoutput('/bin/ls -l')\nsubprocess.getstatusoutput('/bin/ls -l')\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.getstatusoutput('/bin/ls -l')\n"
                  },
                  "endColumn": 41,
                  "endLine": 31,
                  "startColumn": 1,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.getoutput('/bin/ls -l')\nsubprocess.getstatusoutput('/bin/ls -l')\n\n"
                  },
                  "endLine": 32,
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.run(['/bin/ls', '-l'])\n"
                  },
                  "endColumn": 34,
                  "endLine": 33,
                  "startColumn": 1,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.run(['/bin/ls', '-l'])\nsubprocess.run('/bin/ls -l', shell=True)\n"
                  },
                  "endLine": 34,
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.run('/bin/ls -l', shell=True)\n"
                  },
                  "endColumn": 41,
                  "endLine": 34,
                  "startColumn": 1,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.run(['/bin/ls', '-l'])\nsubprocess.run('/bin/ls -l', shell=True)\n\n"
                  },
                  "endLine": 35,
                  "startLine": 33
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls *', shell=True)\n"
                  },
                  "endColumn": 42,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 36
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.Popen('/bin/ls *', shell=True)\nsubprocess.Popen('/bin/ls %s' % ('something',), shell=True)\n"
                  },
                  "endLine": 37,
                  "startLine": 35
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls %s' % ('something',), shell=True)\n"
                  },
                  "endColumn": 60,
                  "endLine": 37,
                  "startColumn": 1,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls *', shell=True)\nsubprocess.Popen('/bin/ls %s' % ('something',), shell=True)\nsubprocess.Popen('/bin/ls {}'.format('something'), shell=True)\n"
                  },
                  "endLine": 38,
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls {}'.format('something'), shell=True)\n"
                  },
                  "endColumn": 63,
                  "endLine": 38,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls %s' % ('something',), shell=True)\nsubprocess.Popen('/bin/ls {}'.format('something'), shell=True)\n\n"
                  },
                  "endLine": 39,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen(command, shell=True)\n"
                  },
                  "endColumn": 38,
                  "endLine": 41,
                  "startColumn": 1,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "command = \"/bin/ls\" + unknown_function()\nsubprocess.Popen(command, shell=True)\n\n"
                  },
                  "endLine": 42,
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.Popen('/bin/ls && cat /etc/passwd', shell=True)\n"
                  },
                  "endColumn": 59,
                  "endLine": 43,
                  "startColumn": 1,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.Popen('/bin/ls && cat /etc/passwd', shell=True)\n\n"
                  },
                  "endLine": 44,
                  "startLine": 42
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='True')\n"
                  },
                  "endColumn": 39,
                  "endLine": 46,
                  "startColumn": 1,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "command = 'pwd'\nsubprocess.call(command, shell='True')\nsubprocess.call(command, shell='False')\n"
                  },
                  "endLine": 47,
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='False')\n"
                  },
                  "endColumn": 40,
                  "endLine": 47,
                  "startColumn": 1,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='True')\nsubprocess.call(command, shell='False')\nsubprocess.call(command, shell='None')\n"
                  },
                  "endLine": 48,
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='None')\n"
                  },
                  "endColumn": 39,
                  "endLine": 48,
                  "startColumn": 1,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='False')\nsubprocess.call(command, shell='None')\nsubprocess.call(command, shell=1)\n"
                  },
                  "endLine": 49,
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=1)\n"
                  },
                  "endColumn": 34,
                  "endLine": 49,
                  "startColumn": 1,
                  "startLine": 49
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell='None')\nsubprocess.call(command, shell=1)\n\n"
                  },
                  "endLine": 50,
                  "startLine": 48
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=Popen())\n"
                  },
                  "endColumn": 40,
                  "endLine": 51,
                  "startColumn": 1,
                  "startLine": 51
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.call(command, shell=Popen())\nsubprocess.call(command, shell=[True])\n"
                  },
                  "endLine": 52,
                  "startLine": 50
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=[True])\n"
                  },
                  "endColumn": 39,
                  "endLine": 52,
                  "startColumn": 1,
                  "startLine": 52
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=Popen())\nsubprocess.call(command, shell=[True])\nsubprocess.call(command, shell={'IS': 'True'})\n"
                  },
                  "endLine": 53,
                  "startLine": 51
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell={'IS': 'True'})\n"
                  },
                  "endColumn": 47,
                  "endLine": 53,
                  "startColumn": 1,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=[True])\nsubprocess.call(command, shell={'IS': 'True'})\nsubprocess.call(command, shell=command)\n"
                  },
                  "endLine": 54,
                  "startLine": 52
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call with shell=True identified, security issue."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=command)\n"
                  },
                  "endColumn": 40,
                  "endLine": 54,
                  "startColumn": 1,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell={'IS': 'True'})\nsubprocess.call(command, shell=command)\n\n"
                  },
                  "endLine": 55,
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=False)\n"
                  },
                  "endColumn": 38,
                  "endLine": 56,
                  "startColumn": 1,
                  "startLine": 56
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nsubprocess.call(command, shell=False)\nsubprocess.call(command, shell=0)\n"
                  },
                  "endLine": 57,
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=0)\n"
                  },
                  "endColumn": 34,
                  "endLine": 57,
                  "startColumn": 1,
                  "startLine": 57
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=False)\nsubprocess.call(command, shell=0)\nsubprocess.call(command, shell=[])\n"
                  },
                  "endLine": 58,
                  "startLine": 56
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=[])\n"
                  },
                  "endColumn": 35,
                  "endLine": 58,
                  "startColumn": 1,
                  "startLine": 58
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=0)\nsubprocess.call(command, shell=[])\nsubprocess.call(command, shell={})\n"
                  },
                  "endLine": 59,
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell={})\n"
                  },
                  "endColumn": 35,
                  "endLine": 59,
                  "startColumn": 1,
                  "startLine": 59
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=[])\nsubprocess.call(command, shell={})\nsubprocess.call(command, shell=None)\n"
                  },
                  "endLine": 60,
                  "startLine": 58
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subprocess.call(command, shell=None)\n"
                  },
                  "endColumn": 37,
                  "endLine": 60,
                  "startColumn": 1,
                  "startLine": 60
                },
                "artifactLocation": {
                  "uri": "examples/subprocess_shell.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subprocess.call(command, shell={})\nsubprocess.call(command, shell=None)\n"
                  },
                  "endLine": 60,
                  "startLine": 59
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "tarfile.extractall used without any validation. Please check and discard dangerous members."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    tar.extractall(path=tempfile.mkdtemp())\n"
                  },
                  "endColumn": 44,
                  "endLine": 8,
                  "startColumn": 5,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    tar = tarfile.open(filename)\n    tar.extractall(path=tempfile.mkdtemp())\n    tar.close()\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B202",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {'Function': 'members_filter'})."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    tar.extractall(path=tempfile.mkdtemp(), members=members_filter(tar))\n"
                  },
                  "endColumn": 73,
                  "endLine": 14,
                  "startColumn": 5,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    tar = tarfile.open(filename)\n    tar.extractall(path=tempfile.mkdtemp(), members=members_filter(tar))\n    tar.close()\n"
                  },
                  "endLine": 15,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "LOW",
            "issue_severity": "LOW"
          },
          "ruleId": "B202",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "tarfile.extractall used without any validation. Please check and discard dangerous members."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    tar.extractall(path=tempfile.mkdtemp(), filter=\"fully_trusted\")\n"
                  },
                  "endColumn": 68,
                  "endLine": 26,
                  "startColumn": 5,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    tar = tarfile.open(filename)\n    tar.extractall(path=tempfile.mkdtemp(), filter=\"fully_trusted\")\n    tar.close()\n"
                  },
                  "endLine": 27,
                  "startLine": 25
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B202",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {'Other': <ast.List object at 0x7f4572902cd0>})."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    tar.extractall(path=tempfile.mkdtemp(), members=[])\n"
                  },
                  "endColumn": 56,
                  "endLine": 32,
                  "startColumn": 5,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    tar = tarfile.open(filename)\n    tar.extractall(path=tempfile.mkdtemp(), members=[])\n    tar.close()\n"
                  },
                  "endLine": 33,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B202",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {'Other': 'tar'})."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    tarfile.extractall(path=tempfile.mkdtemp(), members=tar)\n"
                  },
                  "endColumn": 61,
                  "endLine": 38,
                  "startColumn": 5,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    tar = tarfile.open(filename)\n    tarfile.extractall(path=tempfile.mkdtemp(), members=tar)\n    tar.close()\n"
                  },
                  "endLine": 39,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B202",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "A telnet-related module is being imported.  Telnet is considered insecure. Use SSH or some other encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import telnetlib\n"
                  },
                  "endColumn": 17,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/telnetlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import telnetlib\nimport getpass\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B401",
          "ruleIndex": 52
        },
        {
          "message": {
            "text": "Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tn = telnetlib.Telnet(host)\n"
                  },
                  "endColumn": 28,
                  "endLine": 8,
                  "startColumn": 6,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/telnetlib.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "password = getpass.getpass()\ntn = telnetlib.Telnet(host)\n\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B312",
          "ruleIndex": 53
        },
        {
          "message": {
            "text": "Try, Except, Continue detected."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    except:\n"
                  },
                  "endColumn": 17,
                  "endLine": 6,
                  "startColumn": 5,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/try_except_continue.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        a = i\n    except:\n        continue\n\n"
                  },
                  "endLine": 7,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B112",
          "ruleIndex": 54
        },
        {
          "message": {
            "text": "Try, Except, Continue detected."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    except Exception:\n"
                  },
                  "endColumn": 17,
                  "endLine": 14,
                  "startColumn": 5,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/try_except_continue.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "        a = 1\n    except Exception:\n        continue\n\n"
                  },
                  "endLine": 15,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B112",
          "ruleIndex": 54
        },
        {
          "message": {
            "text": "Try, Except, Pass detected."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "except:\n"
                  },
                  "endColumn": 9,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/try_except_pass.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    a = 1\nexcept:\n    pass\n\n"
                  },
                  "endLine": 6,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B110",
          "ruleIndex": 55
        },
        {
          "message": {
            "text": "Try, Except, Pass detected."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "except Exception:\n"
                  },
                  "endColumn": 9,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/try_except_pass.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    a = 1\nexcept Exception:\n    pass\n\n"
                  },
                  "endLine": 13,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B110",
          "ruleIndex": 55
        },
        {
          "message": {
            "text": "By default, Python will create a secure, verified ssl context for use in such classes as HTTPSConnection. However, it still allows using an insecure context via the _create_unverified_context that  reverts to the previous behavior that does not validate certificates or perform hostname checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "context = ssl._create_unverified_context()\n"
                  },
                  "endColumn": 43,
                  "endLine": 7,
                  "startColumn": 11,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/unverified_context.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Incorrect: unverified context\ncontext = ssl._create_unverified_context()\n"
                  },
                  "endLine": 7,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B323",
          "ruleIndex": 56
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    urllib.request.urlopen('file:///bin/ls')\n"
                  },
                  "endColumn": 45,
                  "endLine": 17,
                  "startColumn": 5,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Python 3\n    urllib.request.urlopen('file:///bin/ls')\n    urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n"
                  },
                  "endLine": 18,
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n"
                  },
                  "endColumn": 61,
                  "endLine": 18,
                  "startColumn": 5,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    urllib.request.urlopen('file:///bin/ls')\n    urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n    opener = urllib.request.URLopener()\n"
                  },
                  "endLine": 19,
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    opener = urllib.request.URLopener()\n"
                  },
                  "endColumn": 40,
                  "endLine": 19,
                  "startColumn": 14,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n    opener = urllib.request.URLopener()\n    opener.open('file:///bin/ls')\n"
                  },
                  "endLine": 20,
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    opener = urllib.request.FancyURLopener()\n"
                  },
                  "endColumn": 45,
                  "endLine": 22,
                  "startColumn": 14,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    opener.retrieve('file:///bin/ls')\n    opener = urllib.request.FancyURLopener()\n    opener.open('file:///bin/ls')\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    six.moves.urllib.request.urlopen('file:///bin/ls')\n"
                  },
                  "endColumn": 55,
                  "endLine": 27,
                  "startColumn": 5,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # Six\n    six.moves.urllib.request.urlopen('file:///bin/ls')\n    six.moves.urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n"
                  },
                  "endLine": 28,
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    six.moves.urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n"
                  },
                  "endColumn": 71,
                  "endLine": 28,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    six.moves.urllib.request.urlopen('file:///bin/ls')\n    six.moves.urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n    opener = six.moves.urllib.request.URLopener()\n"
                  },
                  "endLine": 29,
                  "startLine": 27
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    opener = six.moves.urllib.request.URLopener()\n"
                  },
                  "endColumn": 50,
                  "endLine": 29,
                  "startColumn": 14,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    six.moves.urllib.request.urlretrieve('file:///bin/ls', '/bin/ls2')\n    opener = six.moves.urllib.request.URLopener()\n    opener.open('file:///bin/ls')\n"
                  },
                  "endLine": 30,
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    opener = six.moves.urllib.request.FancyURLopener()\n"
                  },
                  "endColumn": 55,
                  "endLine": 32,
                  "startColumn": 14,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "examples/urlopen.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    opener.retrieve('file:///bin/ls')\n    opener = six.moves.urllib.request.FancyURLopener()\n    opener.open('file:///bin/ls')\n"
                  },
                  "endLine": 33,
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B310",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "The pyCrypto library and its module DSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.PublicKey import DSA as pycrypto_dsa\n"
                  },
                  "endColumn": 49,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from cryptography.hazmat.primitives.asymmetric import rsa\nfrom Crypto.PublicKey import DSA as pycrypto_dsa\nfrom Crypto.PublicKey import RSA as pycrypto_rsa\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "The pyCrypto library and its module RSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from Crypto.PublicKey import RSA as pycrypto_rsa\n"
                  },
                  "endColumn": 49,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from Crypto.PublicKey import DSA as pycrypto_dsa\nfrom Crypto.PublicKey import RSA as pycrypto_rsa\nfrom Cryptodome.PublicKey import DSA as pycryptodomex_dsa\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B413",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "DSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "dsa.generate_private_key(key_size=1024,\n"
                  },
                  "endColumn": 61,
                  "endLine": 39,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Incorrect: weak key sizes\ndsa.generate_private_key(key_size=1024,\n                         backend=backends.default_backend())\nec.generate_private_key(curve=ec.SECT163R2,\n"
                  },
                  "endLine": 40,
                  "startLine": 37
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "EC key sizes below 224 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ec.generate_private_key(curve=ec.SECT163R2,\n"
                  },
                  "endColumn": 60,
                  "endLine": 41,
                  "startColumn": 1,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                         backend=backends.default_backend())\nec.generate_private_key(curve=ec.SECT163R2,\n                        backend=backends.default_backend())\nrsa.generate_private_key(public_exponent=65537,\n"
                  },
                  "endLine": 42,
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "rsa.generate_private_key(public_exponent=65537,\n"
                  },
                  "endColumn": 61,
                  "endLine": 43,
                  "startColumn": 1,
                  "startLine": 42
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                        backend=backends.default_backend())\nrsa.generate_private_key(public_exponent=65537,\n                         key_size=1024,\n                         backend=backends.default_backend())\npycrypto_dsa.generate(bits=1024)\n"
                  },
                  "endLine": 45,
                  "startLine": 41
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "DSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_dsa.generate(bits=1024)\n"
                  },
                  "endColumn": 33,
                  "endLine": 45,
                  "startColumn": 1,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                         backend=backends.default_backend())\npycrypto_dsa.generate(bits=1024)\npycrypto_rsa.generate(bits=1024)\n"
                  },
                  "endLine": 46,
                  "startLine": 44
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_rsa.generate(bits=1024)\n"
                  },
                  "endColumn": 33,
                  "endLine": 46,
                  "startColumn": 1,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_dsa.generate(bits=1024)\npycrypto_rsa.generate(bits=1024)\npycryptodomex_dsa.generate(bits=1024)\n"
                  },
                  "endLine": 47,
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "DSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_dsa.generate(bits=1024)\n"
                  },
                  "endColumn": 38,
                  "endLine": 47,
                  "startColumn": 1,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_rsa.generate(bits=1024)\npycryptodomex_dsa.generate(bits=1024)\npycryptodomex_rsa.generate(bits=1024)\n"
                  },
                  "endLine": 48,
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 2048 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_rsa.generate(bits=1024)\n"
                  },
                  "endColumn": 38,
                  "endLine": 48,
                  "startColumn": 1,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycryptodomex_dsa.generate(bits=1024)\npycryptodomex_rsa.generate(bits=1024)\n\n"
                  },
                  "endLine": 49,
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "DSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "dsa.generate_private_key(512,\n"
                  },
                  "endColumn": 53,
                  "endLine": 52,
                  "startColumn": 1,
                  "startLine": 51
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Also incorrect: without keyword args\ndsa.generate_private_key(512,\n                         backends.default_backend())\nec.generate_private_key(ec.SECT163R2,\n"
                  },
                  "endLine": 53,
                  "startLine": 50
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "EC key sizes below 224 bits are considered breakable. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "ec.generate_private_key(ec.SECT163R2,\n"
                  },
                  "endColumn": 52,
                  "endLine": 54,
                  "startColumn": 1,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                         backends.default_backend())\nec.generate_private_key(ec.SECT163R2,\n                        backends.default_backend())\nrsa.generate_private_key(3,\n"
                  },
                  "endLine": 55,
                  "startLine": 52
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "rsa.generate_private_key(3,\n"
                  },
                  "endColumn": 53,
                  "endLine": 56,
                  "startColumn": 1,
                  "startLine": 55
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                        backends.default_backend())\nrsa.generate_private_key(3,\n                         512,\n                         backends.default_backend())\npycrypto_dsa.generate(512)\n"
                  },
                  "endLine": 58,
                  "startLine": 54
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "DSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_dsa.generate(512)\n"
                  },
                  "endColumn": 27,
                  "endLine": 58,
                  "startColumn": 1,
                  "startLine": 58
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                         backends.default_backend())\npycrypto_dsa.generate(512)\npycrypto_rsa.generate(512)\n"
                  },
                  "endLine": 59,
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycrypto_rsa.generate(512)\n"
                  },
                  "endColumn": 27,
                  "endLine": 59,
                  "startColumn": 1,
                  "startLine": 59
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_dsa.generate(512)\npycrypto_rsa.generate(512)\npycryptodomex_dsa.generate(512)\n"
                  },
                  "endLine": 60,
                  "startLine": 58
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "DSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_dsa.generate(512)\n"
                  },
                  "endColumn": 32,
                  "endLine": 60,
                  "startColumn": 1,
                  "startLine": 60
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycrypto_rsa.generate(512)\npycryptodomex_dsa.generate(512)\npycryptodomex_rsa.generate(512)\n"
                  },
                  "endLine": 61,
                  "startLine": 59
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "RSA key sizes below 1024 bits are considered breakable. "
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "pycryptodomex_rsa.generate(512)\n"
                  },
                  "endColumn": 32,
                  "endLine": 61,
                  "startColumn": 1,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "pycryptodomex_dsa.generate(512)\npycryptodomex_rsa.generate(512)\n\n"
                  },
                  "endLine": 62,
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B505",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "Consider possible security implications associated with the subprocess module."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import subprocess as subp\n"
                  },
                  "endColumn": 26,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import os as o\nimport subprocess as subp\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B404",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Possible wildcard injection in call: os.system"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.system(\"/bin/tar xvzf *\")\n"
                  },
                  "endColumn": 28,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Vulnerable to wildcard injection\no.system(\"/bin/tar xvzf *\")\no.system('/bin/chown *')\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B609",
          "ruleIndex": 59
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.system(\"/bin/tar xvzf *\")\n"
                  },
                  "endColumn": 28,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Vulnerable to wildcard injection\no.system(\"/bin/tar xvzf *\")\no.system('/bin/chown *')\n"
                  },
                  "endLine": 6,
                  "startLine": 4
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Possible wildcard injection in call: os.system"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.system('/bin/chown *')\n"
                  },
                  "endColumn": 25,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.system(\"/bin/tar xvzf *\")\no.system('/bin/chown *')\no.popen2('/bin/chmod *')\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B609",
          "ruleIndex": 59
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.system('/bin/chown *')\n"
                  },
                  "endColumn": 25,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.system(\"/bin/tar xvzf *\")\no.system('/bin/chown *')\no.popen2('/bin/chmod *')\n"
                  },
                  "endLine": 7,
                  "startLine": 5
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Possible wildcard injection in call: os.popen2"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.popen2('/bin/chmod *')\n"
                  },
                  "endColumn": 25,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.system('/bin/chown *')\no.popen2('/bin/chmod *')\nsubp.Popen('/bin/chown *', shell=True)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B609",
          "ruleIndex": 59
        },
        {
          "message": {
            "text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.popen2('/bin/chmod *')\n"
                  },
                  "endColumn": 25,
                  "endLine": 7,
                  "startColumn": 1,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.system('/bin/chown *')\no.popen2('/bin/chmod *')\nsubp.Popen('/bin/chown *', shell=True)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B605",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Possible wildcard injection in call: subprocess.Popen"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen('/bin/chown *', shell=True)\n"
                  },
                  "endColumn": 39,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.popen2('/bin/chmod *')\nsubp.Popen('/bin/chown *', shell=True)\n\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "HIGH"
          },
          "ruleId": "B609",
          "ruleIndex": 59
        },
        {
          "message": {
            "text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell"
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen('/bin/chown *', shell=True)\n"
                  },
                  "endColumn": 39,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "o.popen2('/bin/chmod *')\nsubp.Popen('/bin/chown *', shell=True)\n\n"
                  },
                  "endLine": 9,
                  "startLine": 7
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B602",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen('/bin/rsync *')\n"
                  },
                  "endColumn": 27,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# Not vulnerable to wildcard injection\nsubp.Popen('/bin/rsync *')\nsubp.Popen(\"/bin/chmod *\")\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen(\"/bin/chmod *\")\n"
                  },
                  "endColumn": 27,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subp.Popen('/bin/rsync *')\nsubp.Popen(\"/bin/chmod *\")\nsubp.Popen(['/bin/chown', '*'])\n"
                  },
                  "endLine": 13,
                  "startLine": 11
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen(['/bin/chown', '*'])\n"
                  },
                  "endColumn": 32,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subp.Popen(\"/bin/chmod *\")\nsubp.Popen(['/bin/chown', '*'])\nsubp.Popen([\"/bin/chmod\", sys.argv[1], \"*\"],\n"
                  },
                  "endLine": 14,
                  "startLine": 12
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "subprocess call - check for execution of untrusted input."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "subp.Popen([\"/bin/chmod\", sys.argv[1], \"*\"],\n"
                  },
                  "endColumn": 64,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "subp.Popen(['/bin/chown', '*'])\nsubp.Popen([\"/bin/chmod\", sys.argv[1], \"*\"],\n                 stdin=subprocess.PIPE, stdout=subprocess.PIPE)\no.spawnvp(os.P_WAIT, 'tar', ['tar', 'xvzf', '*'])\n"
                  },
                  "endLine": 16,
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B603",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "Starting a process without a shell."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "o.spawnvp(os.P_WAIT, 'tar', ['tar', 'xvzf', '*'])\n"
                  },
                  "endColumn": 50,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "                 stdin=subprocess.PIPE, stdout=subprocess.PIPE)\no.spawnvp(os.P_WAIT, 'tar', ['tar', 'xvzf', '*'])\n"
                  },
                  "endLine": 16,
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW"
          },
          "ruleId": "B606",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "Using xml.etree.cElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.cElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xml.etree.cElementTree as badET\n"
                  },
                  "endColumn": 39,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.etree.cElementTree as badET\nimport defusedxml.cElementTree as goodET\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B405",
          "ruleIndex": 60
        },
        {
          "message": {
            "text": "Using xml.etree.cElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.cElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tree = badET.fromstring(xmlString)\n"
                  },
                  "endColumn": 35,
                  "endLine": 7,
                  "startColumn": 8,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# unsafe\ntree = badET.fromstring(xmlString)\nprint(tree)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B313",
          "ruleIndex": 61
        },
        {
          "message": {
            "text": "Using xml.etree.cElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.cElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "badET.parse('filethatdoesntexist.xml')\n"
                  },
                  "endColumn": 39,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(tree)\nbadET.parse('filethatdoesntexist.xml')\nbadET.iterparse('filethatdoesntexist.xml')\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B313",
          "ruleIndex": 61
        },
        {
          "message": {
            "text": "Using xml.etree.cElementTree.iterparse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.cElementTree.iterparse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "badET.iterparse('filethatdoesntexist.xml')\n"
                  },
                  "endColumn": 43,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "badET.parse('filethatdoesntexist.xml')\nbadET.iterparse('filethatdoesntexist.xml')\na = badET.XMLParser()\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B313",
          "ruleIndex": 61
        },
        {
          "message": {
            "text": "Using xml.etree.cElementTree.XMLParser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.cElementTree.XMLParser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badET.XMLParser()\n"
                  },
                  "endColumn": 22,
                  "endLine": 11,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "badET.iterparse('filethatdoesntexist.xml')\na = badET.XMLParser()\n\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B313",
          "ruleIndex": 61
        },
        {
          "message": {
            "text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xml.etree.ElementTree as badET\n"
                  },
                  "endColumn": 38,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.etree.ElementTree as badET\nimport defusedxml.ElementTree as goodET\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B405",
          "ruleIndex": 60
        },
        {
          "message": {
            "text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "tree = badET.fromstring(xmlString)\n"
                  },
                  "endColumn": 35,
                  "endLine": 7,
                  "startColumn": 8,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "# unsafe\ntree = badET.fromstring(xmlString)\nprint(tree)\n"
                  },
                  "endLine": 8,
                  "startLine": 6
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B314",
          "ruleIndex": 62
        },
        {
          "message": {
            "text": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "badET.parse('filethatdoesntexist.xml')\n"
                  },
                  "endColumn": 39,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "print(tree)\nbadET.parse('filethatdoesntexist.xml')\nbadET.iterparse('filethatdoesntexist.xml')\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B314",
          "ruleIndex": 62
        },
        {
          "message": {
            "text": "Using xml.etree.ElementTree.iterparse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.iterparse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "badET.iterparse('filethatdoesntexist.xml')\n"
                  },
                  "endColumn": 43,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "badET.parse('filethatdoesntexist.xml')\nbadET.iterparse('filethatdoesntexist.xml')\na = badET.XMLParser()\n"
                  },
                  "endLine": 11,
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B314",
          "ruleIndex": 62
        },
        {
          "message": {
            "text": "Using xml.etree.ElementTree.XMLParser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.XMLParser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badET.XMLParser()\n"
                  },
                  "endColumn": 22,
                  "endLine": 11,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "badET.iterparse('filethatdoesntexist.xml')\na = badET.XMLParser()\n\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B314",
          "ruleIndex": 62
        },
        {
          "message": {
            "text": "Using xml.dom.expatbuilder to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.expatbuilder with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xml.dom.expatbuilder as bad\n"
                  },
                  "endColumn": 35,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_expatbuilder.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.dom.expatbuilder as bad\nimport defusedxml.expatbuilder as good\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B407",
          "ruleIndex": 63
        },
        {
          "message": {
            "text": "Using xml.dom.expatbuilder.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.expatbuilder.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad.parse('filethatdoesntexist.xml')\n"
                  },
                  "endColumn": 37,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/xml_expatbuilder.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nbad.parse('filethatdoesntexist.xml')\ngood.parse('filethatdoesntexist.xml')\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B316",
          "ruleIndex": 64
        },
        {
          "message": {
            "text": "Using xml.dom.expatbuilder.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.expatbuilder.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "bad.parseString(xmlString)\n"
                  },
                  "endColumn": 27,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/xml_expatbuilder.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nbad.parseString(xmlString)\ngood.parseString(xmlString)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B316",
          "ruleIndex": 64
        },
        {
          "message": {
            "text": "Using xml.sax.expatreader to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.expatreader with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xml.sax.expatreader as bad\n"
                  },
                  "endColumn": 34,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_expatreader.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.sax.expatreader as bad\nimport defusedxml.expatreader as good\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B406",
          "ruleIndex": 65
        },
        {
          "message": {
            "text": "Using xml.sax.expatreader.create_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.expatreader.create_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "p = bad.create_parser()\n"
                  },
                  "endColumn": 24,
                  "endLine": 4,
                  "startColumn": 5,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "examples/xml_expatreader.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\np = bad.create_parser()\nb = good.create_parser()\n"
                  },
                  "endLine": 5,
                  "startLine": 3
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B315",
          "ruleIndex": 66
        },
        {
          "message": {
            "text": "Using parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace parseString with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from xml.dom.minidom import parseString as badParseString\n"
                  },
                  "endColumn": 58,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from xml.dom.minidom import parseString as badParseString\nfrom defusedxml.minidom import parseString as goodParseString\na = badParseString(\"<myxml>Some data some more data</myxml>\")\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B408",
          "ruleIndex": 67
        },
        {
          "message": {
            "text": "Using xml.dom.minidom.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.minidom.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badParseString(\"<myxml>Some data some more data</myxml>\")\n"
                  },
                  "endColumn": 62,
                  "endLine": 3,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from defusedxml.minidom import parseString as goodParseString\na = badParseString(\"<myxml>Some data some more data</myxml>\")\nprint(a)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B318",
          "ruleIndex": 68
        },
        {
          "message": {
            "text": "Using parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace parse with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from xml.dom.minidom import parse as badParse\n"
                  },
                  "endColumn": 46,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nfrom xml.dom.minidom import parse as badParse\nfrom defusedxml.minidom import parse as goodParse\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B408",
          "ruleIndex": 67
        },
        {
          "message": {
            "text": "Using xml.dom.minidom.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.minidom.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badParse(\"somfilethatdoesntexist.xml\")\n"
                  },
                  "endColumn": 43,
                  "endLine": 11,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from defusedxml.minidom import parse as goodParse\na = badParse(\"somfilethatdoesntexist.xml\")\nprint(a)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B318",
          "ruleIndex": 68
        },
        {
          "message": {
            "text": "Using parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace parseString with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from xml.dom.pulldom import parseString as badParseString\n"
                  },
                  "endColumn": 58,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from xml.dom.pulldom import parseString as badParseString\nfrom defusedxml.pulldom import parseString as goodParseString\na = badParseString(\"<myxml>Some data some more data</myxml>\")\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B409",
          "ruleIndex": 69
        },
        {
          "message": {
            "text": "Using xml.dom.pulldom.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.pulldom.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badParseString(\"<myxml>Some data some more data</myxml>\")\n"
                  },
                  "endColumn": 62,
                  "endLine": 3,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from defusedxml.pulldom import parseString as goodParseString\na = badParseString(\"<myxml>Some data some more data</myxml>\")\nprint(a)\n"
                  },
                  "endLine": 4,
                  "startLine": 2
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B319",
          "ruleIndex": 70
        },
        {
          "message": {
            "text": "Using parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace parse with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from xml.dom.pulldom import parse as badParse\n"
                  },
                  "endColumn": 46,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nfrom xml.dom.pulldom import parse as badParse\nfrom defusedxml.pulldom import parse as goodParse\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B409",
          "ruleIndex": 69
        },
        {
          "message": {
            "text": "Using xml.dom.pulldom.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.pulldom.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a = badParse(\"somfilethatdoesntexist.xml\")\n"
                  },
                  "endColumn": 43,
                  "endLine": 11,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from defusedxml.pulldom import parse as goodParse\na = badParse(\"somfilethatdoesntexist.xml\")\nprint(a)\n"
                  },
                  "endLine": 12,
                  "startLine": 10
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B319",
          "ruleIndex": 70
        },
        {
          "message": {
            "text": "Using xml.sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xml.sax\n"
                  },
                  "endColumn": 15,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.sax\nfrom xml import sax\nimport defusedxml.sax\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B406",
          "ruleIndex": 65
        },
        {
          "message": {
            "text": "Using sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace sax with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from xml import sax\n"
                  },
                  "endColumn": 20,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xml.sax\nfrom xml import sax\nimport defusedxml.sax\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW"
          },
          "ruleId": "B406",
          "ruleIndex": 65
        },
        {
          "message": {
            "text": "Using xml.sax.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    xml.sax.parseString(xmlString, ExampleContentHandler())\n"
                  },
                  "endColumn": 60,
                  "endLine": 21,
                  "startColumn": 5,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # bad\n    xml.sax.parseString(xmlString, ExampleContentHandler())\n    xml.sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler())\n"
                  },
                  "endLine": 22,
                  "startLine": 20
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xml.sax.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    xml.sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler())\n"
                  },
                  "endColumn": 72,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    xml.sax.parseString(xmlString, ExampleContentHandler())\n    xml.sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler())\n    sax.parseString(xmlString, ExampleContentHandler())\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xml.sax.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    sax.parseString(xmlString, ExampleContentHandler())\n"
                  },
                  "endColumn": 56,
                  "endLine": 23,
                  "startColumn": 5,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    xml.sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler())\n    sax.parseString(xmlString, ExampleContentHandler())\n    sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler)\n"
                  },
                  "endLine": 24,
                  "startLine": 22
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xml.sax.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler)\n"
                  },
                  "endColumn": 66,
                  "endLine": 24,
                  "startColumn": 5,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    sax.parseString(xmlString, ExampleContentHandler())\n    sax.parse('notaxmlfilethatexists.xml', ExampleContentHandler)\n\n"
                  },
                  "endLine": 25,
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    xml.sax.make_parser()\n"
                  },
                  "endColumn": 26,
                  "endLine": 30,
                  "startColumn": 5,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    # bad\n    xml.sax.make_parser()\n    sax.make_parser()\n"
                  },
                  "endLine": 31,
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    sax.make_parser()\n"
                  },
                  "endColumn": 22,
                  "endLine": 31,
                  "startColumn": 5,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "examples/xml_sax.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    xml.sax.make_parser()\n    sax.make_parser()\n    print('nothing')\n"
                  },
                  "endLine": 32,
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B317",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Using xmlrpc to parse untrusted XML data is known to be vulnerable to XML attacks. Use defusedxml.xmlrpc.monkey_patch() function to monkey-patch xmlrpclib and mitigate XML vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "import xmlrpc\n"
                  },
                  "endColumn": 14,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "examples/xml_xmlrpc.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "import xmlrpc\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\n\n"
                  },
                  "endLine": 3,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH"
          },
          "ruleId": "B411",
          "ruleIndex": 71
        },
        {
          "message": {
            "text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load()."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    y = yaml.load(ystr)\n"
                  },
                  "endColumn": 24,
                  "endLine": 9,
                  "startColumn": 9,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "examples/yaml_load.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    ystr = yaml.dump({'a': 1, 'b': 2, 'c': 3})\n    y = yaml.load(ystr)\n    yaml.dump(y)\n"
                  },
                  "endLine": 10,
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B506",
          "ruleIndex": 31
        },
        {
          "message": {
            "text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load()."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "yaml.load(\"{}\", Loader=yaml.Loader)\n"
                  },
                  "endColumn": 36,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "examples/yaml_load.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\nyaml.load(\"{}\", Loader=yaml.Loader)\n\n"
                  },
                  "endLine": 23,
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM"
          },
          "ruleId": "B506",
          "ruleIndex": 31
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json"
}