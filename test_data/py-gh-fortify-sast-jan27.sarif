{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Fortify on Demand",
          "version": "SCA 24.2.0.0150; Rulepack 2024.1.0.0008",
          "rules": [
            {
              "id": "11BF839E-A56A-4CA7-BFD2-9AC137C69F060",
              "shortDescription": {
                "text": "Command Injection"
              },
              "fullDescription": {
                "text": "## Command Injection\n\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker.\n"
              },
              "help": {
                "text": "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property `APPHOME` to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\n    ...\n    home = os.getenv('APPHOME')\n    cmd = home.join(INITCMD)\n    os.system(cmd);\n    ...\n\n\nThe code in `Example 1` allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property `APPHOME` to point to a different path containing a malicious version of `INITCMD`. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property `APPHOME`, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the `rman` utility and then run a `cleanup.bat` script to delete some temporary files. The script `rmanDB.bat` accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n\n    ...\n    btype = req.field('backuptype')\n    cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" + btype + \"&&c:\\\\util\\\\cleanup.bat\\\"\"\n    os.system(cmd);\n    ...\n\n\nThe problem here is that the program does not do any validation on the `backuptype` parameter read from the user. Typically the `Runtime.exec()` function will not execute multiple commands, but in this case the program first runs the `cmd.exe` shell in order to run multiple commands with a single call to `Runtime.exec()`. After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form `\"&amp;&amp; del c:\\\\dbms\\\\*.*\"`, then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a `make` command in the `/var/yp` directory.\n\n\n\n    ...\n    result = os.system(\"make\");\n    ...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to `os.system()`. If an attacker can modify the `$PATH` variable to point to a malicious binary called `make` and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's `make` will now be run with these privileges, possibly giving the attacker complete control of the system.\n\n## Recommendations\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n## Tips\n\nNot available\n\n## References\n\n1. CWE ID 77, CWE ID 78, Standards Mapping - Common Weakness Enumeration\n2. [11] CWE ID 078, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [10] CWE ID 078, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [5] CWE ID 078, [25] CWE ID 077, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. CCI-001310, CCI-002754, Standards Mapping - DISA Control Correlation Identifier Version 2\n6. SI, Standards Mapping - FIPS200\n7. Indirect Access to Sensitive Data, Standards Mapping - General Data Protection Regulation\n8. Rule 1.3, Standards Mapping - MISRA C 2012\n9. Rule 0-3-1, Standards Mapping - MISRA C++ 2008\n10. SI-10 Information Input Validation (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SI-10 Information Input Validation, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 5.2.2 Sanitization and Sandboxing Requirements (L1 L2 L3), 5.2.3 Sanitization and Sandboxing Requirements (L1 L2 L3), 5.2.5 Sanitization and Sandboxing Requirements (L1 L2 L3), 5.2.8 Sanitization and Sandboxing Requirements (L1 L2 L3), 5.3.6 Output Encoding and Injection Prevention Requirements (L1 L2 L3), 5.3.8 Output Encoding and Injection Prevention Requirements (L1 L2 L3), 10.3.2 Deployed Application Integrity Controls (L1 L2 L3), 12.3.2 File Execution Requirements (L1 L2 L3), 12.3.5 File Execution Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-CODE-4, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M7 Client Side Injection, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A6 Injection Flaws, Standards Mapping - OWASP Top 10 2004\n18. A2 Injection Flaws, Standards Mapping - OWASP Top 10 2007\n19. A1 Injection, Standards Mapping - OWASP Top 10 2010\n20. A1 Injection, Standards Mapping - OWASP Top 10 2013\n21. A1 Injection, Standards Mapping - OWASP Top 10 2017\n22. A03 Injection, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.1, Requirement 6.5.2, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 4.2 - Critical Asset Protection, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 4.2 - Critical Asset Protection, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 4.2 - Critical Asset Protection, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Control Objective C.3.2 - Web Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Insecure Interaction - CWE ID 078, Standards Mapping - SANS Top 25 2009\n35. Insecure Interaction - CWE ID 078, Standards Mapping - SANS Top 25 2010\n36. Insecure Interaction - CWE ID 078, Standards Mapping - SANS Top 25 2011\n37. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3510 CAT I, APP3570 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-002510 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-002510 CAT I, APSC-DV-002530 CAT II, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. OS Commanding, Standards Mapping - Web Application Security Consortium 24 + 2\n59. OS Commanding (WASC-31), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "28AC7755-F497-4170-A394-8404B81A92A9",
              "shortDescription": {
                "text": "Encoding Confusion: BiDi Control Characters"
              },
              "fullDescription": {
                "text": "## Encoding Confusion: BiDi Control Characters\n\nBidirectional control characters in source code can lead to trojan source attacks.\n"
              },
              "help": {
                "text": "Source code that contains Unicode bidirectional override control characters can be a sign of an insider threat attack. Such an attack can be leveraged through the supply chain for programming languages such as C, C++, C#, Go, Java, JavaScript, Python, and Rust. Several variant attacks are already published by Nicholas Boucher and Ross Anderson, including the following: Early Returns, Commenting-Out, and Stretched Strings.\n\nExample 1: The following code exhibits a control character, present in a C source code file, which leads to an Early Return attack:\n\n\n    #include <stdio.h>\n    \n    int main() {\n    /* Nothing to see here; newline RLI /*/ return 0 ;\n    printf(\"Do we get here?\n\");\n    return 0;\n    }\n\nThe Right-to-Left Isolate (RLI) Unicode bidirectional control character, in `Example 1`, causes the code to be viewed as the following:\n\n\n    #include <stdio.h>\n    \n    int main() {\n    /* Nothing to see here; newline; return 0 /*/\n    printf(\"Do we get here?\n\");\n    return 0;\n    }\n\nOf particular note is that a developer who performs a code review, in a vulnerable editor/viewer, would not visibly see what a vulnerable compiler will process. Specifically, the early return statement that modifies the program flow.\n\n## Recommendations\n\nFortify recommends the following:\n(1) Identify all Unicode bidirectional (BiDi) control characters in source code files within a software supply chain.\n(2) Review and eliminate all unnecessary BiDi control characters from source files.\n(3) Report any identified malicious Unicode BiDi control character usage to your cyber security team.\n(4) Review compilers, interpreters, and source code/viewers editors for vulnerabilities related to either interpreting or viewing Unicode BiDi control characters.\n(5) Apply any necessary patches for compilers, interpreters, and source code editors/viewers.\n\n\n## Tips\n\nNot available\n\n## References\n\n1. Trojan Source: Invisible Vulnerabilities, Nicholas Boucher, and R. Anderson, https://www.trojansource.codes/trojan-source.pdf\n2. CWE ID 451, Standards Mapping - Common Weakness Enumeration\n3. A1 Injection, Standards Mapping - OWASP Top 10 2017\n4. A03 Injection, Standards Mapping - OWASP Top 10 2021\n5. SWC-130, Standards Mapping - Smart Contract Weakness Classification\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
              "shortDescription": {
                "text": "Insecure Randomness"
              },
              "fullDescription": {
                "text": "## Insecure Randomness\n\nStandard pseudorandom number generators cannot withstand cryptographic attacks.\n"
              },
              "help": {
                "text": "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n\n    def genReceiptURL(self,baseURL):\n    randNum = random.random()\n    receiptURL = baseURL + randNum + \".html\"\n    return receiptURL\n\n\nThis code uses the `rand()` function to generate \"unique\" identifiers for the receipt pages it generates. Since `rand()` is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\n## Recommendations\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n## Tips\n\nNot available\n\n## References\n\n1. Building Secure Software, J. Viega, G. McGraw\n2. CWE ID 338, Standards Mapping - Common Weakness Enumeration\n3. CCI-002450, Standards Mapping - DISA Control Correlation Identifier Version 2\n4. MP, Standards Mapping - FIPS200\n5. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n6. SC-13 Cryptographic Protection (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n7. SC-13 Cryptographic Protection, Standards Mapping - NIST Special Publication 800-53 Revision 5\n8. 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 3.2.2 Session Binding Requirements (L1 L2 L3), 3.2.4 Session Binding Requirements (L2 L3), 6.3.1 Random Values (L2 L3), 6.3.2 Random Values (L2 L3), 6.3.3 Random Values (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n9. MASVS-CRYPTO-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n10. M6 Broken Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n11. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n12. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n13. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n14. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n15. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n16. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n17. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n18. Requirement 6.3.1.3, Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n19. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n20. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n21. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n22. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n23. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n24. Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n25. Control Objective 7.3 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n26. Control Objective 7.3 - Use of Cryptography, Control Objective B.2.4 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n27. Control Objective 7.3 - Use of Cryptography, Control Objective B.2.4 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n28. Porous Defenses - CWE ID 330, Standards Mapping - SANS Top 25 2009\n29. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n30. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n31. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n32. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n33. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n34. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n35. APP3150.2 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n36. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n37. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n38. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n39. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n40. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n41. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n42. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n43. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n44. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n45. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n46. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n47. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n48. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n49. APSC-DV-002010 CAT II, APSC-DV-002050 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "E8308B29-498A-4DDC-9661-AFD14E98A230",
              "shortDescription": {
                "text": "Insecure SSL: Server Identity Verification Disabled"
              },
              "fullDescription": {
                "text": "## Insecure SSL: Server Identity Verification Disabled\n\nServer identity verification is disabled when making SSL connections.\n"
              },
              "help": {
                "text": "In some libraries that use SSL connections, it is possible to disable server certificate verification. This is equivalent to trusting all certificates.\n\nExample 1: This application does not verify server certificate by default:\n\n\n\n    ...\n    import ssl\n    ssl_sock = ssl.wrap_socket(s)\n    ...\n\n\nWhen trying to connect to a valid host, this application would readily accept a certificate issued to \"hackedserver.com\". The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.\n\n## Recommendations\n\nDo not forget server verification checks when making SSL connections. Depending on the library used, make sure to verify server identity and establish a secure SSL connection.\n\nExample 2: This application does explicitly verify the server certificate.\n\n\n\n    ...\n    ssl_sock = ssl.wrap_socket(s, ca_certs=\"/etc/ca_certs_file\", cert_reqs=ssl.CERT_REQUIRED)\n    ...\n\n\n\n## Tips\n\nNot available\n\n## References\n\n1. RFC 6125: Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS), P. Saint-Andre and J. Hodges, https://tools.ietf.org/html/rfc6125\n2. PEP 476 - Enabling certificate verification by default for stdlib http clients., Python Software Foundation, https://www.python.org/dev/peps/pep-0476/\n3. CWE ID 297, Standards Mapping - Common Weakness Enumeration\n4. [13] CWE ID 287, [25] CWE ID 295, Standards Mapping - Common Weakness Enumeration Top 25 2019\n5. [14] CWE ID 287, Standards Mapping - Common Weakness Enumeration Top 25 2020\n6. [14] CWE ID 287, Standards Mapping - Common Weakness Enumeration Top 25 2021\n7. [14] CWE ID 287, Standards Mapping - Common Weakness Enumeration Top 25 2022\n8. [13] CWE ID 287, Standards Mapping - Common Weakness Enumeration Top 25 2023\n9. CCI-000185, CCI-001941, CCI-001942, CCI-002418, CCI-002420, CCI-002421, CCI-002422, Standards Mapping - DISA Control Correlation Identifier Version 2\n10. CM, SC, Standards Mapping - FIPS200\n11. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n12. SC-8 Transmission Confidentiality and Integrity (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n13. SC-8 Transmission Confidentiality and Integrity, Standards Mapping - NIST Special Publication 800-53 Revision 5\n14. API8 Security Misconfiguration, Standards Mapping - OWASP API Top 10 2023\n15. 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.2.1 Algorithms (L1 L2 L3), 9.2.1 Server Communications Security Requirements (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n16. MASVS-NETWORK-1, MASVS-PLATFORM-2, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n17. M3 Insufficient Transport Layer Protection, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n18. M5 Insecure Communication, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n19. M5 Insecure Communication, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n20. A3 Broken Authentication and Session Management, Standards Mapping - OWASP Top 10 2004\n21. A9 Insecure Communications, Standards Mapping - OWASP Top 10 2007\n22. A9 Insufficient Transport Layer Protection, Standards Mapping - OWASP Top 10 2010\n23. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n24. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n25. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n26. Requirement 4.1, Requirement 6.5.10, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n27. Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n28. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n29. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n30. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n31. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n32. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n33. Requirement 4.2.1, Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n34. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n35. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n36. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Control Objective C.4.1 - Web Software Communications, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n37. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-000590 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001810 CAT I, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. Information Leakage, Standards Mapping - Web Application Security Consortium 24 + 2\n59. Insufficient Transport Layer Protection (WASC-04), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "580AE6A3-5731-4F1E-B64D-2E29C029B3FE",
              "shortDescription": {
                "text": "Insecure Temporary File"
              },
              "fullDescription": {
                "text": "## Insecure Temporary File\n\nCreating and using insecure temporary files can leave application and system data vulnerable to attacks.\n"
              },
              "help": {
                "text": "Applications require temporary files so frequently that many different mechanisms exist for creating them. Most of these functions are vulnerable to various forms of attacks.\n\nExample: The following code uses a temporary file for storing intermediate data gathered from the network before it is processed.\n\n\n\n    ...\n    try:\n    tmp_filename = os.tempnam()\n    tmp_file = open(tmp_filename, 'w')\n    data = s.recv(4096)\n    while True:\n    more = s.recv(4096)\n    tmp_file.write(more)\n    if not more:\n    break\n    except socket.timeout:\n    errMsg = \"Connection timed-out while connecting\"\n    self.logger.exception(errMsg)\n    raise Exception\n    ...\n\n\nThis otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks.\n\nMethods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant. See the Recommendations section for information about safe core language functions and advice regarding a secure approach to creating temporary files.\n\nThe functions designed to aid in the creation of temporary files can be broken into two groups based on whether they simply provide a filename or actually open a new file.\n\nGroup 1 - \"Unique\" Filenames:\n\nThe first group of functions designed to help with the process of creating temporary files do so by generating a unique file name for a new temporary file, which the program is then supposed to open. This group of functions suffers from an underlying race condition on the filename chosen. Although the functions guarantee that the filename is unique at the time it is selected, there is no mechanism to prevent another process or an attacker from creating a file with the same name after it is selected but before the application attempts to open the file. Beyond the risk of a legitimate collision caused by another call to the same function, there is a high probability that an attacker will be able to create a malicious collision because the filenames generated by these functions are not sufficiently randomized to make them difficult to guess.\n\nIf a file with the selected name is created, then depending on how the file is opened the existing contents or access permissions of the file may remain intact. If the existing contents of the file are malicious in nature, an attacker may be able to inject dangerous data into the application when it reads data back from the temporary file. If an attacker pre-creates the file with relaxed access permissions, then data stored in the temporary file by the application may be accessed, modified or corrupted by an attacker. On Unix based systems an even more insidious attack is possible if the attacker pre-creates the file as a link to another important file. Then, if the application truncates or writes data to the file, it may unwittingly perform damaging operations for the attacker. This is an especially serious threat if the program operates with elevated permissions.\n\nFinally, in the best case the file will be opened with a call to `open()` using the `os.O_CREAT` and `os.O_EXCL` flags, which will fail if the file already exists and therefore prevent the types of attacks described previously. However, if an attacker is able to accurately predict a sequence of temporary file names, then the application may be prevented from opening necessary temporary storage causing a denial of service (DoS) attack. This type of attack would not be difficult to mount given the small amount of randomness used in the selection of the filenames generated by these functions.\n\nGroup 2 - \"Unique\" Files:\n\nThe second group of functions attempts to resolve some of the security problems related to temporary files by not only generating a unique file name, but also opening the file. This group includes functions like `tmpfile()`.\n\nThe `tmpfile()` style functions construct a unique filename and open it in the same way that `open()` would if passed the flags `\"wb+\"`, that is, as a binary file in read/write mode. If the file already exists, `tmpfile()` will truncate it to size zero, possibly in an attempt to assuage the security concerns mentioned earlier regarding the race condition that exists between the selection of a supposedly unique filename and the subsequent opening of the selected file. However, this behavior clearly does not solve the function's security problems. First, an attacker may pre-create the file with relaxed access-permissions that will likely be retained by the file opened by `tmpfile()`. Furthermore, on Unix based systems if the attacker pre-creates the file as a link to another important file, the application may use its possibly elevated permissions to truncate that file, thereby doing damage on behalf of the attacker. Finally, if `tmpfile()` does create a new file, the access permissions applied to that file will vary from one operating system to another, which can leave application data vulnerable even if an attacker is unable to predict the filename to be used in advance.\n\n## Recommendations\n\nUsage of `tempfile.mkstemp()` and `tempfile.mkdtemp()` are the best choices for temporary file creation among the functions offered out-of-the-box. Both functions create a temporary file in the most secure manner possible. There are no race conditions in the file's creation, assuming that the platform properly implements the `os.O_EXCL` flag for `os.open()`. The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one. The file descriptor is not inherited by child processes.\n\n## Tips\n\nNot available\n\n## References\n\n1. Yarrow: A secure pseudorandom number generator, B. Schneier, http://www.schneier.com/yarrow.html\n2. Python Library Reference: os, https://docs.python.org/2/library/os.html\n3. Python Library Reference: tempfile, https://docs.python.org/2/library/tempfile.html\n4. Symlink race, http://en.wikipedia.org/wiki/Symlink_race\n5. Time of check to time of use, http://en.wikipedia.org/wiki/Time_of_check_to_time_of_use\n6. CWE ID 377, Standards Mapping - Common Weakness Enumeration\n7. CCI-001090, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. Indirect Access to Sensitive Data, Standards Mapping - General Data Protection Regulation\n9. SC-4 Information in Shared Resources (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n10. SC-4 Information in Shared System Resources, Standards Mapping - NIST Special Publication 800-53 Revision 5\n11. Requirement 3.3.1, Requirement 3.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n12. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n13. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n14. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n15. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n16. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n17. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n18. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n19. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n20. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n21. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n22. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n23. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n24. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n25. APSC-DV-002380 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "8134B8CD-6059-4A40-A926-DD1F47BD3D2E",
              "shortDescription": {
                "text": "Insecure Transport: Weak SSL Protocol"
              },
              "fullDescription": {
                "text": "## Insecure Transport: Weak SSL Protocol\n\nThe SSLv2, SSLv23, SSLv3, TLSv1.0, and TLSv1.1 protocols contain flaws that make them insecure and should not be used to transmit sensitive data.\n"
              },
              "help": {
                "text": "The Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols provide a protection mechanism to ensure the authenticity, confidentiality, and integrity of data transmitted between a client and web server. Both TLS and SSL have undergone revisions resulting in periodic version updates. Each new revision is designed to address the security weaknesses discovered in previous versions. Use of an insecure version of TLS/SSL weakens the data protection strength and might allow an attacker to compromise, steal, or modify sensitive information.\n\nWeak versions of TLS/SSL might exhibit one or more of the following properties:\n\n- No protection against man-in-the-middle attacks\n- Same key used for authentication and encryption\n- Weak message authentication control\n- No protection against TCP connection closing\n- Use of weak cipher suites\n\nThe presence of these properties might allow an attacker to intercept, modify, or tamper with sensitive data.\n\n\n## Recommendations\n\nFortify highly recommends forcing the client to use only the most secure protocols.\n\nExample 1:\n`ssl_sock = ssl.wrap_socket(s,ssl_version=ssl.PROTOCOL_TLSv1_2, ca_certs=\"/etc/ca_certs_file\", cert_reqs=ssl.CERT_REQUIRED)`\n\n`Example 1` demonstrates how to enforce communication over the TLSv1.2 protocol.\n\n## Tips\n\nNot available\n\n## References\n\n1. NIST Special Publication 800-52 Revision 2: Guidelines for the Selection, Configuration, and Use of Transport Layer Security (TLS) Implementations, Kerry A. McKay and David A. Cooper, https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf\n2. Analysis of the SSL 3.0 protocol, David Wagner and Bruce Schneier, https://www.schneier.com/paper-ssl.pdf\n3. CVE 2014-3566, http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3566\n4. CWE ID 327, Standards Mapping - Common Weakness Enumeration\n5. CCI-000068, CCI-000382, CCI-001453, CCI-001941, CCI-001942, CCI-002418, CCI-002420, CCI-002421, CCI-002422, CCI-002890, CCI-003123, Standards Mapping - DISA Control Correlation Identifier Version 2\n6. CM, SC, Standards Mapping - FIPS200\n7. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n8. SC-8 Transmission Confidentiality and Integrity (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n9. SC-8 Transmission Confidentiality and Integrity, Standards Mapping - NIST Special Publication 800-53 Revision 5\n10. API10 Unsafe Consumption of APIs, Standards Mapping - OWASP API Top 10 2023\n11. 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.9.3 Cryptographic Software and Devices Verifier Requirements (L2 L3), 6.2.1 Algorithms (L1 L2 L3), 6.2.2 Algorithms (L2 L3), 8.3.7 Sensitive Private Data (L2 L3), 9.1.2 Communications Security Requirements (L1 L2 L3), 9.1.3 Communications Security Requirements (L1 L2 L3) , Standards Mapping - OWASP Application Security Verification Standard 4.0\n12. MASVS-NETWORK-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n13. M3 Insufficient Transport Layer Protection, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n14. M5 Insecure Communication, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n15. M5 Insecure Communication, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n16. A10 Insecure Configuration Management, Standards Mapping - OWASP Top 10 2004\n17. A9 Insecure Communications, Standards Mapping - OWASP Top 10 2007\n18. A9 Insufficient Transport Layer Protection, Standards Mapping - OWASP Top 10 2010\n19. A5 Security Misconfiguration, Standards Mapping - OWASP Top 10 2013\n20. A6 Security Misconfiguration, Standards Mapping - OWASP Top 10 2017\n21. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n22. Requirement 4.1, Requirement 6.5.10, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n23. Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n24. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n25. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n26. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n27. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n28. Requirement 4.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n29. Requirement 4.2.1, Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n30. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n31. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n32. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.2 - Sensitive Data Protection, Control Objective 7.1 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Control Objective C.4.1 - Web Software Communications, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n33. Porous Defenses - CWE ID 327, Standards Mapping - SANS Top 25 2009\n34. Porous Defenses - CWE ID 327, Standards Mapping - SANS Top 25 2010\n35. Porous Defenses - CWE ID 327, Standards Mapping - SANS Top 25 2011\n36. APP3250.1 CAT I, APP3260.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n37. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n38. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n39. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n40. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n41. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n42. APP3250.1 CAT I, APP3260 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n43. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n44. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n45. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n46. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n47. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n48. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n49. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n50. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n51. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n52. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n53. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n54. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n55. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n56. APSC-DV-000160 CAT II, APSC-DV-000170 CAT II, APSC-DV-001510 CAT II, APSC-DV-001620 CAT II, APSC-DV-001630 CAT II, APSC-DV-001940 CAT II, APSC-DV-001950 CAT II, APSC-DV-002440 CAT I, APSC-DV-002450 CAT II, APSC-DV-002460 CAT II, APSC-DV-002470 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n57. Insufficient Transport Layer Protection (WASC-04), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "94879CD5-E307-48A4-9C79-11DE34AC20D2",
              "shortDescription": {
                "text": "Password Management: Empty Password"
              },
              "fullDescription": {
                "text": "## Password Management: Empty Password\n\nEmpty passwords may compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths.\n\n\n\nExample: The following code attempts to connect to a database with an empty password.\n\n\n    ...\n    db = mysql.connect(\"localhost\",\"scott\",\"\",\"mydb\")\n    ...\n\n\nIf the code in the Example succeeds, it indicates that the database user account \"scott\" is configured with an empty password, which an attacker can easily guess. After the program ships, updating the account to use a non-empty password will require a code change.\n\n## Recommendations\n\nAlways read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or `null` passwords.\n\n## Tips\n\n1.  Avoid empty passwords in source code and avoid using default passwords.\n\n2.  To identify `null`, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word `password`. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.\n\n\n\n## References\n\n1. CWE ID 259, Standards Mapping - Common Weakness Enumeration\n2. [13] CWE ID 287, [19] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [14] CWE ID 287, [20] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [14] CWE ID 287, [16] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [14] CWE ID 287, [15] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [13] CWE ID 287, [18] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-000196, CCI-001199, CCI-003109, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. IA, Standards Mapping - FIPS200\n9. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n10. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 2.1.1 Password Security Requirements (L1 L2 L3), 2.1.2 Password Security Requirements (L1 L2 L3), 2.1.3 Password Security Requirements (L1 L2 L3), 2.1.4 Password Security Requirements (L1 L2 L3), 2.1.7 Password Security Requirements (L1 L2 L3), 2.1.8 Password Security Requirements (L1 L2 L3), 2.1.9 Password Security Requirements (L1 L2 L3), 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.1 Service Authentication Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.4 Service Authentication Requirements (L2 L3), 3.5.2 Token-based Session Management (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.4.1 Secret Management (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.3 Malicious Code Search (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n18. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n19. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n20. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n21. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n22. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Requirement 8.3.2, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective C.2.1.2 - Web Software Access Controls, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Porous Defenses - CWE ID 259, Standards Mapping - SANS Top 25 2009\n35. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n36. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n37. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n38. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n39. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n40. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n41. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n42. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n43. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n49. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n50. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n51. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n52. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n53. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n54. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n55. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n56. Insufficient Authentication, Standards Mapping - Web Application Security Consortium 24 + 2\n57. Insufficient Authentication (WASC-01), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "DEA6E5DD-E8F9-418F-A704-F3C6492A2940",
              "shortDescription": {
                "text": "Password Management: Empty Password"
              },
              "fullDescription": {
                "text": "## Password Management: Empty Password\n\nEmpty passwords may compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths.\n\n\n\nExample: The following code attempts to connect to a database with an empty password.\n\n\n    ...\n    db = mysql.connect(\"localhost\",\"scott\",\"\",\"mydb\")\n    ...\n\n\nIf the code in the Example succeeds, it indicates that the database user account \"scott\" is configured with an empty password, which an attacker can easily guess. After the program ships, updating the account to use a non-empty password will require a code change.\n\n## Recommendations\n\nAlways read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or `null` passwords.\n\n## Tips\n\n1.  Avoid empty passwords in source code and avoid using default passwords.\n\n2.  To identify `null`, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word `password`. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.\n\n\n\n## References\n\n1. CWE ID 259, Standards Mapping - Common Weakness Enumeration\n2. [13] CWE ID 287, [19] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [14] CWE ID 287, [20] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [14] CWE ID 287, [16] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [14] CWE ID 287, [15] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [13] CWE ID 287, [18] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-000196, CCI-001199, CCI-003109, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. IA, Standards Mapping - FIPS200\n9. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n10. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 2.1.1 Password Security Requirements (L1 L2 L3), 2.1.2 Password Security Requirements (L1 L2 L3), 2.1.3 Password Security Requirements (L1 L2 L3), 2.1.4 Password Security Requirements (L1 L2 L3), 2.1.7 Password Security Requirements (L1 L2 L3), 2.1.8 Password Security Requirements (L1 L2 L3), 2.1.9 Password Security Requirements (L1 L2 L3), 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.1 Service Authentication Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.4 Service Authentication Requirements (L2 L3), 3.5.2 Token-based Session Management (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.4.1 Secret Management (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.3 Malicious Code Search (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n18. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n19. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n20. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n21. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n22. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Requirement 8.3.2, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective C.2.1.2 - Web Software Access Controls, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Porous Defenses - CWE ID 259, Standards Mapping - SANS Top 25 2009\n35. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n36. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n37. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n38. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n39. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n40. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n41. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n42. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n43. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n49. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n50. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n51. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n52. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n53. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n54. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n55. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n56. Insufficient Authentication, Standards Mapping - Web Application Security Consortium 24 + 2\n57. Insufficient Authentication (WASC-01), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "E66038BE-08FC-463E-BAFD-00DB0945751C",
              "shortDescription": {
                "text": "Password Management: Hardcoded Password"
              },
              "fullDescription": {
                "text": "## Password Management: Hardcoded Password\n\nHardcoded passwords could compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\n\nExample: The following code hardcodes a password:\n\n\n\n    password = \"tiger\"\n    ...\n    response.writeln(\"Password:\" + password)\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system. Even worse, if attackers have access to the binary for the application they can use one of many publicly available decompilers to access the disassembled code, which will contain the values of the passwords used.\n\n## Recommendations\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n## Tips\n\n1.  Avoid hardcoding passwords in source code and avoid using default passwords. If a hardcoded password is the default, require that it be changed and remove it from the source code.\n\n2.  When identifying hardcoded passwords, default rules only consider fields and variables that contain the word `password`. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.\n\n\n\n## References\n\n1. CWE ID 259, CWE ID 798, Standards Mapping - Common Weakness Enumeration\n2. [13] CWE ID 287, [19] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [14] CWE ID 287, [20] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [14] CWE ID 287, [16] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [14] CWE ID 287, [15] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [13] CWE ID 287, [18] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-000196, CCI-001199, CCI-002367, CCI-003109, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. IA, Standards Mapping - FIPS200\n9. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n10. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.1 Service Authentication Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.4 Service Authentication Requirements (L2 L3), 3.5.2 Token-based Session Management (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.4.1 Secret Management (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.3 Malicious Code Search (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n18. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n19. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n20. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n21. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n22. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective C.2.1.2 - Web Software Access Controls, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Porous Defenses - CWE ID 259, Standards Mapping - SANS Top 25 2009\n35. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2010\n36. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2011\n37. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. Insufficient Authentication, Standards Mapping - Web Application Security Consortium 24 + 2\n59. Insufficient Authentication (WASC-01), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "7F928706-8A33-4223-896C-DB99C2DD94B8",
              "shortDescription": {
                "text": "Password Management: Hardcoded Password"
              },
              "fullDescription": {
                "text": "## Password Management: Hardcoded Password\n\nHardcoded passwords could compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\n\nExample: The following code hardcodes a password:\n\n\n\n    password = \"tiger\"\n    ...\n    response.writeln(\"Password:\" + password)\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system. Even worse, if attackers have access to the binary for the application they can use one of many publicly available decompilers to access the disassembled code, which will contain the values of the passwords used.\n\n## Recommendations\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n## Tips\n\n1.  Avoid hardcoding passwords in source code and avoid using default passwords. If a hardcoded password is the default, require that it be changed and remove it from the source code.\n\n2.  When identifying hardcoded passwords, default rules only consider fields and variables that contain the word `password`. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.\n\n\n\n## References\n\n1. CWE ID 259, CWE ID 798, Standards Mapping - Common Weakness Enumeration\n2. [13] CWE ID 287, [19] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [14] CWE ID 287, [20] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [14] CWE ID 287, [16] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [14] CWE ID 287, [15] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [13] CWE ID 287, [18] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-000196, CCI-001199, CCI-002367, CCI-003109, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. IA, Standards Mapping - FIPS200\n9. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n10. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.1 Service Authentication Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.4 Service Authentication Requirements (L2 L3), 3.5.2 Token-based Session Management (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.4.1 Secret Management (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.3 Malicious Code Search (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n18. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n19. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n20. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n21. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n22. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective C.2.1.2 - Web Software Access Controls, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Porous Defenses - CWE ID 259, Standards Mapping - SANS Top 25 2009\n35. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2010\n36. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2011\n37. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. Insufficient Authentication, Standards Mapping - Web Application Security Consortium 24 + 2\n59. Insufficient Authentication (WASC-01), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
              "shortDescription": {
                "text": "Password Management: Hardcoded Password"
              },
              "fullDescription": {
                "text": "## Password Management: Hardcoded Password\n\nHardcoded passwords could compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\n\nExample: The following code hardcodes a password:\n\n\n\n    password = \"tiger\"\n    ...\n    response.writeln(\"Password:\" + password)\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system. Even worse, if attackers have access to the binary for the application they can use one of many publicly available decompilers to access the disassembled code, which will contain the values of the passwords used.\n\n## Recommendations\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n## Tips\n\n1.  Avoid hardcoding passwords in source code and avoid using default passwords. If a hardcoded password is the default, require that it be changed and remove it from the source code.\n\n2.  When identifying hardcoded passwords, default rules only consider fields and variables that contain the word `password`. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.\n\n\n\n## References\n\n1. CWE ID 259, CWE ID 798, Standards Mapping - Common Weakness Enumeration\n2. [13] CWE ID 287, [19] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [14] CWE ID 287, [20] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [14] CWE ID 287, [16] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [14] CWE ID 287, [15] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [13] CWE ID 287, [18] CWE ID 798, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-000196, CCI-001199, CCI-002367, CCI-003109, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. IA, Standards Mapping - FIPS200\n9. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n10. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 2.3.1 Authenticator Lifecycle Requirements (L1 L2 L3), 2.6.2 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.1 Service Authentication Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.4 Service Authentication Requirements (L2 L3), 3.5.2 Token-based Session Management (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.4.1 Secret Management (L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.3 Malicious Code Search (L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n18. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n19. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n20. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n21. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n22. A07 Identification and Authentication Failures, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 5.3 - Authentication and Access Control, Control Objective 6.3 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective C.2.1.2 - Web Software Access Controls, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Porous Defenses - CWE ID 259, Standards Mapping - SANS Top 25 2009\n35. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2010\n36. Porous Defenses - CWE ID 798, Standards Mapping - SANS Top 25 2011\n37. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, APSC-DV-003270 CAT II, APSC-DV-003280 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. Insufficient Authentication, Standards Mapping - Web Application Security Consortium 24 + 2\n59. Insufficient Authentication (WASC-01), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "DEE037A3-DC07-4019-BE04-C537606ABC32",
              "shortDescription": {
                "text": "Password Management: Password in Comment"
              },
              "fullDescription": {
                "text": "## Password Management: Password in Comment\n\nStoring passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.\n"
              },
              "help": {
                "text": "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only is the password visible to the project's developers, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n\n    ...\n    # Default username for database connection is \"scott\"\n    # Default password for database connection is \"tiger\"\n    ...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\n## Recommendations\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n## Tips\n\n1.  Avoid hardcoding passwords in source code and avoid using default passwords. If a hardcoded password is the default, require that it be changed and remove it from the source code.\n\n\n\n## References\n\n1. CWE ID 615, Standards Mapping - Common Weakness Enumeration\n2. CCI-000196, CCI-001199, CCI-002367, Standards Mapping - DISA Control Correlation Identifier Version 2\n3. IA, Standards Mapping - FIPS200\n4. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n5. SC-28 Protection of Information at Rest (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n6. SC-28 Protection of Information at Rest, Standards Mapping - NIST Special Publication 800-53 Revision 5\n7. MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n8. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n9. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n10. M1 Improper Credential Usage, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n11. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n12. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n13. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n14. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n15. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n16. A05 Security Misconfiguration, Standards Mapping - OWASP Top 10 2021\n17. Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n18. Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n19. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n20. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n21. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n22. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n23. Requirement 6.3.1, Requirement 6.5.3, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n24. Requirement 3.2.1, Requirement 6.2.4, Requirement 6.5.3, Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n25. Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n26. Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n27. Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n28. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n29. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n30. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n31. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n32. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n33. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n34. APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n35. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n36. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n37. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n38. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n39. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n40. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n41. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n42. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n43. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n44. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n45. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n46. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n47. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n48. APSC-DV-001740 CAT I, APSC-DV-002330 CAT II, APSC-DV-003110 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n49. Information Leakage, Standards Mapping - Web Application Security Consortium 24 + 2\n50. Information Leakage (WASC-13), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
              "shortDescription": {
                "text": "Path Manipulation: Zip Entry Overwrite"
              },
              "fullDescription": {
                "text": "## Path Manipulation: Zip Entry Overwrite\n\nAllowing user input to control paths used in file system operations could enable an attacker to arbitrarily overwrite files on the system.\n"
              },
              "help": {
                "text": "Path Manipulation: Zip Entry Overwrite errors occur when a Zip file is opened and expanded without checking the file path of the Zip entry.\n\nExample: The following example extracts files from a Zip file and insecurely writes them to disk.\n\n\n\n    import zipfile\n    import tarfile\n    \n    def unzip(archive_name):\n    zf = zipfile.ZipFile(archive_name)\n    zf.extractall(\".\")\n    zf.close()\n    \n    def untar(archive_name):\n    tf = tarfile.TarFile(archive_name)\n    tf.extractall(\".\")\n    tf.close()\n\n\n\n## Recommendations\n\nWhen decompressing untrusted Zip files, make sure to use a secure version of the Zip library (see Tips section).\n\n## Tips\n\n1.  zipfile fixed the vulnerability in version 2.7.4. Please disregard this issue if you are using a secure version.\n\n2.  tarfile is still vulnerable in the latest version (2.7.15 and 3.7.0) and should not be used with untrusted files.\n\n\n\n## References\n\n1. CWE ID 22, CWE ID 73, Standards Mapping - Common Weakness Enumeration\n2. [10] CWE ID 022, Standards Mapping - Common Weakness Enumeration Top 25 2019\n3. [12] CWE ID 022, Standards Mapping - Common Weakness Enumeration Top 25 2020\n4. [8] CWE ID 022, Standards Mapping - Common Weakness Enumeration Top 25 2021\n5. [8] CWE ID 022, Standards Mapping - Common Weakness Enumeration Top 25 2022\n6. [8] CWE ID 022, Standards Mapping - Common Weakness Enumeration Top 25 2023\n7. CCI-002754, Standards Mapping - DISA Control Correlation Identifier Version 2\n8. SI, Standards Mapping - FIPS200\n9. Access Violation, Standards Mapping - General Data Protection Regulation\n10. SI-10 Information Input Validation (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n11. SI-10 Information Input Validation, Standards Mapping - NIST Special Publication 800-53 Revision 5\n12. 12.3.1 File Execution Requirements (L1 L2 L3), 12.3.2 File Execution Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n13. MASVS-CODE-4, MASVS-PLATFORM-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n14. M8 Security Decisions Via Untrusted Inputs, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n15. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n16. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n17. A1 Unvalidated Input, Standards Mapping - OWASP Top 10 2004\n18. A4 Insecure Direct Object Reference, Standards Mapping - OWASP Top 10 2007\n19. A4 Insecure Direct Object References, Standards Mapping - OWASP Top 10 2010\n20. A4 Insecure Direct Object References, Standards Mapping - OWASP Top 10 2013\n21. A5 Broken Access Control, Standards Mapping - OWASP Top 10 2017\n22. A01 Broken Access Control, Standards Mapping - OWASP Top 10 2021\n23. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n24. Requirement 6.3.1.1, Requirement 6.5.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n25. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n26. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n27. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n28. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n29. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n30. Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n31. Control Objective 4.2 - Critical Asset Protection, Control Objective 5.4 - Authentication and Access Control, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n32. Control Objective 4.2 - Critical Asset Protection, Control Objective 5.4 - Authentication and Access Control, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n33. Control Objective 4.2 - Critical Asset Protection, Control Objective 5.4 - Authentication and Access Control, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Control Objective C.2.3 - Web Software Access Controls, Control Objective C.3.2 - Web Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n34. Risky Resource Management - CWE ID 426, Standards Mapping - SANS Top 25 2009\n35. Risky Resource Management - CWE ID 022, Standards Mapping - SANS Top 25 2010\n36. Risky Resource Management - CWE ID 022, Standards Mapping - SANS Top 25 2011\n37. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n38. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n39. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n40. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n41. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n42. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n43. APP3510 CAT I, APP3600 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n44. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n45. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n46. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n47. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n48. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n49. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n50. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n51. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n52. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n53. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n54. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n55. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n56. APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n57. APSC-DV-002530 CAT II, APSC-DV-002560 CAT I, APSC-DV-002960 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n58. Path Traversal, Standards Mapping - Web Application Security Consortium 24 + 2\n59. Path Traversal (WASC-33), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "D4C1F048-3309-45A8-B726-FF039217DAE3",
              "shortDescription": {
                "text": "Poor Error Handling: Empty Catch Block"
              },
              "fullDescription": {
                "text": "## Poor Error Handling: Empty Catch Block\n\nIgnoring an exception can cause the program to overlook unexpected states and conditions.\n"
              },
              "help": {
                "text": "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\n\nTwo dubious assumptions that are easy to spot in code are \"this method call can never fail\" and \"it doesn't matter if this call fails\". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.\n\nExample 1: The following code excerpt ignores a rarely-thrown exception from `open()`.\n\n\n\n    try:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(s.strip())\n    except:\n    # This will never happen\n    pass\n\n\nIf a `RareException` were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.\n\n## Recommendations\n\nAt a minimum, log the fact that the exception was thrown so that it will be possible to come back later and make sense of the resulting program behavior. Better yet, abort the current operation. If the exception is being ignored because the caller cannot properly handle it but the context makes it inconvenient or impossible for the caller to declare that it throws the exception itself, consider throwing a `RuntimeException` or an `Error`, both of which are unchecked exceptions.\n\nExample 2: The code in `Example 1` could be rewritten in the following way:\n\n\n\n    try:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(s.strip())\n    except IOError as e:\n    logging.error(\"I/O error({0}): {1}\".format(e.errno, e.strerror))\n    except ValueError:\n    logging.error(\"Could not convert data to an integer.\")\n    except:\n    logging.error(\"Unexpected error:\", sys.exc_info()[0])\n    raise\n\n\n\n## Tips\n\nNot available\n\n## References\n\n1. CWE ID 1069, Standards Mapping - Common Weakness Enumeration\n2. CCI-001312, CCI-001314, CCI-003272, Standards Mapping - DISA Control Correlation Identifier Version 2\n3. AU, Standards Mapping - FIPS200\n4. Indirect Access to Sensitive Data, Standards Mapping - General Data Protection Regulation\n5. SI-11 Error Handling (P2), Standards Mapping - NIST Special Publication 800-53 Revision 4\n6. SI-11 Error Handling, Standards Mapping - NIST Special Publication 800-53 Revision 5\n7. 7.4.1 Error Handling (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n8. A7 Improper Error Handling, Standards Mapping - OWASP Top 10 2004\n9. A6 Information Leakage and Improper Error Handling, Standards Mapping - OWASP Top 10 2007\n10. Requirement 6.5.7, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n11. Requirement 6.3.1.2, Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n12. Requirement 6.5.5, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n13. Requirement 6.5.5, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n14. Requirement 6.5.5, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n15. Requirement 6.5.5, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n16. Requirement 6.5.5, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n17. Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n18. Control Objective 3.6 - Sensitive Data Retention, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n19. Control Objective 3.6 - Sensitive Data Retention, Control Objective B.3.2 - Terminal Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n20. Control Objective 3.6 - Sensitive Data Retention, Control Objective B.3.2 - Terminal Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n21. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n22. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n23. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n24. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n25. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n26. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n27. APP3120 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n28. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n29. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n30. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n31. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n32. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n33. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n34. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n35. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n36. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n37. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n38. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n39. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n40. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n41. APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, APSC-DV-003235 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "B27A8E0E-30CF-41FE-AE82-A9299E506F8F0",
              "shortDescription": {
                "text": "Privacy Violation"
              },
              "fullDescription": {
                "text": "## Privacy Violation\n\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal.\n"
              },
              "help": {
                "text": "Privacy violations occur when:\n\n1. Private user information enters the program.\n\n2. The data is written to an external location, such as the console, file system, or network.\n\n\nExample 1: The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored is the return value from the `getPassword()` function that returns user-supplied plain text password associated with the account.\n\n\n\n    pass = getPassword();\n    logger.warning('%s: %s %s %s', id, pass, type, tsstamp)\n\n\nThe code in `Example 1` logs a plain text password to the application eventlog. Although many developers trust the eventlog as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.\n\nPrivate data can enter a program in a variety of ways:\n\n- Directly from the user in the form of a password or personal information\n\n- Accessed from a database or other data store by the application\n\n- Indirectly from a partner or other third party\n\nSometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\n\nSecurity and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.\n\nAlthough there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer email addresses to a spammer marketing an offshore gambling web site [1].\n\nIn response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:\n\n- Safe Harbor Privacy Framework [3]\n\n- Gramm-Leach Bliley Act (GLBA) [4]\n\n- Health Insurance Portability and Accountability Act (HIPAA) [5]\n\n- California SB-1386 [6]\n\nDespite these regulations, privacy violations continue to occur with alarming frequency.\n\n## Recommendations\n\nWhen security and privacy demands clash, privacy should usually be given the higher priority. To accomplish this and still maintain required security information, cleanse any private information before it exits the program.\n\nTo enforce good privacy management, develop and strictly adhere to internal privacy guidelines. The guidelines should specifically describe how an application should handle private data. If your organization is regulated by federal or state law, ensure that your privacy guidelines are sufficiently strenuous to meet the legal requirements. Even if your organization is not regulated, you must protect private information or risk losing customer confidence.\n\nThe best policy with respect to private data is to minimize its exposure. Applications, processes, and employees should not be granted access to any private data unless the access is required for the tasks that they are to perform. Just as the principle of least privilege dictates that no operation should be performed with more than the necessary privileges, access to private data should be restricted to the smallest possible group.\n\n## Tips\n\n1.  As part of any thorough audit for privacy violations, ensure that custom rules are written to identify all sources of private or otherwise sensitive information entering the program. Most sources of private data cannot be identified automatically. Without custom rules, your check for privacy violations is likely to be substantially incomplete.\n\n\n\n## References\n\n1. AOL man pleads guilty to selling 92m email addies, J. Oates, https://www.theregister.co.uk/2005/02/07/aol_email_theft/\n2. Privacy Initiatives, http://www.ftc.gov/privacy/\n3. Safe Harbor Privacy Framework, http://www.export.gov/safeharbor/\n4. Financial Privacy: The Gramm-Leach Bliley Act (GLBA), http://www.ftc.gov/privacy/glbact/index.html\n5. Health Insurance Portability and Accountability Act (HIPAA), http://www.hhs.gov/ocr/hipaa/\n6. California SB-1386, https://leginfo.legislature.ca.gov/faces/billTextClient.xhtml?bill_id=200120020SB1386\n7. Writing Secure Code, Second Edition, M. Howard, D. LeBlanc\n8. CWE ID 359, Standards Mapping - Common Weakness Enumeration\n9. [4] CWE ID 200, Standards Mapping - Common Weakness Enumeration Top 25 2019\n10. [7] CWE ID 200, Standards Mapping - Common Weakness Enumeration Top 25 2020\n11. [20] CWE ID 200, Standards Mapping - Common Weakness Enumeration Top 25 2021\n12. CCI-000169, CCI-000196, CCI-000197, CCI-001199, CCI-001312, CCI-001314, Standards Mapping - DISA Control Correlation Identifier Version 2\n13. Privacy Violation, Standards Mapping - General Data Protection Regulation\n14. AC-4 Information Flow Enforcement (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n15. AC-4 Information Flow Enforcement, Standards Mapping - NIST Special Publication 800-53 Revision 5\n16. 2.2.1 General Authenticator Requirements (L1 L2 L3), 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.7.1 Out of Band Verifier Requirements (L1 L2 L3), 2.7.2 Out of Band Verifier Requirements (L1 L2 L3), 2.7.3 Out of Band Verifier Requirements (L1 L2 L3), 2.8.4 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.8.5 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.10.2 Service Authentication Requirements (L2 L3), 2.10.3 Service Authentication Requirements (L2 L3), 3.7.1 Defenses Against Session Management Exploits (L1 L2 L3), 6.2.1 Algorithms (L1 L2 L3), 8.2.1 Client-side Data Protection (L1 L2 L3), 8.2.2 Client-side Data Protection (L1 L2 L3), 8.3.6 Sensitive Private Data (L2 L3), 8.1.1 General Data Protection (L2 L3), 8.1.2 General Data Protection (L2 L3), 8.3.4 Sensitive Private Data (L1 L2 L3), 9.2.3 Server Communications Security Requirements (L2 L3), 10.2.1 Malicious Code Search (L2 L3), 14.3.3 Unintended Security Disclosure Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n17. MASVS-PLATFORM-2, MASVS-STORAGE-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n18. M2 Insecure Data Storage, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n19. M6 Inadequate Privacy Controls, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n20. M6 Inadequate Privacy Controls, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n21. A6 Information Leakage and Improper Error Handling, Standards Mapping - OWASP Top 10 2007\n22. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n23. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n24. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n25. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n26. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n27. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.4, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n28. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n29. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n30. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n31. Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n32. Requirement 3.3.1, Requirement 3.5.1, Requirement 4.2.2, Requirement 8.3.1, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n33. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective A.2.3 - Cardholder Data Protection, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n34. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective A.2.3 - Cardholder Data Protection, Control Objective B.2.5 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n35. Control Objective 3.3 - Sensitive Data Retention, Control Objective 6.1 - Sensitive Data Protection, Control Objective 7 - Use of Cryptography, Control Objective A.2.3 - Cardholder Data Protection, Control Objective B.2.5 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n36. Porous Defenses - CWE ID 311, Standards Mapping - SANS Top 25 2010\n37. Porous Defenses - CWE ID 311, Standards Mapping - SANS Top 25 2011\n38. APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.1\n39. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.10\n40. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.4\n41. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.5\n42. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.6\n43. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.7\n44. APP3210.1 CAT II, APP3340 CAT I, Standards Mapping - Security Technical Implementation Guide Version 3.9\n45. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n46. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n47. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n48. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n49. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n50. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n51. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n52. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n53. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n54. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n55. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n56. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n57. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n58. APSC-DV-000650 CAT II, APSC-DV-001740 CAT I, APSC-DV-001750 CAT I, APSC-DV-002330 CAT II, APSC-DV-002570 CAT II, APSC-DV-002580 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n59. Information Leakage, Standards Mapping - Web Application Security Consortium 24 + 2\n60. Information Leakage (WASC-13), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "86D29767-DEB8-4EC5-A74F-C91132C1E7A4",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "fullDescription": {
                "text": "## SQL Injection\n\nConstructing a dynamic SQL statement with input from an untrusted source might allow an attacker to modify the statement's meaning or execute arbitrary SQL commands.\n"
              },
              "help": {
                "text": "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\n    ...\n    userName = req.field('userName')\n    itemName = req.field('itemName')\n    query = \"SELECT * FROM items WHERE owner = ' \" + userName +\" ' AND itemname = ' \" + itemName +\"';\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    ...\n\n\nThe query intends to execute the following code:\n\n\n\n    SELECT * FROM items\n    WHERE owner = <userName>\n    AND itemname = <itemName>;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if `itemName` does not contain a single-quote character. If an attacker with the user name `wiley` enters the string \"`name' OR 'a'='a`\" for `itemName`, then the query becomes the following:\n\n\n\n    SELECT * FROM items\n    WHERE owner = 'wiley'\n    AND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the `OR 'a'='a'` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n`SELECT * FROM items;`\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the `items` table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in `Example 1`. If an attacker with the user name `wiley` enters the string \"`name'; DELETE FROM items; --`\" for `itemName`, then the query becomes the following two queries:\n\n\n\n    SELECT * FROM items\n    WHERE owner = 'wiley'\n    AND itemname = 'name';\n    \n    DELETE FROM items;\n    \n    --'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in `Example 1`. If an attacker enters the string \"`name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a`\", the following three valid statements will be created:\n\n\n\n    SELECT * FROM items\n    WHERE owner = 'wiley'\n    AND itemname = 'name';\n    \n    DELETE FROM items;\n    \n    SELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n- Target fields that are not quoted\n- Find ways to bypass the need for certain escaped metacharacters\n- Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\n## Recommendations\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the `WHERE` clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n## Tips\n\n1.  A common mistake is to use parameterized SQL statements that are constructed by concatenating user-controlled strings. Of course, this defeats the purpose of using parameterized SQL statements. If you are not certain that the strings used to form parameterized statements are constants controlled by the application, do not assume that they are safe because they are not being executed directly as SQL strings. Thoroughly investigate all uses of user-controlled strings in SQL statements and verify that none can be used to modify the meaning of the query.\n\n2.  The SQL Injection issue might still be reported (with a reduced priority value) even after dataflow remediation efforts. When Fortify Static Code Analyzer finds clear dataflow evidence of user-controlled input being used to construct SQL statements, a high/critical priority dataflow issue is reported. When Fortify Static Code Analyzer cannot determine the source of the data but it can be dynamically changed, a low/medium priority semantic issue is reported. This strategy is adopted in a few select vulnerability categories such as SQL Injection where the potential impact of exploitation outweighs the inconvenience of auditing false positive issues.\n\n\n\n## References\n\n1. SQL Injection Attacks by Example, S. J. Friedl, http://www.unixwiz.net/techtips/sql-injection.html\n2. Stop SQL Injection Attacks Before They Stop You, P. Litwin\n3. SQL Injection and Oracle, Part One, P. Finnigan, http://www.securityfocus.com/infocus/1644\n4. Writing Secure Code, Second Edition, M. Howard, D. LeBlanc\n5. CWE ID 89, Standards Mapping - Common Weakness Enumeration\n6. [6] CWE ID 089, Standards Mapping - Common Weakness Enumeration Top 25 2019\n7. [6] CWE ID 089, Standards Mapping - Common Weakness Enumeration Top 25 2020\n8. [6] CWE ID 089, Standards Mapping - Common Weakness Enumeration Top 25 2021\n9. [3] CWE ID 089, Standards Mapping - Common Weakness Enumeration Top 25 2022\n10. [3] CWE ID 089, Standards Mapping - Common Weakness Enumeration Top 25 2023\n11. CCI-001310, CCI-002754, Standards Mapping - DISA Control Correlation Identifier Version 2\n12. SI, Standards Mapping - FIPS200\n13. Indirect Access to Sensitive Data, Standards Mapping - General Data Protection Regulation\n14. Rule 1.3, Standards Mapping - MISRA C 2012\n15. Rule 0-3-1, Standards Mapping - MISRA C++ 2008\n16. SI-10 Information Input Validation (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n17. SI-10 Information Input Validation, Standards Mapping - NIST Special Publication 800-53 Revision 5\n18. 5.3.4 Output Encoding and Injection Prevention Requirements (L1 L2 L3), 5.3.5 Output Encoding and Injection Prevention Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n19. MASVS-CODE-4, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n20. M7 Client Side Injection, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n21. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n22. M4 Insufficient Input/Output Validation, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n23. A6 Injection Flaws, Standards Mapping - OWASP Top 10 2004\n24. A2 Injection Flaws, Standards Mapping - OWASP Top 10 2007\n25. A1 Injection, Standards Mapping - OWASP Top 10 2010\n26. A1 Injection, Standards Mapping - OWASP Top 10 2013\n27. A1 Injection, Standards Mapping - OWASP Top 10 2017\n28. A03 Injection, Standards Mapping - OWASP Top 10 2021\n29. Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n30. Requirement 6.3.1.1, Requirement 6.5.2, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n31. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n32. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n33. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n34. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n35. Requirement 6.5.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n36. Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n37. Control Objective 4.2 - Critical Asset Protection, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n38. Control Objective 4.2 - Critical Asset Protection, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n39. Control Objective 4.2 - Critical Asset Protection, Control Objective B.3.1 - Terminal Software Attack Mitigation, Control Objective B.3.1.1 - Terminal Software Attack Mitigation, Control Objective C.3.2 - Web Software Attack Mitigation, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n40. Insecure Interaction - CWE ID 089, Standards Mapping - SANS Top 25 2009\n41. Insecure Interaction - CWE ID 089, Standards Mapping - SANS Top 25 2010\n42. Insecure Interaction - CWE ID 089, Standards Mapping - SANS Top 25 2011\n43. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n44. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n45. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n46. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n47. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n48. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n49. APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n50. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.1\n51. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.10\n52. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.11\n53. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.2\n54. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.3\n55. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.4\n56. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.5\n57. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.6\n58. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.7\n59. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.8\n60. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 4.9\n61. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.1\n62. APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.2\n63. APSC-DV-002530 CAT II, APSC-DV-002540 CAT I, APSC-DV-002560 CAT I, Standards Mapping - Security Technical Implementation Guide Version 5.3\n64. SQL Injection, Standards Mapping - Web Application Security Consortium 24 + 2\n65. SQL Injection (WASC-19), Standards Mapping - Web Application Security Consortium Version 2.00\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "D5838E86-8191-438E-A856-6BBAFE8F3875",
              "shortDescription": {
                "text": "Weak Cryptographic Hash"
              },
              "fullDescription": {
                "text": "## Weak Cryptographic Hash\n\nWeak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n"
              },
              "help": {
                "text": "MD2, MD4, MD5, RIPEMD-160, SHA-1 and Keccak are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\n## Recommendations\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, SHA-1 and Keccak for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n## Tips\n\nNot available\n\n## References\n\n1. MD5 and MD4 Collision Generators, Xiaoyun Wang, https://resources.bishopfox.com/resources/tools/other-free-tools/md4md5-collision-code/\n2. Finding Collisions in the Full SHA-1, Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu, http://people.csail.mit.edu/yiqun/SHA1AttackProceedingVersion.pdf\n3. How to Break MD5 and Other Hash Functions, Xiaoyun Wang and Hongbo Yu, https://link.springer.com/content/pdf/10.1007%2F11426639_2.pdf\n4. SDL Development Practices, https://download.microsoft.com/download/8/1/6/816C597A-5592-4867-A0A6-A0181703CD59/Microsoft_Press_eBook_TheSecurityDevelopmentLifecycle_PDF.pdf\n5. CWE ID 328, Standards Mapping - Common Weakness Enumeration\n6. CCI-002450, Standards Mapping - DISA Control Correlation Identifier Version 2\n7. MP, Standards Mapping - FIPS200\n8. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n9. SC-13 Cryptographic Protection (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n10. SC-13 Cryptographic Protection, Standards Mapping - NIST Special Publication 800-53 Revision 5\n11. 2.4.1 Credential Storage Requirements (L2 L3), 2.4.2 Credential Storage Requirements (L2 L3), 2.4.5 Credential Storage Requirements (L2 L3), 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.8.3 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.9.3 Cryptographic Software and Devices Verifier Requirements (L2 L3), 6.2.1 Algorithms (L1 L2 L3), 6.2.2 Algorithms (L2 L3), 6.2.3 Algorithms (L2 L3), 6.2.4 Algorithms (L2 L3), 6.2.5 Algorithms (L2 L3), 6.2.6 Algorithms (L2 L3), 6.2.7 Algorithms (L3), 8.3.7 Sensitive Private Data (L2 L3), 9.1.2 Communications Security Requirements (L1 L2 L3), 9.1.3 Communications Security Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n12. MASVS-CRYPTO-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n13. M6 Broken Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n14. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n15. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n16. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n17. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n18. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n19. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n20. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n21. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n22. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n23. Requirement 6.3.1.3, Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n24. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n25. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n26. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n27. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n28. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n29. Requirement 6.2.4, Requirement 4.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n30. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n31. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n32. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n33. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n34. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n35. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n36. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n37. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n38. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n39. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n40. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n41. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n42. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n43. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n44. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n45. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n46. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n47. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n48. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n49. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n50. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n51. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n52. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n53. APSC-DV-000590 CAT II, APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
              "shortDescription": {
                "text": "Weak Cryptographic Hash"
              },
              "fullDescription": {
                "text": "## Weak Cryptographic Hash\n\nWeak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n"
              },
              "help": {
                "text": "MD2, MD4, MD5, RIPEMD-160, SHA-1 and Keccak are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\n## Recommendations\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, SHA-1 and Keccak for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n## Tips\n\nNot available\n\n## References\n\n1. MD5 and MD4 Collision Generators, Xiaoyun Wang, https://resources.bishopfox.com/resources/tools/other-free-tools/md4md5-collision-code/\n2. Finding Collisions in the Full SHA-1, Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu, http://people.csail.mit.edu/yiqun/SHA1AttackProceedingVersion.pdf\n3. How to Break MD5 and Other Hash Functions, Xiaoyun Wang and Hongbo Yu, https://link.springer.com/content/pdf/10.1007%2F11426639_2.pdf\n4. SDL Development Practices, https://download.microsoft.com/download/8/1/6/816C597A-5592-4867-A0A6-A0181703CD59/Microsoft_Press_eBook_TheSecurityDevelopmentLifecycle_PDF.pdf\n5. CWE ID 328, Standards Mapping - Common Weakness Enumeration\n6. CCI-002450, Standards Mapping - DISA Control Correlation Identifier Version 2\n7. MP, Standards Mapping - FIPS200\n8. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n9. SC-13 Cryptographic Protection (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n10. SC-13 Cryptographic Protection, Standards Mapping - NIST Special Publication 800-53 Revision 5\n11. 2.4.1 Credential Storage Requirements (L2 L3), 2.4.2 Credential Storage Requirements (L2 L3), 2.4.5 Credential Storage Requirements (L2 L3), 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.8.3 Single or Multi Factor One Time Verifier Requirements (L2 L3), 2.9.3 Cryptographic Software and Devices Verifier Requirements (L2 L3), 6.2.1 Algorithms (L1 L2 L3), 6.2.2 Algorithms (L2 L3), 6.2.3 Algorithms (L2 L3), 6.2.4 Algorithms (L2 L3), 6.2.5 Algorithms (L2 L3), 6.2.6 Algorithms (L2 L3), 6.2.7 Algorithms (L3), 8.3.7 Sensitive Private Data (L2 L3), 9.1.2 Communications Security Requirements (L1 L2 L3), 9.1.3 Communications Security Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n12. MASVS-CRYPTO-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n13. M6 Broken Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n14. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n15. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n16. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n17. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n18. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n19. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n20. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n21. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n22. Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n23. Requirement 6.3.1.3, Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n24. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n25. Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n26. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n27. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n28. Requirement 6.5.3, Requirement 4.1, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n29. Requirement 6.2.4, Requirement 4.2.1, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n30. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n31. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n32. Control Objective 7.1 - Use of Cryptography, Control Objective 7.4 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n33. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n34. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n35. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n36. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n37. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n38. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n39. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n40. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n41. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n42. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n43. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n44. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n45. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n46. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n47. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n48. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n49. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n50. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n51. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n52. APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n53. APSC-DV-000590 CAT II, APSC-DV-002010 CAT II, APSC-DV-002020 CAT II, APSC-DV-002030 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            },
            {
              "id": "C209655B-3C61-40B0-A24D-20E35541A890",
              "shortDescription": {
                "text": "Weak Encryption: Insufficient Key Size"
              },
              "fullDescription": {
                "text": "## Weak Encryption: Insufficient Key Size\n\nAn otherwise strong encryption algorithm is vulnerable to brute-force attack when an insufficient key size is used.\n"
              },
              "help": {
                "text": "Current cryptography guidelines suggest that a key length of at least 2048 bits should be used with the RSA algorithm. However, continued advancements in computing power and factoring techniques [1] mean that future increases in the recommended key size are inevitable.\n\nExample 1: The following code generates a 1024-bit RSA encryption key.\n\n\n    ...\n    from Crypto.PublicKey import RSA\n    key = RSA.generate(1024)\n    ...\n\n\nWhen it comes to symmetric encryption, the key lengths should be at least 168 bits for Triple DES and 128 bits for AES.\n\n## Recommendations\n\nAt a bare minimum, ensure RSA keys are no less than 2048 bits long. Applications that require strong encryption for the next several years should use keys at least 4096 bits long.\n\nWhen the RSA algorithm is used, ensure the specified key length is at least 2048 bits.\n\nExample 2: The following code generates a 2048-bit RSA encryption key.\n\n\n    ...\n    from Crypto.PublicKey import RSA\n    key = RSA.generate(2048)\n    ...\n\n\n\nSimilarly, when symmetric encryption is used, ensure the specified key length is at least 128 bits for AES and 168 bits for Triple DES.\n\nExample 3: The following code uses a 128-bit AES encryption key.\n\n\n    ...\n    from Crypto.Cipher import AES\n    from Crypto import Random\n    \n    key = Random.new().read(AES.block_size)\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    msg = iv + cipher.encrypt(b'Attack at dawn')\n    ...\n\n\n\n## Tips\n\n1.  Fortify Software Security Research group's Crypto Manifesto 2015 gives further details about suggested algorithms and their associated key sizes.\n\n\n\n## References\n\n1. 307-digit key crack endangers 1024-bit RSA, J. Cheng, http://arstechnica.com/news.ars/post/20070523-researchers-307-digit-key-crack-endangers-1024-bit-rsa.html\n2. Cryptographic Algorithms and Key Sizes for Personal Identity Verification, https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-78-4.pdf\n3. B. Chess and J. West, Secure Programming with Static Analysis. Boston, MA: Addison-Wesley, 2007.\n4. CWE ID 326, Standards Mapping - Common Weakness Enumeration\n5. CCI-002450, Standards Mapping - DISA Control Correlation Identifier Version 2\n6. MP, Standards Mapping - FIPS200\n7. Insufficient Data Protection, Standards Mapping - General Data Protection Regulation\n8. SC-12 Cryptographic Key Establishment and Management (P1), Standards Mapping - NIST Special Publication 800-53 Revision 4\n9. SC-12 Cryptographic Key Establishment and Management, Standards Mapping - NIST Special Publication 800-53 Revision 5\n10. 2.6.3 Look-up Secret Verifier Requirements (L2 L3), 2.8.3 Single or Multi Factor One Time Verifier Requirements (L2 L3), 6.2.1 Algorithms (L1 L2 L3), 6.2.3 Algorithms (L2 L3), 6.2.4 Algorithms (L2 L3), 6.2.5 Algorithms (L2 L3), 6.2.6 Algorithms (L2 L3), 9.1.2 Communications Security Requirements (L1 L2 L3), 9.1.3 Communications Security Requirements (L1 L2 L3), Standards Mapping - OWASP Application Security Verification Standard 4.0\n11. MASVS-CRYPTO-1, Standards Mapping - OWASP Mobile Application Security Verification Standard 2.0\n12. M6 Broken Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2014\n13. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2023\n14. M10 Insufficient Cryptography, Standards Mapping - OWASP Mobile Top 10 Risks 2024\n15. A8 Insecure Storage, Standards Mapping - OWASP Top 10 2004\n16. A8 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2007\n17. A7 Insecure Cryptographic Storage, Standards Mapping - OWASP Top 10 2010\n18. A6 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2013\n19. A3 Sensitive Data Exposure, Standards Mapping - OWASP Top 10 2017\n20. A02 Cryptographic Failures, Standards Mapping - OWASP Top 10 2021\n21. Requirement 3.6.1, Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.1\n22. Requirement 3.6.1, Requirement 6.3.1.3, Requirement 6.5.8, Standards Mapping - Payment Card Industry Data Security Standard Version 1.2\n23. Requirement 3.6.1, Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 2.0\n24. Requirement 3.6.1, Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0\n25. Requirement 3.6.1, Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.1\n26. Requirement 3.6.1, Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2\n27. Requirement 3.6.1, Requirement 6.5.3, Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1\n28. Requirement 3.6.1, Requirement 6.2.4, Standards Mapping - Payment Card Industry Data Security Standard Version 4.0\n29. Control Objective 7.2 - Use of Cryptography, Standards Mapping - Payment Card Industry Software Security Framework 1.0\n30. Control Objective 7.2 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.1\n31. Control Objective 7.2 - Use of Cryptography, Control Objective B.2.3 - Terminal Software Design, Standards Mapping - Payment Card Industry Software Security Framework 1.2\n32. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.1\n33. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.10\n34. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.4\n35. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.5\n36. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.6\n37. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.7\n38. APP3150.1 CAT II, Standards Mapping - Security Technical Implementation Guide Version 3.9\n39. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.1\n40. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.10\n41. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.11\n42. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.2\n43. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.3\n44. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.4\n45. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.5\n46. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.6\n47. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.7\n48. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.8\n49. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 4.9\n50. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.1\n51. APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.2\n52. APSC-DV-000590 CAT II, APSC-DV-002010 CAT II, APSC-DV-002040 CAT II, Standards Mapping - Security Technical Implementation Guide Version 5.3\n\n\nCopyright (c) 2025 Open Text\n"
              }
            }
          ],
          "properties": {
            "copyright": "Copyright (c) 2025 Open Text",
            "applicationName": "tlegette-gsa/PyTest1",
            "applicationId": 11596,
            "releaseName": "main",
            "releaseId": 21000
          }
        }
      },
      "results": [
        {
          "ruleId": "11BF839E-A56A-4CA7-BFD2-9AC137C69F060",
          "message": {
            "text": "Line 14 in wildcard-injection.py calls __init__() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker. [More information](https://fed.fortifygov.com/redirect/Issues/7cfed296-4961-41b8-bda4-95187dd8a5e5)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "3FAC0343A7E1A8BE7A523FA9755DD275"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/wildcard-injection.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "wildcard-injection.py:14 - Read sys.argv"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/wildcard-injection.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "wildcard-injection.py:14 - __getitem__(0['1'] : return)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/wildcard-injection.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "wildcard-injection.py:14 - list(1 : return)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/wildcard-injection.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "wildcard-injection.py:14 - __init__(1)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/wildcard-injection.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "28AC7755-F497-4170-A394-8404B81A92A9",
          "message": {
            "text": "Bidirectional control characters in source code can lead to trojan source attacks. [More information](https://fed.fortifygov.com/redirect/Issues/e92cd3f9-92a3-4a3a-9275-1f35d579adc8)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "C994A5E93AB948C9F93BC08BBCF303E5"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/trojansource.py"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "trojansource.py:4"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/trojansource.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by randbytes() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/9c81edc5-9835-4c00-a87d-34ea0fb22d5a)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "B6EC2BB6E8E361F55F9B454C63AA1DFD"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:13 - randbytes()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by choice() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/b6d8b9c2-6763-4ec6-aa98-bb1830a8627a)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "5306E912CF9413B6BC298F57B2A5BA5F"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:9 - choice()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by random() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/104ee8df-2f5b-4ad1-97e3-84b85cce3acc)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "43E83CF2D0019628D02A416F821EB9F8"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:6 - random()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 6
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by triangular() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/99f0b1d7-706c-4e3c-b71e-03782ce15ba3)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "1E9453326D5BE57412BAEA62D96CB910"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:12 - triangular()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by randint() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/8a63b0f8-bec6-4931-aeaf-ff21565835be)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "C546835F611BC43CE4BF5EFB95A2365E"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:8 - randint()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by randrange() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/dc4f7493-0d83-41c6-bc01-488cb7123d08)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "D575BFDB6703D50BA07B7A8AED862EDB"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:7 - randrange()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8DBA2E8-A162-4A52-B854-046A8EE5ECB9",
          "message": {
            "text": "The random number generator implemented by uniform() cannot withstand a cryptographic attack. [More information](https://fed.fortifygov.com/redirect/Issues/ee63d380-d2d7-4e10-a6d2-ce5d8f4c4fbb)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "B51A1AA44E25E3A38502BD6F2985B0A0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/random_module.py"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "random_module.py:11 - uniform()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/random_module.py"
                          },
                          "region": {
                            "startLine": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via delete() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/2f353534-f438-4141-8c8a-d4a60b67a494)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "0BBF1FB0762F5944BA1EA7D7DC48AC3D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:12 - FunctionCall: delete"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via head() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/1be3c7b1-47ed-49a6-86da-8783c90648c7)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "0C98999E0F3E04DB9AAE98E47A5BF938"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:18 - FunctionCall: head"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via options() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/fefb5143-65f8-43df-afd7-eefd677c51be)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "16BC9563F201D744751DF18B67366402"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:16 - FunctionCall: options"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via put() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/817ef58f-8015-4070-bbb4-faa86a789c1a)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "32DCB3631D32A6D6F61F90D6B2D61FCF"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:10 - FunctionCall: put"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via get() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/6371faf3-26c9-4d3d-b298-810c1416346e)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "637D643B3B59F9BBE47AC70C1A3C440D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:6 - FunctionCall: get"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 6
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via patch() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/59e647f3-442c-4314-b61f-bd10b89a24e4)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "7C84A8BE5614FC84B4544659E03B4460"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:14 - FunctionCall: patch"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E8308B29-498A-4DDC-9661-AFD14E98A230",
          "message": {
            "text": "The connection established via post() in requests-ssl-verify-disabled.py does not verify the server certificate when making an SSL connection. This leaves the application vulnerable to a man-in-the-middle attack. [More information](https://fed.fortifygov.com/redirect/Issues/e4483deb-48ef-4842-903e-ab31cb6be27e)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "8098E5B53E0E60B8FABB77208E65548B"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "requests-ssl-verify-disabled.py:8 - FunctionCall: post"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "580AE6A3-5731-4F1E-B64D-2E29C029B3FE",
          "message": {
            "text": "Calling mktemp() leads to insecure temporary files, leaving application or system data vulnerable. [More information](https://fed.fortifygov.com/redirect/Issues/edcf3a1a-7776-4a7a-bf5e-0315852c8d41)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "033BFAEDF13B618A13AA96293CE2E89C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "mktemp.py:7 - mktemp()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/mktemp.py"
                          },
                          "region": {
                            "startLine": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "580AE6A3-5731-4F1E-B64D-2E29C029B3FE",
          "message": {
            "text": "Calling mktemp() leads to insecure temporary files, leaving application or system data vulnerable. [More information](https://fed.fortifygov.com/redirect/Issues/b7c69686-d562-4208-8e44-538bed5a2771)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "033BFAEDF13B618A13AA96293CE2E89B"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "mktemp.py:10 - mktemp()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/mktemp.py"
                          },
                          "region": {
                            "startLine": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "580AE6A3-5731-4F1E-B64D-2E29C029B3FE",
          "message": {
            "text": "Calling mktemp() leads to insecure temporary files, leaving application or system data vulnerable. [More information](https://fed.fortifygov.com/redirect/Issues/d589716b-9b7f-4212-a0ef-e93e07eaf9cd)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "D5514B5ADE88836724A7D3779692476C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mktemp.py"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "mktemp.py:8 - mktemp()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/mktemp.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8134B8CD-6059-4A40-A926-DD1F47BD3D2E",
          "message": {
            "text": "The SSLv2, SSLv23, SSLv3, TLSv1.0, and TLSv1.1 protocols contain flaws that make them insecure and should not be used to transmit sensitive data. [More information](https://fed.fortifygov.com/redirect/Issues/473c3e14-d2e3-4daf-9fed-60fad6464e80)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "52EC191413B0B927F30E2BD0A10A9A8D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ssl-insecure-version.py:23 - FunctionCall: wrap_socket"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py"
                          },
                          "region": {
                            "startLine": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8134B8CD-6059-4A40-A926-DD1F47BD3D2E",
          "message": {
            "text": "The SSLv2, SSLv23, SSLv3, TLSv1.0, and TLSv1.1 protocols contain flaws that make them insecure and should not be used to transmit sensitive data. [More information](https://fed.fortifygov.com/redirect/Issues/a3f9f3cc-71e1-4f56-8c2e-70294d13363e)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "95380B5FD9F4E4F0FE35C02A8F631A49"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ssl-insecure-version.py:13 - FunctionCall: wrap_socket"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8134B8CD-6059-4A40-A926-DD1F47BD3D2E",
          "message": {
            "text": "The SSLv2, SSLv23, SSLv3, TLSv1.0, and TLSv1.1 protocols contain flaws that make them insecure and should not be used to transmit sensitive data. [More information](https://fed.fortifygov.com/redirect/Issues/4d9c9e5b-d240-47db-95de-658fb84e4589)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "B76A3328AD24FAFC2B527F8ECF901A13"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ssl-insecure-version.py:14 - FunctionCall: wrap_socket"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8134B8CD-6059-4A40-A926-DD1F47BD3D2E",
          "message": {
            "text": "The SSLv2, SSLv23, SSLv3, TLSv1.0, and TLSv1.1 protocols contain flaws that make them insecure and should not be used to transmit sensitive data. [More information](https://fed.fortifygov.com/redirect/Issues/7b16e76b-9e48-4498-8465-4e04f9250a3a)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "CB8F173060D4C362DAE66B169CE1D959"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ssl-insecure-version.py:4 - FunctionCall: wrap_socket"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "94879CD5-E307-48A4-9C79-11DE34AC20D2",
          "message": {
            "text": "Empty passwords may compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/fca503e1-5430-458b-998b-921b1e8cc270)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "31C4CA3B7D83DDC841C3B95AA6479718"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ftplib.py:6 - FunctionCall: __init__"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ftplib.py"
                          },
                          "region": {
                            "startLine": 6
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEA6E5DD-E8F9-418F-A704-F3C6492A2940",
          "message": {
            "text": "Empty passwords may compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/439be74f-56cd-41ff-b099-31c09fc63cc4)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "6E073724B7B87441E7A6FC3EE3A5C32F"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ftplib.py:7 - FunctionCall: login"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ftplib.py"
                          },
                          "region": {
                            "startLine": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEA6E5DD-E8F9-418F-A704-F3C6492A2940",
          "message": {
            "text": "Empty passwords may compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/7c72e0ad-bd09-4a42-83a3-f8ebd1a760ce)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "6E073724B7B87441E7A6FC3EE3A5C330"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ftplib.py"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "ftplib.py:19 - FunctionCall: login"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ftplib.py"
                          },
                          "region": {
                            "startLine": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E66038BE-08FC-463E-BAFD-00DB0945751C",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/13ec5ce3-ae83-4f3b-9ab8-e008be61212b)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "45F58FC8A6B147D353D72FEA00150034"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:14 - Operation"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:11 - Variable: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7F928706-8A33-4223-896C-DB99C2DD94B8",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/a981bfb7-4bba-4155-938f-c5f1cf8ad811)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "46AED17F51DAD501348DEE72160EA9B5"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:4 - FieldAccess: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:4 - Field: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E66038BE-08FC-463E-BAFD-00DB0945751C",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/ec6e8fe6-118b-4df2-a2ea-f80304eaff6e)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "8794032BFE3E92049E0350C9A24CB20E"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:33 - Operation"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:4 - Field: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "E66038BE-08FC-463E-BAFD-00DB0945751C",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/c869de5d-076c-4e0f-8429-4cfad274c4d7)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "93E7910BB0C93AF7709C893702DD8D0D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:26 - Operation"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:23 - Variable: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/cd68a831-6b86-43f9-bd23-88cf20e36a37)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "9AC8A04706874BB5ECD0769DE4739615"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:8 - VariableAccess: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:8 - Variable: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/7fc8cce7-14c1-4628-814f-6ec997d75199)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "CC6C560708612D7720A04F3558D76DE3"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:50 - VariableAccess: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:50 - Variable: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/46dcd92d-e4b2-47fd-a038-20ccc8d0e595)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "FA279FCF66A308DAB86846DC963C7337"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:70 - VariableAccess: passphrase"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:70 - Variable: passphrase"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/8934f50b-8db2-417b-8e29-3447a8f13d11)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "F95502E65913B6629E39BC814B1C093C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:58 - VariableAccess: EMAIL_PASSWORD"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:58 - Variable: EMAIL_PASSWORD"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "A8738EDA-8778-48C3-8058-044A4E4B6B91",
          "message": {
            "text": "Hardcoded passwords could compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/7c613b4c-1c08-4258-9713-b3429a420584)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "D6E85267284382FD2DCFEA4C906C0948"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:38 - VariableAccess: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:38 - Variable: password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/46c53fcb-d26e-41d8-8dff-c4be0964554b)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "16913D16B4BEC269A92162EDA4F0B935"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:69 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/94db662a-c388-41ba-bfa6-c5c9d3d11923)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "303DBF1CF3ABE9FB2D1A52922175FC1F"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:25 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/361b5a13-1aaf-4e4b-8606-3cd3802dbe2f)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "2C5976E226657F0CE2C4E897F8188F04"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:61 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/891c229b-7d67-4459-b475-b4f09fbd6122)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "5CA04B028582C3B1E55B7C5EBC7AC58C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:32 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/1cfa0c64-8eee-4f95-9bb9-1fce5e790841)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "61C1EA44D974ADDA77A2E9C6C7DCBCF7"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:37 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/57ebe81d-2b96-4240-b6c4-a5c1c7b0d493)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "61C1EA44D974ADDA77A2E9C6C7DCBCF9"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:49 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/f1ea4499-e896-4b68-b929-4d5af5cb742b)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "61C1EA44D974ADDA77A2E9C6C7DCBCF8"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:45 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/5ba6f88f-74cc-47fe-87d5-9736b4509870)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "61C1EA44D974ADDA77A2E9C6C7DCBCFA"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:53 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 53
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/6e29a61c-c2e7-4c99-929b-2b651119d518)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "6ADC114BF455E180D054D841117798F9"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:57 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/837bd920-3fe4-406d-b5aa-d1fc9d285672)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "6C0A17B439C185B54D477E680A00AD10"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:2 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/4a5b4983-d02a-42f2-9fac-9b81ce3b4f84)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "AE310DFF460168A0539A7ECC0E8A92CF"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:19 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/f4fe924a-88b5-43e3-98da-af4fa3e4ac05)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "BD9EF3A8A4972E3277E21DA9BB7B3439"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:7 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/816127de-26c5-42f8-b78b-fc2b2fbb8ab5)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "C14FA3B8A59DEAC00561B7F71E850DC0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:13 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEE037A3-DC07-4019-BE04-C537606ABC32",
          "message": {
            "text": "Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied. [More information](https://fed.fortifygov.com/redirect/Issues/136d8bb3-c4a6-4c66-b47a-83f47a412d34)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "D05B7395B442382322E99F12029D9E6B"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:65 - Comment"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
          "message": {
            "text": "The call to extractall() at tarfile_extractall.py line 20, enables an attacker to arbitrarily write to a file anywhere on the system. [More information](https://fed.fortifygov.com/redirect/Issues/f79f331f-32ea-4c65-90de-6a79ad16bd19)"
          },
          "level": "note",
          "properties": {
            "security-severity": "6.9",
            "fortify-severity": "Medium"
          },
          "partialFingerprints": {
            "issueInstanceId": "064E57063430FD83F7851BF6F6B8C21C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "tarfile_extractall.py:20 - extractall()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py"
                          },
                          "region": {
                            "startLine": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
          "message": {
            "text": "The call to extractall() at tarfile_extractall.py line 32, enables an attacker to arbitrarily write to a file anywhere on the system. [More information](https://fed.fortifygov.com/redirect/Issues/bdac2f04-dfcc-45d1-a729-441683397b4c)"
          },
          "level": "note",
          "properties": {
            "security-severity": "6.9",
            "fortify-severity": "Medium"
          },
          "partialFingerprints": {
            "issueInstanceId": "33EBB7165ECD8404C0429589479B026E"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "tarfile_extractall.py:32 - extractall()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py"
                          },
                          "region": {
                            "startLine": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
          "message": {
            "text": "The call to extractall() at tarfile_extractall.py line 26, enables an attacker to arbitrarily write to a file anywhere on the system. [More information](https://fed.fortifygov.com/redirect/Issues/7c1e6b50-2bcc-49ed-9a66-902261e9f4d6)"
          },
          "level": "note",
          "properties": {
            "security-severity": "6.9",
            "fortify-severity": "Medium"
          },
          "partialFingerprints": {
            "issueInstanceId": "9230CB2165089B6D58B3D755BCD1700D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "tarfile_extractall.py:26 - extractall()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py"
                          },
                          "region": {
                            "startLine": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
          "message": {
            "text": "The call to extractall() at tarfile_extractall.py line 8, enables an attacker to arbitrarily write to a file anywhere on the system. [More information](https://fed.fortifygov.com/redirect/Issues/9c2325be-3cef-449e-b83a-db10517f25fd)"
          },
          "level": "note",
          "properties": {
            "security-severity": "6.9",
            "fortify-severity": "Medium"
          },
          "partialFingerprints": {
            "issueInstanceId": "C9276FFAD9D08A2B622D718E7BD28C82"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "tarfile_extractall.py:8 - extractall()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py"
                          },
                          "region": {
                            "startLine": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D226CC62-60F8-40E8-82E1-E26067BE8B05",
          "message": {
            "text": "The call to extractall() at tarfile_extractall.py line 14, enables an attacker to arbitrarily write to a file anywhere on the system. [More information](https://fed.fortifygov.com/redirect/Issues/c09dc6b8-b3d3-4430-bab0-d9103e1eb81e)"
          },
          "level": "note",
          "properties": {
            "security-severity": "6.9",
            "fortify-severity": "Medium"
          },
          "partialFingerprints": {
            "issueInstanceId": "F3912E00F27E0C7AA6E8BCCC31DF6226"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "tarfile_extractall.py:14 - extractall()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D4C1F048-3309-45A8-B726-FF039217DAE3",
          "message": {
            "text": "The method  in try_except_pass.py ignores an exception on line 11, which could cause the program to overlook unexpected states and conditions. [More information](https://fed.fortifygov.com/redirect/Issues/08fe9ba9-996d-4212-9a6b-9f109a7cb50a)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "73048823D2B26BD1AE2153A73DF26A1E"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/try_except_pass.py"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "try_except_pass.py:11 - CatchBlock"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/try_except_pass.py"
                          },
                          "region": {
                            "startLine": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D4C1F048-3309-45A8-B726-FF039217DAE3",
          "message": {
            "text": "The method  in try_except_pass.py ignores an exception on line 4, which could cause the program to overlook unexpected states and conditions. [More information](https://fed.fortifygov.com/redirect/Issues/52173b01-006c-4b25-b2e0-6dabb6c31237)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "73048823D2B26BD1AE2153A73DF26A1D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/try_except_pass.py"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "try_except_pass.py:4 - CatchBlock"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/try_except_pass.py"
                          },
                          "region": {
                            "startLine": 4
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D4C1F048-3309-45A8-B726-FF039217DAE3",
          "message": {
            "text": "The method  in try_except_pass.py ignores an exception on line 18, which could cause the program to overlook unexpected states and conditions. [More information](https://fed.fortifygov.com/redirect/Issues/7e206945-8b60-4123-9b6d-1a939bf11342)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "73048823D2B26BD1AE2153A73DF26A1F"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/try_except_pass.py"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "try_except_pass.py:18 - CatchBlock"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/try_except_pass.py"
                          },
                          "region": {
                            "startLine": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B27A8E0E-30CF-41FE-AE82-A9299E506F8F0",
          "message": {
            "text": "The file app.py mishandles confidential information on line 127, which can compromise user privacy and is often illegal. [More information](https://fed.fortifygov.com/redirect/Issues/92a8ff94-e325-4ba4-9531-5d922d4b5bed)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "390E401CB35338980DEF28F681C08D0C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "app.py:127 - Read password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 127
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "app.py:127 - format(0 : return)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 127
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "app.py:127 - print(0)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 127
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B27A8E0E-30CF-41FE-AE82-A9299E506F8F0",
          "message": {
            "text": "The file hardcoded-passwords.py mishandles confidential information on line 34, which can compromise user privacy and is often illegal. [More information](https://fed.fortifygov.com/redirect/Issues/610eacd4-c733-47f9-88c7-6628ae6e777b)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "88B45D2928E7745D03EE9565F6F8D2AA"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:34 - Read obj.password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "hardcoded-passwords.py:34 - print(0)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py"
                          },
                          "region": {
                            "startLine": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B27A8E0E-30CF-41FE-AE82-A9299E506F8F0",
          "message": {
            "text": "The file app.py mishandles confidential information on line 127, which can compromise user privacy and is often illegal. [More information](https://fed.fortifygov.com/redirect/Issues/a2a5758d-ac20-4723-9c53-63104c51d9b9)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "10.0",
            "fortify-severity": "Critical"
          },
          "partialFingerprints": {
            "issueInstanceId": "4919CDC0C4FA1238EFFBC3FCEE3F717C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "app.py:125 - __getitem__(return)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 125
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "app.py:125 - Assignment to password"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 125
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "app.py:127 - format(0 : return)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 127
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "message": {
                          "text": "app.py:127 - print(0)"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 127
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "86D29767-DEB8-4EC5-A74F-C91132C1E7A4",
          "message": {
            "text": "On line 99 of app.py, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. [More information](https://fed.fortifygov.com/redirect/Issues/c028a5a3-e70b-4455-8567-94dfc64488d3)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "3D469D09B5017B130CE614E10C50EF8D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "app.py:99 - execute()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 99
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/769d4291-e5f2-40da-8856-ea3e9c4abcc2)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "246CD0220F417FE77A7BC2E5AEDE312F"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "imports-aliases.py:12 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py"
                          },
                          "region": {
                            "startLine": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/286aff2b-53a8-4cc4-a696-f77b97bed2e2)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "3E4C7597C73BFB5F872CD5794FD12AB3"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "imports-aliases.py:13 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/790960c9-6cf7-4e1c-9259-1c0a1e73f219)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "2B4410AEA035E3A571D7B3524DF6D3A8"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "imports-aliases.py:11 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py"
                          },
                          "region": {
                            "startLine": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/d254c5cc-a12e-464a-8485-b58ddb3246cd)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "0E936793F59DFFFD357220DBFFE9991D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:20 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/388992e6-2c82-49cd-8b2e-f26bc6933701)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "312C25F8F2B213EC6BC3E5BC8B85E759"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:11 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/a3caccf2-21f0-4abf-825a-56b4a7bb8d8f)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "44835C7A9B115E08095CC836DAF98B08"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:15 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/4c2a6361-8b23-43c0-8e04-c2349036f7aa)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "47F1D345C0666A4EA3E84E04893D74BE"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:18 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/ea07b8b4-8ece-482c-a12e-645daca2fe9c)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "47F1D345C0666A4EA3E84E04893D74BF"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:16 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/e931f27f-eccf-4d4e-906f-a019f5cb4405)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "4E7C6E958B08F1199C7851691C3BACA7"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "imports-aliases.py:14 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/ac71423f-e6df-499d-97a5-b6de3d0c522b)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "4B1EE71779BC32E3C3FAF122594154CA"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:13 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/42cbd2b3-937f-42ca-a6e1-3787e7fb7efc)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "4EE9B1E738B69062368BC8F778A5EA77"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:13 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/5495398f-313a-4c13-b20b-b37f6b83d6ed)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "4EE9B1E738B69062368BC8F778A5EA76"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:14 - md5()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/e856f775-4ece-4ecb-bfdb-4d0af1561388)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "5E7654B7807FC976E038212C2D692B3C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.py"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "app.py:61 - sha1()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "app.py"
                          },
                          "region": {
                            "startLine": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/83273ac8-e2d2-4761-a520-532c58fdf788)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "5F324884ABBA103C6C07425BF9DA86E0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:5 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 5
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/670d39db-eb45-4d71-87a9-23ee2c72b0fb)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "676BF91474ACB2A2E2BA9D186975120D"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:3 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 3
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "B2AD45F8-5794-44AE-A89B-111E13BF4A97",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/8a02e133-dcaa-4424-905c-985ab2c6fbbc)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "71F02766F0B8D117C8E2B64EDD1D46EB"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "hashlib_new_insecure_functions.py:9 - new()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py"
                          },
                          "region": {
                            "startLine": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/eb28e536-35f8-4c14-b3dc-eaf32cc7d612)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "D5E2A757261B601099805CD2AD1049A9"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:22 - sha1()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "D5838E86-8191-438E-A856-6BBAFE8F3875",
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts. [More information](https://fed.fortifygov.com/redirect/Issues/8118b9de-0a73-4dcb-9e23-5670d96c2d28)"
          },
          "level": "note",
          "properties": {
            "security-severity": "3.9",
            "fortify-severity": "Low"
          },
          "partialFingerprints": {
            "issueInstanceId": "E41AEEB62DAE7E4DE0AC4CB5178A80CD"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "crypto-md5.py:20 - sha1()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py"
                          },
                          "region": {
                            "startLine": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C209655B-3C61-40B0-A24D-20E35541A890",
          "message": {
            "text": "The method  in weak_cryptographic_key_sizes.py uses an encryption algorithm with an insufficient key size, leaving the encrypted data open to a brute-force attack. [More information](https://fed.fortifygov.com/redirect/Issues/623a2822-f33c-4733-90ed-2b4c56e18eee)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "0F91030F8DC09E1AF414AEE50429AEBB"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "weak_cryptographic_key_sizes.py:46 - generate()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py"
                          },
                          "region": {
                            "startLine": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C209655B-3C61-40B0-A24D-20E35541A890",
          "message": {
            "text": "The method  in weak_cryptographic_key_sizes.py uses an encryption algorithm with an insufficient key size, leaving the encrypted data open to a brute-force attack. [More information](https://fed.fortifygov.com/redirect/Issues/2631ae10-2721-40fe-b577-3363705d7a03)"
          },
          "level": "warning",
          "properties": {
            "security-severity": "8.9",
            "fortify-severity": "High"
          },
          "partialFingerprints": {
            "issueInstanceId": "3BFBF2C3024D23CEEEFC0E933E909B32"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 1,
                  "endColumn": 80
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "message": {
                          "text": "weak_cryptographic_key_sizes.py:59 - generate()"
                        },
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py"
                          },
                          "region": {
                            "startLine": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}